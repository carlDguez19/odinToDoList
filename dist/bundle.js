(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var i=o.length-1;i>-1&&!e;)e=o[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();const e=t.p+"abbfad808c2786a6a2d4.png",n=t.p+"986e98635b18601755cf.png",o=t.p+"177a54134d0bd5aefd06.png",i=t.p+"edb755c23d1ebcf9c7a4.png",c=t.p+"c9c7160b568bb10d504c.png";class s{constructor(t,e,n,o,i){this.tTitle=t,this.tDesc=e,this.tDue=n,this.tPrio=o,this.tProj=i}set tTitle(t){this._tTitle=t}set tDesc(t){this._tDesc=t}set tDue(t){this._tDue=t}set tPrio(t){this._tPrio=t}set tProj(t){this._tProj=t}get tTitle(){return this._tTitle}get tDesc(){return this._tDesc}get tDue(){return this._tDue}get tPrio(){return this._tPrio}get tProj(){return this._tProj}}class r{constructor(t,e){this.title=t,this.description=e,this.toDos=[]}newTask(t,e,n,o,i){let c=new s(t,e,n,o,i);return this.toDos.push(c),c}get numOfTasks(){return this._toDos.length}get title(){return this._title}get description(){return this._description}get toDoList(){return this._toDos}set title(t){this._title=t}set description(t){this._description=t}}const l=document.querySelector(".newProjectOverlay");function d(){const t=document.querySelector(".errorProjectOverlay");t.style.animation="projectSlideDown 1.5s forwards",setTimeout((function(){t.style.animation="projectSlideUp 1.5s forwards"}),2500)}function a(){document.getElementById("title").value="",document.getElementById("description").value=""}function u(t){const e=document.querySelector(".todoUL"),n=document.createElement("li");n.classList.add("todo");const o=document.createElement("input");o.type="checkbox",o.classList.add("todoCheck");const i=document.createElement("input");i.type="date",i.classList.add("todoDate"),n.appendChild(i),n.appendChild(o),n.textContent=t.tTitle+"  "+t.tDue,e.appendChild(n)}const m=E(".newTaskOverlay");function p(){document.getElementById("tTitle").value="",document.getElementById("tDescription").value="",document.getElementById("tDueDate").value="",document.getElementById("tTaskPrio").value="Select One"}const h=document.querySelector(".newProjectOverlay");var f=function(t){const e=t.target.matches(".projEdit"),n=t.target.matches(".projRemove"),o=t.target.matches(".projAdd"),i=E(".projectNameMain");if(e){console.log("editButton clicked"),c=i.textContent,h.style.animation="projectSlideDown 1.5s forwards",E("#title").value=c;for(let t=0;t<C.length;t++)console.log(t+1+" "+C[t].title)}else if(n){console.log("removeButton clicked"),function(t){const e=E(".sidebarProject"),n=e.children;for(let o=0;o<n.length;o++)n[o].textContent==t&&e.removeChild(n[o])}(i.textContent),function(t){for(let e=0;e<C.length;e++)C[e].title==t&&C.splice(e,1)}(i.textContent),j();for(let t=0;t<C.length;t++)console.log(t+1+" "+C[t].title)}else if(o){m.style.animation="projectSlideDown 1.5s forwards";const t=g(i.textContent);console.log("foundProjectInArr: "+t.title),function(t){const e=E(".taskCloseButton"),n=E(".taskSubmitButton");e.addEventListener("click",(function(){p(),m.style.animation="projectSlideUp 1.5s forwards"})),n.addEventListener("click",(function(e){e.preventDefault(),m.style.animation="projectSlideUp 1.5s forwards";const n=function(t){const e=document.getElementById("tTitle").value,n=document.getElementById("tDescription").value,o=document.getElementById("tDueDate").value,i=document.getElementById("tTaskPrio").value;if(e&&o){console.log("hereiam");const c=t.newTask(e,n,o,i,t.title);return p(),c}return d(),p(),void(m.style.animation="projectSlideDown 1.5s forwards")}(t);n&&u(n),p()}))}(t)}var c};function g(t){let e=0;for(let n=0;n<C.length;n++)if(e=n,C[n].title==t)return C[n]}const y=E(".projectSection");function v(t){const e=E(".sidebarProject");let n=document.createElement("span");n.textContent=t,n.classList.add("projectNameSidebar"),e.appendChild(n)}function w(t){j();const e=document.createElement("div"),n=document.createElement("ul");n.classList.add("todoUL");const s=document.createElement("input");s.type="checkbox",s.classList.add("projectCheckbox");const r=document.createElement("span");if(t.title.length>30){let e=t.title.slice(0,31);r.textContent=e+"..."}else r.textContent=t.title;r.classList.add("projectNameMain");const l=document.createElement("div"),d=document.createElement("div"),a=document.createElement("div"),m=document.createElement("div"),p=new Image;p.src=i,p.classList.add("projAdd");const h=new Image;h.src=c,h.classList.add("projEdit");const g=new Image;g.src=o,g.classList.add("projRemove"),d.appendChild(p),a.appendChild(h),m.appendChild(g),l.appendChild(d),l.appendChild(a),l.appendChild(m),l.classList.add("projectOptions"),e.appendChild(s),e.appendChild(r),e.appendChild(l),e.classList.add("project"),y.appendChild(e),y.appendChild(n),function(t){const e=0;for(;t.toDoList;)u(t.toDoList[e]),e++}(t),document.addEventListener("click",f),console.log("this console log is after the projectElisteners it looks like its working??")}function j(){for(document.removeEventListener("click",f);y.firstChild;)y.removeChild(y.firstChild)}let C=[];function E(t){return document.querySelector(t)}!function(){const t=document.querySelector(".menuContainer"),c=document.querySelector(".mainLogo"),s=document.querySelector(".menuClose"),r=document.querySelector(".createProj"),l=new Image;l.src=e,l.classList.add("main-menu-logo");const d=new Image;d.src=n,d.classList.add("main-logo");const a=new Image;a.src=o,a.classList.add("menuClose");const u=new Image;u.src=i,u.classList.add("addProjButton"),t.appendChild(l),c.appendChild(d),s.appendChild(a),r.appendChild(u);const m=document.querySelector(".sidebar-menu"),p=document.querySelector(".newProjectOverlay");t.addEventListener("click",(function(){m.style.animation="menuSlideOn 1.5s forwards"})),s.addEventListener("click",(function(){m.style.animation="menuSlideClose 1.5s forwards"})),r.addEventListener("click",(function(){m.style.animation="menuSlideClose 1.5s forwards",p.style.animation="projectSlideDown 1.5s forwards"})),m.addEventListener("click",(t=>{"SPAN"===t.target.tagName&&(console.log("the following is e.target.value"),console.log(t.target.textContent),w(g(t.target.textContent)))}))}(),function(){const t=document.querySelector(".closeButton"),e=document.querySelector(".submitButton");t.addEventListener("click",(function(){l.style.animation="projectSlideUp 1.5s forwards",a()})),e.addEventListener("click",(function(){l.style.animation="projectSlideUp 1.5s forwards";const t=function(){const t=document.getElementById("title").value;let e=document.getElementById("description").value;if(t){const n=new r(t,e);return C.push(n),n}return d(),a(),void(l.style.animation="projectSlideDown 1.5s forwards")}();if(t){v(t.title),w(t);for(let t=0;t<C.length;t++)console.log(t+1+" "+C[t].title)}a()}))}(),w({title:"defaultProject",description:"This is a default project. You can also create your own :)"}),v("defaultProject"),C[0]={title:"defaultProject",description:"This is a default project. You can also create your own :)"}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQXFCLENBQUN2RixNQUFPLGlCQUFrQkMsWUFBYSwrREFDNURtRixFQUFvQixrQkFDcEI3QixFQUFRLEdBQUssQ0FBQ3ZELE1BQU8saUJBQWtCQyxZQUFhLDZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2RpbnRvZG9saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL29kaW50b2RvbGlzdC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL29kaW50b2RvbGlzdC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9vZGludG9kb2xpc3QvLi9zcmMvdGFza0NsYXNzLmpzIiwid2VicGFjazovL29kaW50b2RvbGlzdC8uL3NyYy9wcm9qZWN0Q2xhc3MuanMiLCJ3ZWJwYWNrOi8vb2RpbnRvZG9saXN0Ly4vc3JjL3Byb2plY3RGb3JtLmpzIiwid2VicGFjazovL29kaW50b2RvbGlzdC8uL3NyYy90YXNrRE9NLmpzIiwid2VicGFjazovL29kaW50b2RvbGlzdC8uL3NyYy90YXNrRm9ybS5qcyIsIndlYnBhY2s6Ly9vZGludG9kb2xpc3QvLi9zcmMvcHJvamVjdEV2ZW50TGlzdGVuZXJzLmpzIiwid2VicGFjazovL29kaW50b2RvbGlzdC8uL3NyYy9wcm9qZWN0RE9NLmpzIiwid2VicGFjazovL29kaW50b2RvbGlzdC8uL3NyYy9tZW51RXZlbnRMaXN0ZW5lcnMuanMiLCJ3ZWJwYWNrOi8vb2RpbnRvZG9saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgIXNjcmlwdFVybCkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsImV4cG9ydCBjbGFzcyBUYXNre1xuICAgIGNvbnN0cnVjdG9yKHRUaXRsZSwgdERlc2MsIHREdWUsIHRQcmlvLCB0UHJvail7XG4gICAgICAgIHRoaXMudFRpdGxlID0gdFRpdGxlO1xuICAgICAgICB0aGlzLnREZXNjID0gdERlc2M7XG4gICAgICAgIHRoaXMudER1ZSA9IHREdWU7XG4gICAgICAgIHRoaXMudFByaW8gPSB0UHJpbztcbiAgICAgICAgdGhpcy50UHJvaiA9IHRQcm9qO1xuICAgIH1cbiAgICBzZXQgdFRpdGxlKG5ld3RUaXRsZSl7XG4gICAgICAgIHRoaXMuX3RUaXRsZSA9IG5ld3RUaXRsZTtcbiAgICB9XG4gICAgc2V0IHREZXNjKG5ld3REZXNjKXtcbiAgICAgICAgdGhpcy5fdERlc2MgPSBuZXd0RGVzYztcbiAgICB9XG4gICAgc2V0IHREdWUobmV3dER1ZSl7XG4gICAgICAgIHRoaXMuX3REdWUgPSBuZXd0RHVlO1xuICAgIH1cbiAgICBzZXQgdFByaW8obmV3dFByaW8pe1xuICAgICAgICB0aGlzLl90UHJpbyA9IG5ld3RQcmlvO1xuICAgIH1cbiAgICBzZXQgdFByb2oobmV3dFByb2ope1xuICAgICAgICB0aGlzLl90UHJvaiA9IG5ld3RQcm9qO1xuICAgIH1cblxuICAgIGdldCB0VGl0bGUoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RUaXRsZTtcbiAgICB9XG4gICAgZ2V0IHREZXNjKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl90RGVzYztcbiAgICB9XG4gICAgZ2V0IHREdWUoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3REdWU7XG4gICAgfVxuICAgIGdldCB0UHJpbygpe1xuICAgICAgICByZXR1cm4gdGhpcy5fdFByaW87XG4gICAgfVxuICAgIGdldCB0UHJvaigpe1xuICAgICAgICByZXR1cm4gdGhpcy5fdFByb2o7XG4gICAgfVxufSIsImltcG9ydCB7IFRhc2sgfSBmcm9tIFwiLi90YXNrQ2xhc3NcIjtcblxuZXhwb3J0IGNsYXNzIFByb2plY3R7XG4gICAgY29uc3RydWN0b3IodGl0bGUsIGRlc2NyaXB0aW9uKXtcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMudG9Eb3MgPSBbXTtcbiAgICB9XG4gICAgbmV3VGFzayhUdGl0bGUsIFRkZXNjLCBUZHVlLCBUcHJpbywgVHByb2ope1xuICAgICAgICBsZXQgdCA9IG5ldyBUYXNrKFR0aXRsZSwgVGRlc2MsIFRkdWUsIFRwcmlvLCBUcHJvaik7XG4gICAgICAgIHRoaXMudG9Eb3MucHVzaCh0KTsvL3BsYWNlZCB1bmRlcnNjb3JlXG4gICAgICAgIHJldHVybiB0O1xuICAgIH1cblxuICAgIGdldCBudW1PZlRhc2tzKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl90b0Rvcy5sZW5ndGg7Ly9wbGFjZWQgdW5kZXJzY29yZVxuICAgIH1cblxuICAgIGdldCB0aXRsZSgpe1xuICAgICAgICByZXR1cm4gdGhpcy5fdGl0bGU7XG4gICAgfVxuICAgIGdldCBkZXNjcmlwdGlvbigpe1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRpb247XG4gICAgfVxuICAgIGdldCB0b0RvTGlzdCgpey8vZ2V0IGFycmF5IHRoZW4gcHVzaCBhIHRvRG9cbiAgICAgICAgcmV0dXJuIHRoaXMuX3RvRG9zO1xuICAgIH1cblxuICAgIHNldCB0aXRsZShuZXdUaXRsZSl7XG4gICAgICAgIHRoaXMuX3RpdGxlID0gbmV3VGl0bGU7XG4gICAgfVxuICAgIHNldCBkZXNjcmlwdGlvbihuZXdEZXNjKXtcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb24gPSBuZXdEZXNjO1xuICAgIH1cblxufSIsImltcG9ydCB7IFByb2plY3QgfSBmcm9tIFwiLi9wcm9qZWN0Q2xhc3NcIjtcbmltcG9ydCB7IHByb2pBcnIgfSBmcm9tIFwiLi9tZW51RXZlbnRMaXN0ZW5lcnNcIjtcbmltcG9ydCB7IGFkZFByb2plY3RUb1NpZGViYXIgfSBmcm9tIFwiLi9wcm9qZWN0RE9NXCI7XG5pbXBvcnQgeyBkaXNwbGF5UHJvamVjdEluTWFpbiB9IGZyb20gXCIuL3Byb2plY3RET01cIjtcbi8vaW1wb3J0IHsgcHJvamVjdEVMaXN0ZW5lcnMgfSBmcm9tIFwiLi9wcm9qZWN0RXZlbnRMaXN0ZW5lcnNcIjtcbmltcG9ydCB7IF90ZXN0ZXJpbmcgfSBmcm9tIFwiLi9wcm9qZWN0RXZlbnRMaXN0ZW5lcnNcIjtcblxuY29uc3QgcHJvak92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5ld1Byb2plY3RPdmVybGF5XCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJvamVjdE92ZXJsYXlTdHVmZigpe1xuICAgIC8vY29uc3QgcHJvak92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5ld1Byb2plY3RPdmVybGF5XCIpO1xuXG4gICAgLy9idXR0b25zXG4gICAgY29uc3QgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNsb3NlQnV0dG9uXCIpO1xuICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3VibWl0QnV0dG9uXCIpO1xuXG4gICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICBwcm9qT3ZlcmxheS5zdHlsZS5hbmltYXRpb24gPSAncHJvamVjdFNsaWRlVXAgMS41cyBmb3J3YXJkcyc7XG4gICAgICAgIHByb2plY3RGb3JtQ2xlYXIoKTtcbiAgICB9KVxuICAgIHN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJzdWJtaXQgYnV0dG9uIGNsaWNrZWRcIik7XG4gICAgICAgIHByb2pPdmVybGF5LnN0eWxlLmFuaW1hdGlvbiA9ICdwcm9qZWN0U2xpZGVVcCAxLjVzIGZvcndhcmRzJztcbiAgICAgICAgY29uc3QgcHJvamVjdFBhcmFtID0gZXh0cmFjdERhdGFGb3JQcm9qZWN0KCk7XG4gICAgICAgIC8vY3JlYXRlUHJvamVjdERPTShwcm9qZWN0UGFyYW0pOy8vdGhpcyB3aWxsIGJlIGluIHByb2plY3RET00uanMgZmlsZVxuICAgICAgICBpZihwcm9qZWN0UGFyYW0pe1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInByb2plY3Qgb2JqIHJldHVybmVkIHN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgICAgICAgIGFkZFByb2plY3RUb1NpZGViYXIocHJvamVjdFBhcmFtLnRpdGxlKS8vdGhpcyB3aWxsIGJlIGluIHByb2plY3RET00uanMgZmlsZVxuICAgICAgICAgICAgZGlzcGxheVByb2plY3RJbk1haW4ocHJvamVjdFBhcmFtKTtcbiAgICAgICAgICAgIC8vcHJvamVjdEVMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIGZvcihsZXQgYSA9IDA7IGEgPCBwcm9qQXJyLmxlbmd0aDsgYSsrKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygoYSsxKSsgXCIgXCIrIHByb2pBcnJbYV0udGl0bGUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJvamVjdEZvcm1DbGVhcigpO1xuICAgIH0pXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3REYXRhRm9yUHJvamVjdCgpe1xuICAgIGNvbnN0IHRpdGxlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRpdGxlXCIpLnZhbHVlXG4gICAgbGV0IGRlc2NJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGVzY3JpcHRpb25cIikudmFsdWU7XG5cbiAgICBpZih0aXRsZUlucHV0KXtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImRldGVjdGVkIHRpdGxlXCIpOy8vZGVidWdnaW5nXG4gICAgICAgIGNvbnN0IHByb2plY3RNYWRlID0gbmV3IFByb2plY3QodGl0bGVJbnB1dCwgZGVzY0lucHV0KTtcbiAgICAgICAgcHJvakFyci5wdXNoKHByb2plY3RNYWRlKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhwcm9qQXJyWyhwcm9qQXJyLmxlbmd0aCktMV0udGl0bGUpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKHByb2pBcnJbKHByb2pBcnIubGVuZ3RoKS0xXS5kZXNjcmlwdGlvbik7XG4gICAgICAgIHJldHVybiBwcm9qZWN0TWFkZTtcbiAgICB9ZWxzZXtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIk5lZWQgYSB0aXRsZSB0byBjcmVhdGUgYSBwcm9qZWN0IVwiKTsvL2RlYnVnZ2luZ1xuICAgICAgICBkaXNwbGF5TmVlZFRpdGxlKCk7Ly8gQ0FOIElOU0VSVCBET00gTUFOSVBVTEFUSU9OIFRPIFNISUZUIERPV04gVEhFIEVSUk9SIE9WRVJMQVkgOilcbiAgICAgICAgcHJvamVjdEZvcm1DbGVhcigpO1xuICAgICAgICBwcm9qT3ZlcmxheS5zdHlsZS5hbmltYXRpb24gPSBcInByb2plY3RTbGlkZURvd24gMS41cyBmb3J3YXJkc1wiO1xuICAgICAgICByZXR1cm47XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheU5lZWRUaXRsZSgpe1xuICAgIGNvbnN0IGVycm9yT3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZXJyb3JQcm9qZWN0T3ZlcmxheVwiKTtcbiAgICBlcnJvck92ZXJsYXkuc3R5bGUuYW5pbWF0aW9uID0gXCJwcm9qZWN0U2xpZGVEb3duIDEuNXMgZm9yd2FyZHNcIlxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgZXJyb3JPdmVybGF5LnN0eWxlLmFuaW1hdGlvbiA9IFwicHJvamVjdFNsaWRlVXAgMS41cyBmb3J3YXJkc1wiXG4gICAgfSwgMjUwMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0Rm9ybUNsZWFyKCl7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aXRsZVwiKS52YWx1ZSA9IFwiXCI7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZXNjcmlwdGlvblwiKS52YWx1ZSA9IFwiXCI7XG59IiwiZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlUYXNrSW5NYWluKHRhc2spey8vKHByb2plY3QsIHVsKSBtaWdodCBiZSBuZWVkZWQgYXMgcGFyYW1zIGJ1dCBwcm9icyBub3RcbiAgICBjb25zdCBwcm9qVUwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvZG9VTFwiKTtcblxuICAgIGNvbnN0IHRhc2tMSSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgdGFza0xJLmNsYXNzTGlzdC5hZGQoXCJ0b2RvXCIpO1xuXG4gICAgY29uc3QgdGFza0NoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICB0YXNrQ2hlY2tib3gudHlwZSA9IFwiY2hlY2tib3hcIjtcbiAgICB0YXNrQ2hlY2tib3guY2xhc3NMaXN0LmFkZChcInRvZG9DaGVja1wiKTtcblxuICAgIGNvbnN0IHRhc2tEYXRlSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIHRhc2tEYXRlSW5wdXQudHlwZSA9IFwiZGF0ZVwiO1xuICAgIHRhc2tEYXRlSW5wdXQuY2xhc3NMaXN0LmFkZChcInRvZG9EYXRlXCIpO1xuXG4gICAgdGFza0xJLmFwcGVuZENoaWxkKHRhc2tEYXRlSW5wdXQpO1xuICAgIHRhc2tMSS5hcHBlbmRDaGlsZCh0YXNrQ2hlY2tib3gpO1xuXG4gICAgdGFza0xJLnRleHRDb250ZW50ID0gdGFzay50VGl0bGUgKyBcIiAgXCIgKyB0YXNrLnREdWU7XG5cbiAgICBwcm9qVUwuYXBwZW5kQ2hpbGQodGFza0xJKTtcbn0iLCJpbXBvcnQgeyBkcXMgfSBmcm9tIFwiLi9tZW51RXZlbnRMaXN0ZW5lcnNcIjtcbmltcG9ydCB7IGZpbmRQcm9qZWN0SW5BcnIgfSBmcm9tIFwiLi9wcm9qZWN0RXZlbnRMaXN0ZW5lcnNcIjtcbmltcG9ydCB7IGRpc3BsYXlOZWVkVGl0bGUgfSBmcm9tIFwiLi9wcm9qZWN0Rm9ybVwiO1xuaW1wb3J0IHsgVGFzayB9IGZyb20gXCIuL3Rhc2tDbGFzc1wiO1xuaW1wb3J0IHsgZGlzcGxheVRhc2tJbk1haW4gfSBmcm9tIFwiLi90YXNrRE9NXCI7XG5cbmV4cG9ydCBjb25zdCB0YXNrT3ZlcmxheSA9IGRxcyhcIi5uZXdUYXNrT3ZlcmxheVwiKTtcbi8vY29uc3QgY3VyclByb2ogPSB7fTsvL01JR0hUIEJFIE9LIFRPIFBMQUNFIFdJVEhJTiBleHRyYWN0RGF0YUZvclRhc2sgZnVuY1xuXG5leHBvcnQgZnVuY3Rpb24gdGFza092ZXJsYXlMaXN0ZW5lcnMocHJvamVjdCl7XG4gICAgY29uc3QgdGFza0Nsb3NlID0gZHFzKFwiLnRhc2tDbG9zZUJ1dHRvblwiKTtcbiAgICBjb25zdCB0YXNrU3VibWl0ID0gZHFzKFwiLnRhc2tTdWJtaXRCdXR0b25cIik7XG5cbiAgICB0YXNrQ2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICB0YXNrRm9ybUNsZWFyKCk7XG4gICAgICAgIHRhc2tPdmVybGF5LnN0eWxlLmFuaW1hdGlvbiA9IFwicHJvamVjdFNsaWRlVXAgMS41cyBmb3J3YXJkc1wiXG4gICAgfSk7XG4gICAgdGFza1N1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGFza092ZXJsYXkuc3R5bGUuYW5pbWF0aW9uID0gXCJwcm9qZWN0U2xpZGVVcCAxLjVzIGZvcndhcmRzXCJcbiAgICAgICAgY29uc3QgbWFkZVRhc2sgPSBleHRyYWN0RGF0YUZvclRhc2socHJvamVjdCk7XG4gICAgICAgIGlmKG1hZGVUYXNrKXtcbiAgICAgICAgICAgIGRpc3BsYXlUYXNrSW5NYWluKG1hZGVUYXNrKTsvL2N1cnJlbnQgcHJvamVjdCBpcyBhbHJlYWR5IGRldGVjdGVkIGluIGV4dHJhY3REYXRhRm9yVGFzayBmdW5jLi5tYXkgbm90IG5lZWQgcHJvaiBhbmQgdWwgYXMgcGFyYW1zXG4gICAgICAgICAgICAvLyBmb3IobGV0IGEgPSAwOyBhIDwgY3VyclByb2oudG9Eb0xpc3QubGVuZ3RoOyBhKyspeyAgIFRSWSBUTyBESVNQTEFZIEFMTCBUQVNLU1xuICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKChhKzEpKyBcIiBcIisgY3VyclByb2oudG9Eb0xpc3RbYV0udGl0bGUpO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9XG4gICAgICAgIHRhc2tGb3JtQ2xlYXIoKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3REYXRhRm9yVGFzayhwcm9qKXtcbiAgICBjb25zdCB0YXNrVGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRUaXRsZVwiKS52YWx1ZTtcbiAgICBjb25zdCB0YXNrRGVzYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidERlc2NyaXB0aW9uXCIpLnZhbHVlO1xuICAgIGNvbnN0IHRhc2tEdWVEYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0RHVlRGF0ZVwiKS52YWx1ZTtcbiAgICBjb25zdCB0YXNrUHJpbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidFRhc2tQcmlvXCIpLnZhbHVlO1xuICAgIC8vY29uc3QgdGFza1Byb2ogPSBkcXMoXCIucHJvamVjdE5hbWVNYWluXCIpOy8vU0hPVUxEIE5PVCBCRSBORUVERUQgR0lWRU4gUEFSQU1cblxuICAgIGlmKHRhc2tUaXRsZSAmJiB0YXNrRHVlRGF0ZSl7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiaGVyZWlhbVwiKTtcbiAgICAgICAgY29uc3QgdGFza01hZGUgPSBwcm9qLm5ld1Rhc2sodGFza1RpdGxlLCB0YXNrRGVzYywgdGFza0R1ZURhdGUsIHRhc2tQcmlvLCBwcm9qLnRpdGxlKTtcbiAgICAgICAgLy9jb25zdCB0YXNrTWFkZSA9IG5ldyBUYXNrKHRhc2tUaXRsZSwgdGFza0Rlc2MsIHRhc2tEdWVEYXRlLCB0YXNrUHJpbywgcHJvai50aXRsZSk7Ly90YXNrUHJvaiBhcyBsYXN0IHBhcmFtXG4gICAgICAgIC8vY29uc3QgY3VyclByb2ogPSBmaW5kUHJvamVjdEluQXJyKHRhc2tQcm9qKTtcbiAgICAgICAgLy9wcm9qZWN0LnRvRG9MaXN0LnB1c2godGFza01hZGUpOy8vY3VyclByb2oudG9Eb0xpc3QucHVzaCh0YXNrTWFkZSk7IEVSUk9SIElTIEhBUFBFTklORyBIRVJFIE5FRUQgVE8gRklORCBBIFdBWSBUTyBBQ0NFUyBUSEUgQVJSQVkgQU5EIFBVU0ggSU5UTyBJVFxuICAgICAgICB0YXNrRm9ybUNsZWFyKCk7XG4gICAgICAgIHJldHVybiB0YXNrTWFkZTtcbiAgICB9ZWxzZXtcbiAgICAgICAgZGlzcGxheU5lZWRUaXRsZSgpO1xuICAgICAgICB0YXNrRm9ybUNsZWFyKCk7XG4gICAgICAgIHRhc2tPdmVybGF5LnN0eWxlLmFuaW1hdGlvbiA9IFwicHJvamVjdFNsaWRlRG93biAxLjVzIGZvcndhcmRzXCI7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YXNrRm9ybUNsZWFyKCl7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0VGl0bGVcIikudmFsdWUgPSBcIlwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidERlc2NyaXB0aW9uXCIpLnZhbHVlID0gXCJcIjtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInREdWVEYXRlXCIpLnZhbHVlID0gXCJcIjtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRUYXNrUHJpb1wiKS52YWx1ZSA9IFwiU2VsZWN0IE9uZVwiO1xufSIsImltcG9ydCB7IGRxcyB9IGZyb20gXCIuL21lbnVFdmVudExpc3RlbmVyc1wiO1xuaW1wb3J0IHsgcHJvakFyciB9IGZyb20gXCIuL21lbnVFdmVudExpc3RlbmVyc1wiO1xuaW1wb3J0IHsgY2xlYXJNYWluIH0gZnJvbSBcIi4vcHJvamVjdERPTVwiO1xuaW1wb3J0IHsgdGFza092ZXJsYXksIHRhc2tPdmVybGF5TGlzdGVuZXJzIH0gZnJvbSBcIi4vdGFza0Zvcm1cIjtcbi8vaW1wb3J0IHsgcHJvak92ZXJsYXkgfSBmcm9tIFwiLi9tZW51RXZlbnRMaXN0ZW5lcnNcIjtcblxuLy9jb25zdCBwcm9qVGFza0FkZCA9IGRxcyhcIi5wcm9qQWRkXCIpO1xuLy9jb25zdCBwcm9qUmVtQnV0dG9uID0gZHFzKFwiLnByb2pSZW1vdmVcIik7XG5jb25zdCBwcm9qT3ZlcmxheTEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5ld1Byb2plY3RPdmVybGF5XCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJvamVjdEVMaXN0ZW5lcnMoKXtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF90ZXN0ZXJpbmcpXG59O1xuXG5leHBvcnQgdmFyIF90ZXN0ZXJpbmcgPSBmdW5jdGlvbihlKXtcbiAgICAvL2dvIHRocm91aGcgYXJyYXkgY29tcGFyaW5nIHRpdGxlXG4gICAgICAgIC8vd2hlbiBmb3VuZCBmaWxsIHByb2plY3RGb3JtIGFuZCBkcm9wIGZvcm0gZG93biBmb3IgdXNlclxuICAgICAgICAvL2lmIHN1Ym1pdCB0aGVuIHJlcGxhY2UgaW5mbyB3aXRoIG5ldyBpbmZvXG4gICAgICAgIC8vZWxzZSBpZiBjYW5jZWwgdGhlbiBsZWF2ZSBwcm9qZWN0IGFzIGl0IHdhc1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiaW4gcHJvakVkaXRCdXR0b24gZXZlbnRMaXN0ZW5lclwiKTtcbiAgICAgICAgY29uc3QgZWRpdEJ1dHRvbiA9IGUudGFyZ2V0Lm1hdGNoZXMoXCIucHJvakVkaXRcIik7XG4gICAgICAgIGNvbnN0IHJlbW92ZUJ1dHRvbiA9IGUudGFyZ2V0Lm1hdGNoZXMoXCIucHJvalJlbW92ZVwiKTtcbiAgICAgICAgY29uc3QgYWRkVGFza0J1dHRvbiA9IGUudGFyZ2V0Lm1hdGNoZXMoXCIucHJvakFkZFwiKTtcbiAgICAgICAgY29uc3QgY3VyclRpdGxlID0gZHFzKFwiLnByb2plY3ROYW1lTWFpblwiKTtcbiAgICAgICAgaWYoZWRpdEJ1dHRvbil7Ly90aGlzIHdpbGwgYmUgZG9uZSBvbmNlICdyZW1vdmUnIGlzIGNvbXBsZXRlZFxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJlZGl0QnV0dG9uIGNsaWNrZWRcIik7XG4gICAgICAgICAgICBlZGl0Rm9ybShjdXJyVGl0bGUudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgLy9jb25zdCBmb3VuZFByb2ogPSBmaW5kUHJvamVjdEluQXJyKGN1cnJUaXRsZSk7Ly90aGlzIHdpbGwgYmUgbGVmdCB0aWxsIHRoZSBlbmRcbiAgICAgICAgICAgIGZvcihsZXQgYSA9IDA7IGEgPCBwcm9qQXJyLmxlbmd0aDsgYSsrKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygoYSsxKSsgXCIgXCIrIHByb2pBcnJbYV0udGl0bGUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1lbHNlIGlmKHJlbW92ZUJ1dHRvbil7XG4gICAgICAgICAgICAvL2NvbnN0IGN1cnJUaXRsZSA9IGRxcyhcIi5wcm9qZWN0TmFtZU1haW5cIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlbW92ZUJ1dHRvbiBjbGlja2VkXCIpO1xuICAgICAgICAgICAgcmVtb3ZlUHJvamVjdFNpZGUoY3VyclRpdGxlLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgIHJlbW92ZVByb2pBcnIoY3VyclRpdGxlLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgIGNsZWFyTWFpbigpO1xuICAgICAgICAgICAgLy9jb25zdCBzaWRlQmFyID0gZHFzKFwiLnNpZGViYXItbWVudVwiKTtcbiAgICAgICAgICAgIC8vc2lkZUJhci5zdHlsZS5hbmltYXRpb24gPSAnbWVudVNsaWRlT24gMS41cyBmb3J3YXJkcyc7XG4gICAgICAgICAgICBmb3IobGV0IGEgPSAwOyBhIDwgcHJvakFyci5sZW5ndGg7IGErKyl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coKGErMSkrIFwiIFwiKyBwcm9qQXJyW2FdLnRpdGxlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoYWRkVGFza0J1dHRvbil7XG4gICAgICAgICAgICB0YXNrT3ZlcmxheS5zdHlsZS5hbmltYXRpb24gPSBcInByb2plY3RTbGlkZURvd24gMS41cyBmb3J3YXJkc1wiO1xuICAgICAgICAgICAgY29uc3QgZm91bmRQcm9qID0gZmluZFByb2plY3RJbkFycihjdXJyVGl0bGUudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJmb3VuZFByb2plY3RJbkFycjogXCIgKyBmb3VuZFByb2oudGl0bGUpO1xuICAgICAgICAgICAgdGFza092ZXJsYXlMaXN0ZW5lcnMoZm91bmRQcm9qKTsvL2FkZCBwcm9qIGFzIHBhcmFtIGhlcmUhISEgZmluZCBwcm9qIG9uIGxpbmUgYmVmb3JlIHRoaXNcbiAgICAgICAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVQcm9qZWN0U2lkZShwcm9qTmFtZSl7XG4gICAgY29uc3Qgc2lkZWJhclByb2ogPSBkcXMoXCIuc2lkZWJhclByb2plY3RcIik7XG4gICAgY29uc3Qgc2lkZWJhclByb2pDaGlsZHJlbiA9IHNpZGViYXJQcm9qLmNoaWxkcmVuO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaWRlYmFyUHJvakNoaWxkcmVuLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgaWYoc2lkZWJhclByb2pDaGlsZHJlbltpXS50ZXh0Q29udGVudCA9PSBwcm9qTmFtZSl7XG4gICAgICAgICAgICBzaWRlYmFyUHJvai5yZW1vdmVDaGlsZChzaWRlYmFyUHJvakNoaWxkcmVuW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlUHJvakFycihwcm9qTmFtZSl7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHByb2pBcnIubGVuZ3RoOyBpKyspe1xuICAgICAgICBpZihwcm9qQXJyW2ldLnRpdGxlID09IHByb2pOYW1lKXtcbiAgICAgICAgICAgIHByb2pBcnIuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBlZGl0Rm9ybShwcm9qZWN0VGl0bGUpe1xuICAgIHByb2pPdmVybGF5MS5zdHlsZS5hbmltYXRpb24gPSAncHJvamVjdFNsaWRlRG93biAxLjVzIGZvcndhcmRzJztcbiAgICBjb25zdCB0aXRsZUluID0gZHFzKFwiI3RpdGxlXCIpO1xuICAgIHRpdGxlSW4udmFsdWUgPSBwcm9qZWN0VGl0bGU7XG5cbiAgICAvL2FkZCBldmVudExpc3RlbmVyIGZvciBzdWJtaXQgYW5kIGNhbmNlbCBidXR0b25zIG9uIHByb2plY3QgZm9ybVxuICAgIC8vaG9wZWZ1bGx5IHRoZXkgd2lsbCBkbyBzb21ldGhpbmcgZGlmZmVyZW50Pz8/XG59XG5leHBvcnQgZnVuY3Rpb24gZmluZFByb2plY3RJbkFycih0aXRsZSl7Ly9NSUdIVCBOT1QgTkVFRCBUSElTIE1JR0hUIE5PVCBORUVEIFRISVMgTUlHSFQgTk9UIE5FRUQgVEhJU1xuICAgIC8vY29uc29sZS5sb2coXCJsb29raW5nIGZvciBwcm9qZWN0IGluIGFyclwiKVxuICAgIGxldCBpbmRleCA9IDA7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHByb2pBcnIubGVuZ3RoOyBpKyspe1xuICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgIGlmKHByb2pBcnJbaV0udGl0bGUgPT0gdGl0bGUpe1xuICAgICAgICAgICAgcmV0dXJuIHByb2pBcnJbaV07XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IFJlbW92ZSBmcm9tICcuLi9zcmMvaW1ncy9jbG9zZS5wbmcnO1xuaW1wb3J0IENyZWF0ZSBmcm9tICcuLi9zcmMvaW1ncy9hZGQucG5nJztcbmltcG9ydCBFZGl0IGZyb20gJy4uL3NyYy9pbWdzL2VkaXQucG5nJztcbmltcG9ydCB7IGRxcyB9IGZyb20gJy4vbWVudUV2ZW50TGlzdGVuZXJzJztcbmltcG9ydCB7IHByb2plY3RFTGlzdGVuZXJzIH0gZnJvbSAnLi9wcm9qZWN0RXZlbnRMaXN0ZW5lcnMnO1xuaW1wb3J0IHsgX3Rlc3RlcmluZyB9IGZyb20gJy4vcHJvamVjdEV2ZW50TGlzdGVuZXJzJztcbmltcG9ydCB7IGRpc3BsYXlUYXNrSW5NYWluIH0gZnJvbSAnLi90YXNrRE9NJztcblxuY29uc3QgbWFpblNlYyA9IGRxcyhcIi5wcm9qZWN0U2VjdGlvblwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFByb2plY3RUb1NpZGViYXIocHJvamVjdFRpdGxlKXtcbiAgICBjb25zdCBwcm9qU2lkZSA9IGRxcyhcIi5zaWRlYmFyUHJvamVjdFwiKTtcbiAgICBsZXQgcHJvalRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHByb2pUaXRsZS50ZXh0Q29udGVudCA9IHByb2plY3RUaXRsZTtcbiAgICBwcm9qVGl0bGUuY2xhc3NMaXN0LmFkZCgncHJvamVjdE5hbWVTaWRlYmFyJyk7XG4gICAgcHJvalNpZGUuYXBwZW5kQ2hpbGQocHJvalRpdGxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlQcm9qZWN0SW5NYWluKHByb2plY3Qpe1xuICAgIGNsZWFyTWFpbigpO1xuICAgIGNvbnN0IHByb2pEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGNvbnN0IHRhc2tTZWNVTCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgdGFza1NlY1VMLmNsYXNzTGlzdC5hZGQoXCJ0b2RvVUxcIilcbiAgICBcbiAgICBjb25zdCBwcm9qQ2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIHByb2pDaGVja2JveC50eXBlID0gXCJjaGVja2JveFwiO1xuICAgIHByb2pDaGVja2JveC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdENoZWNrYm94XCIpO1xuXG4gICAgXG4gICAgY29uc3QgcHJvak5hbWVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIGlmKHByb2plY3QudGl0bGUubGVuZ3RoID4gMzApe1xuICAgICAgICBsZXQgbWFpbk1vZFByb2pUaXRsZSA9IHByb2plY3QudGl0bGUuc2xpY2UoMCwzMSk7XG4gICAgICAgIHByb2pOYW1lU3Bhbi50ZXh0Q29udGVudCA9IG1haW5Nb2RQcm9qVGl0bGUgKyBcIi4uLlwiO1xuICAgIH1lbHNle1xuICAgICAgICBwcm9qTmFtZVNwYW4udGV4dENvbnRlbnQgPSBwcm9qZWN0LnRpdGxlO1xuICAgIH1cbiAgICBwcm9qTmFtZVNwYW4uY2xhc3NMaXN0LmFkZChcInByb2plY3ROYW1lTWFpblwiKTtcblxuICAgIFxuICAgIGNvbnN0IGJ1dHRvbkNvbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBcbiAgICBjb25zdCBhZGREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCBlZGl0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3QgcmVtb3ZlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICBjb25zdCBhZGRJY29uID0gbmV3IEltYWdlKCk7XG4gICAgYWRkSWNvbi5zcmMgPSBDcmVhdGU7XG4gICAgYWRkSWNvbi5jbGFzc0xpc3QuYWRkKCdwcm9qQWRkJyk7XG5cbiAgICBjb25zdCBlZGl0SWNvbiA9IG5ldyBJbWFnZSgpO1xuICAgIGVkaXRJY29uLnNyYyA9IEVkaXQ7XG4gICAgZWRpdEljb24uY2xhc3NMaXN0LmFkZCgncHJvakVkaXQnKTtcblxuICAgIGNvbnN0IHJlbUljb24gPSBuZXcgSW1hZ2UoKTtcbiAgICByZW1JY29uLnNyYyA9IFJlbW92ZTtcbiAgICByZW1JY29uLmNsYXNzTGlzdC5hZGQoJ3Byb2pSZW1vdmUnKTtcblxuICAgIGFkZERpdi5hcHBlbmRDaGlsZChhZGRJY29uKTtcbiAgICBlZGl0RGl2LmFwcGVuZENoaWxkKGVkaXRJY29uKTtcbiAgICByZW1vdmVEaXYuYXBwZW5kQ2hpbGQocmVtSWNvbik7XG4gICAgXG4gICAgYnV0dG9uQ29udC5hcHBlbmRDaGlsZChhZGREaXYpO1xuICAgIGJ1dHRvbkNvbnQuYXBwZW5kQ2hpbGQoZWRpdERpdik7XG4gICAgYnV0dG9uQ29udC5hcHBlbmRDaGlsZChyZW1vdmVEaXYpO1xuICAgIGJ1dHRvbkNvbnQuY2xhc3NMaXN0LmFkZChcInByb2plY3RPcHRpb25zXCIpO1xuXG4gICAgcHJvakRpdi5hcHBlbmRDaGlsZChwcm9qQ2hlY2tib3gpO1xuICAgIHByb2pEaXYuYXBwZW5kQ2hpbGQocHJvak5hbWVTcGFuKTtcbiAgICBwcm9qRGl2LmFwcGVuZENoaWxkKGJ1dHRvbkNvbnQpO1xuICAgIHByb2pEaXYuY2xhc3NMaXN0LmFkZChcInByb2plY3RcIik7XG5cbiAgICBtYWluU2VjLmFwcGVuZENoaWxkKHByb2pEaXYpO1xuICAgIG1haW5TZWMuYXBwZW5kQ2hpbGQodGFza1NlY1VMKTtcbiAgICBcbiAgICAvL2NoZWNrIGZvciB0YXNrcyB3aXRoIGEgbG9vcCBhbmQgZGlzcGxheSBlYWNoXG4gICAgY2hlY2tGb3JUYXNrcyhwcm9qZWN0KTtcblxuICAgIC8vY2FsbCBldmVudExpc3RlbmVyIGhlcmVcbiAgICBwcm9qZWN0RUxpc3RlbmVycygpOy8vV0lMTCBIQVZFIFRPIEFERCBFVkVOVCBMSVNURU5FUlMgRk9SIFRBU0tTIEhFUkU/Pz9cbiAgICBjb25zb2xlLmxvZyhcInRoaXMgY29uc29sZSBsb2cgaXMgYWZ0ZXIgdGhlIHByb2plY3RFbGlzdGVuZXJzIGl0IGxvb2tzIGxpa2UgaXRzIHdvcmtpbmc/P1wiKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JUYXNrcyhwcm9qKXtcbiAgICAvL2dpdmVuIHByb2ogYXMgcGFyYW0gd2Ugd2lsbCBjaGVjayBpZiBpdCBjb250YWlucyBhbnkgdGFza3MgdGhhdCBuZWVkIHRvIGJlIGNyZWF0ZWRcbiAgICBjb25zdCBpID0gMDtcbiAgICB3aGlsZShwcm9qLnRvRG9MaXN0KXtcbiAgICAgICAgZGlzcGxheVRhc2tJbk1haW4ocHJvai50b0RvTGlzdFtpXSk7XG4gICAgICAgIGkrKztcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhck1haW4oKXtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIF90ZXN0ZXJpbmcpO1xuICAgIHdoaWxlKG1haW5TZWMuZmlyc3RDaGlsZCl7XG4gICAgICAgIG1haW5TZWMucmVtb3ZlQ2hpbGQobWFpblNlYy5maXJzdENoaWxkKVxuICAgIH1cbn0iLCJpbXBvcnQgTWVudSBmcm9tICcuLi9zcmMvaW1ncy9tZW51LnBuZydcbmltcG9ydCBCcmFuZCBmcm9tICcuLi9zcmMvaW1ncy9Xb3JrZXJBbnRzTW9kLnBuZyc7XG5pbXBvcnQgQ2xvc2UgZnJvbSAnLi4vc3JjL2ltZ3MvY2xvc2UucG5nJztcbmltcG9ydCBDcmVhdGUgZnJvbSAnLi4vc3JjL2ltZ3MvYWRkLnBuZyc7XG5pbXBvcnQgeyBkaXNwbGF5UHJvamVjdEluTWFpbiB9IGZyb20gJy4vcHJvamVjdERPTSc7XG5pbXBvcnQgeyBmaW5kUHJvamVjdEluQXJyIH0gZnJvbSAnLi9wcm9qZWN0RXZlbnRMaXN0ZW5lcnMnO1xuLy9JIE5FRUQgVE8gQUREIEEgR0xPQkFMIFZBUklBQkxFIEFSUkFZIFRIQVQgU1RPUkVTIEFMTCBUSEUgUFJPSkVDVFMgSEVSRVxuZXhwb3J0IGxldCBwcm9qQXJyID0gW107XG5cbmV4cG9ydCBmdW5jdGlvbiBkcXMoYyl7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZW51RXZlbnRMaXN0ZW4oKXtcbiAgICBjb25zdCBtZW51Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tZW51Q29udGFpbmVyXCIpO1xuICAgIGNvbnN0IG1haW5Mb2dvQ29udCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWFpbkxvZ29cIik7XG4gICAgY29uc3QgY2xvc2VDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1lbnVDbG9zZVwiKTtcbiAgICBjb25zdCBjcmVhdGVQcm9qQ29udCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY3JlYXRlUHJvalwiKTtcbiAgICBcbiAgICBjb25zdCBtZW51SWNvbiA9IG5ldyBJbWFnZSgpO1xuICAgIG1lbnVJY29uLnNyYyA9IE1lbnU7XG4gICAgbWVudUljb24uY2xhc3NMaXN0LmFkZCgnbWFpbi1tZW51LWxvZ28nKTtcblxuICAgIGNvbnN0IG1haW5Mb2dvSW1nID0gbmV3IEltYWdlKCk7XG4gICAgbWFpbkxvZ29JbWcuc3JjID0gQnJhbmQ7XG4gICAgbWFpbkxvZ29JbWcuY2xhc3NMaXN0LmFkZCgnbWFpbi1sb2dvJyk7XG5cbiAgICBjb25zdCBjbG9zZUljb24gPSBuZXcgSW1hZ2UoKTtcbiAgICBjbG9zZUljb24uc3JjID0gQ2xvc2U7XG4gICAgY2xvc2VJY29uLmNsYXNzTGlzdC5hZGQoJ21lbnVDbG9zZScpO1xuXG4gICAgY29uc3QgY3JlYXRlUHJvakljb24gPSBuZXcgSW1hZ2UoKTtcbiAgICBjcmVhdGVQcm9qSWNvbi5zcmMgPSBDcmVhdGU7XG4gICAgY3JlYXRlUHJvakljb24uY2xhc3NMaXN0LmFkZCgnYWRkUHJvakJ1dHRvbicpO1xuXG4gICAgbWVudUNvbnRhaW5lci5hcHBlbmRDaGlsZChtZW51SWNvbik7XG4gICAgbWFpbkxvZ29Db250LmFwcGVuZENoaWxkKG1haW5Mb2dvSW1nKTtcbiAgICBjbG9zZUNvbnRhaW5lci5hcHBlbmRDaGlsZChjbG9zZUljb24pO1xuICAgIGNyZWF0ZVByb2pDb250LmFwcGVuZENoaWxkKGNyZWF0ZVByb2pJY29uKTtcblxuICAgIGNvbnN0IHNpZGVCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNpZGViYXItbWVudVwiKTtcbiAgICBjb25zdCBwcm9qT3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmV3UHJvamVjdE92ZXJsYXlcIik7XG5cbiAgICBtZW51Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgc2lkZUJhci5zdHlsZS5hbmltYXRpb24gPSAnbWVudVNsaWRlT24gMS41cyBmb3J3YXJkcyc7XG4gICAgfSk7XG4gICAgY2xvc2VDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICBzaWRlQmFyLnN0eWxlLmFuaW1hdGlvbiA9ICdtZW51U2xpZGVDbG9zZSAxLjVzIGZvcndhcmRzJztcbiAgICB9KTtcbiAgICBjcmVhdGVQcm9qQ29udC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJjcmVhdGUgcHJvamVjdCBidXR0b24gY2xpY2tlZCEhXCIpO1xuICAgICAgICBzaWRlQmFyLnN0eWxlLmFuaW1hdGlvbiA9ICdtZW51U2xpZGVDbG9zZSAxLjVzIGZvcndhcmRzJztcbiAgICAgICAgcHJvak92ZXJsYXkuc3R5bGUuYW5pbWF0aW9uID0gJ3Byb2plY3RTbGlkZURvd24gMS41cyBmb3J3YXJkcyc7XG4gICAgfSk7XG4gICAgc2lkZUJhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgIGlmKGUudGFyZ2V0LnRhZ05hbWUgPT09ICdTUEFOJyl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInRoZSBmb2xsb3dpbmcgaXMgZS50YXJnZXQudmFsdWVcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlLnRhcmdldC50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICBjb25zdCBkaXNwUHJvaiA9IGZpbmRQcm9qZWN0SW5BcnIoZS50YXJnZXQudGV4dENvbnRlbnQpXG4gICAgICAgICAgICBkaXNwbGF5UHJvamVjdEluTWFpbihkaXNwUHJvaik7XG4gICAgICAgICAgICAvL2Rpc3BsYXlUYXNrSW5NYWluKGRpc3BQcm9qKTsvL1RISVMgTUlHSFQgSEFWRSBUTyBCRSBDQUxMRUQgV0lUSElOIERJU1BMQVlQUk9KRUNUSU5NQUlOIFdJVEggVEhFIFBST0pFQ1QgQU5EIFVMIFBBUkFNRVRFUlNcbiAgICAgICAgfVxuICAgIH0pO1xufSIsImltcG9ydCB7IG1lbnVFdmVudExpc3RlbiwgcHJvakFyciB9IGZyb20gXCIuL21lbnVFdmVudExpc3RlbmVyc1wiO1xuaW1wb3J0IHsgYWRkUHJvamVjdFRvU2lkZWJhciwgZGlzcGxheVByb2plY3RJbk1haW4gfSBmcm9tIFwiLi9wcm9qZWN0RE9NXCI7XG5pbXBvcnQgeyBwcm9qZWN0T3ZlcmxheVN0dWZmIH0gZnJvbSBcIi4vcHJvamVjdEZvcm1cIjtcbmltcG9ydCB7IHRhc2tPdmVybGF5TGlzdGVuZXJzIH0gZnJvbSBcIi4vdGFza0Zvcm1cIjtcbi8vaW1wb3J0IHsgcHJvamVjdEVMaXN0ZW5lcnMgfSBmcm9tIFwiLi9wcm9qZWN0RXZlbnRMaXN0ZW5lcnNcIjtcbi8vIGltcG9ydCB7IFByb2plY3QgfSBmcm9tIFwiLi9wcm9qZWN0Q2xhc3NcIjtcbi8vIGltcG9ydCB7IGNyZWF0ZVByb2plY3RGcm9tRGF0YSB9IGZyb20gXCIuL3Byb2plY3RGb3JtXCI7XG5tZW51RXZlbnRMaXN0ZW4oKTtcbnByb2plY3RPdmVybGF5U3R1ZmYoKTtcbmRpc3BsYXlQcm9qZWN0SW5NYWluKHt0aXRsZTogXCJkZWZhdWx0UHJvamVjdFwiLCBkZXNjcmlwdGlvbjogXCJUaGlzIGlzIGEgZGVmYXVsdCBwcm9qZWN0LiBZb3UgY2FuIGFsc28gY3JlYXRlIHlvdXIgb3duIDopXCJ9KTtcbmFkZFByb2plY3RUb1NpZGViYXIoXCJkZWZhdWx0UHJvamVjdFwiKTtcbnByb2pBcnJbMF0gPSB7dGl0bGU6IFwiZGVmYXVsdFByb2plY3RcIiwgZGVzY3JpcHRpb246IFwiVGhpcyBpcyBhIGRlZmF1bHQgcHJvamVjdC4gWW91IGNhbiBhbHNvIGNyZWF0ZSB5b3VyIG93biA6KVwifTtcbi8vdGFza092ZXJsYXlMaXN0ZW5lcnMoKTtcbi8vcHJvamVjdEVMaXN0ZW5lcnMoKTtcbi8vIGxldCBwcm9qMSA9IG5ldyBQcm9qZWN0KFwiY2FybG9zQnJ1aFwiLCBcImFwaXVmXCIpO1xuLy8gY29uc29sZS5sb2cocHJvajEubmFtZSk7XG4vLyBjb25zb2xlLmxvZyhwcm9qMS5kZXNjcmlwdGlvbik7Il0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJnIiwiZ2xvYmFsVGhpcyIsInRoaXMiLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJkb2N1bWVudCIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsZW5ndGgiLCJpIiwiRXJyb3IiLCJyZXBsYWNlIiwicCIsIlRhc2siLCJjb25zdHJ1Y3RvciIsInRUaXRsZSIsInREZXNjIiwidER1ZSIsInRQcmlvIiwidFByb2oiLCJuZXd0VGl0bGUiLCJfdFRpdGxlIiwibmV3dERlc2MiLCJfdERlc2MiLCJuZXd0RHVlIiwiX3REdWUiLCJuZXd0UHJpbyIsIl90UHJpbyIsIm5ld3RQcm9qIiwiX3RQcm9qIiwiUHJvamVjdCIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJ0b0RvcyIsIm5ld1Rhc2siLCJUdGl0bGUiLCJUZGVzYyIsIlRkdWUiLCJUcHJpbyIsIlRwcm9qIiwidCIsInB1c2giLCJudW1PZlRhc2tzIiwiX3RvRG9zIiwiX3RpdGxlIiwiX2Rlc2NyaXB0aW9uIiwidG9Eb0xpc3QiLCJuZXdUaXRsZSIsIm5ld0Rlc2MiLCJwcm9qT3ZlcmxheSIsInF1ZXJ5U2VsZWN0b3IiLCJkaXNwbGF5TmVlZFRpdGxlIiwiZXJyb3JPdmVybGF5Iiwic3R5bGUiLCJhbmltYXRpb24iLCJzZXRUaW1lb3V0IiwicHJvamVjdEZvcm1DbGVhciIsImdldEVsZW1lbnRCeUlkIiwidmFsdWUiLCJkaXNwbGF5VGFza0luTWFpbiIsInRhc2siLCJwcm9qVUwiLCJ0YXNrTEkiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwidGFza0NoZWNrYm94IiwidHlwZSIsInRhc2tEYXRlSW5wdXQiLCJhcHBlbmRDaGlsZCIsInRleHRDb250ZW50IiwidGFza092ZXJsYXkiLCJkcXMiLCJ0YXNrRm9ybUNsZWFyIiwicHJvak92ZXJsYXkxIiwiX3Rlc3RlcmluZyIsImVkaXRCdXR0b24iLCJ0YXJnZXQiLCJtYXRjaGVzIiwicmVtb3ZlQnV0dG9uIiwiYWRkVGFza0J1dHRvbiIsImN1cnJUaXRsZSIsImNvbnNvbGUiLCJsb2ciLCJwcm9qZWN0VGl0bGUiLCJhIiwicHJvakFyciIsInByb2pOYW1lIiwic2lkZWJhclByb2oiLCJzaWRlYmFyUHJvakNoaWxkcmVuIiwiY2hpbGRyZW4iLCJyZW1vdmVDaGlsZCIsInJlbW92ZVByb2plY3RTaWRlIiwic3BsaWNlIiwicmVtb3ZlUHJvakFyciIsImNsZWFyTWFpbiIsImZvdW5kUHJvaiIsImZpbmRQcm9qZWN0SW5BcnIiLCJwcm9qZWN0IiwidGFza0Nsb3NlIiwidGFza1N1Ym1pdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwibWFkZVRhc2siLCJwcm9qIiwidGFza1RpdGxlIiwidGFza0Rlc2MiLCJ0YXNrRHVlRGF0ZSIsInRhc2tQcmlvIiwidGFza01hZGUiLCJleHRyYWN0RGF0YUZvclRhc2siLCJ0YXNrT3ZlcmxheUxpc3RlbmVycyIsImluZGV4IiwibWFpblNlYyIsImFkZFByb2plY3RUb1NpZGViYXIiLCJwcm9qU2lkZSIsInByb2pUaXRsZSIsImRpc3BsYXlQcm9qZWN0SW5NYWluIiwicHJvakRpdiIsInRhc2tTZWNVTCIsInByb2pDaGVja2JveCIsInByb2pOYW1lU3BhbiIsIm1haW5Nb2RQcm9qVGl0bGUiLCJzbGljZSIsImJ1dHRvbkNvbnQiLCJhZGREaXYiLCJlZGl0RGl2IiwicmVtb3ZlRGl2IiwiYWRkSWNvbiIsIkltYWdlIiwiZWRpdEljb24iLCJyZW1JY29uIiwiY2hlY2tGb3JUYXNrcyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJmaXJzdENoaWxkIiwiYyIsIm1lbnVDb250YWluZXIiLCJtYWluTG9nb0NvbnQiLCJjbG9zZUNvbnRhaW5lciIsImNyZWF0ZVByb2pDb250IiwibWVudUljb24iLCJtYWluTG9nb0ltZyIsImNsb3NlSWNvbiIsImNyZWF0ZVByb2pJY29uIiwic2lkZUJhciIsInRhZ05hbWUiLCJtZW51RXZlbnRMaXN0ZW4iLCJjbG9zZUJ1dHRvbiIsInN1Ym1pdEJ1dHRvbiIsInByb2plY3RQYXJhbSIsInRpdGxlSW5wdXQiLCJkZXNjSW5wdXQiLCJwcm9qZWN0TWFkZSIsImV4dHJhY3REYXRhRm9yUHJvamVjdCIsInByb2plY3RPdmVybGF5U3R1ZmYiXSwic291cmNlUm9vdCI6IiJ9