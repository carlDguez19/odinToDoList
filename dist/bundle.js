(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var i=o.length-1;i>-1&&!e;)e=o[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();const e=t.p+"abbfad808c2786a6a2d4.png",n=t.p+"986e98635b18601755cf.png",o=t.p+"177a54134d0bd5aefd06.png",i=t.p+"edb755c23d1ebcf9c7a4.png",c=t.p+"c9c7160b568bb10d504c.png";class s{constructor(t,e,n,o,i){this.tTitle=t,this.tDesc=e,this.tDue=n,this.tPrio=o,this.tProj=i}set tTitle(t){this._tTitle=t}set tDesc(t){this._tDesc=t}set tDue(t){this._tDue=t}set tPrio(t){this._tPrio=t}set tProj(t){this._tProj=t}get tTitle(){return this._tTitle}get tDesc(){return this._tDesc}get tDue(){return this._tDue}get tPrio(){return this._tPrio}get tProj(){return this._tProj}}class r{constructor(t,e){this.title=t,this.description=e,this.toDos=[]}newTask(t,e,n,o,i){let c=new s(t,e,n,o,i);return this.toDos.push(c),c}printTasks(){for(var t=0;t<this.toDos.length;t++)console.log(this.toDos[t])}get numOfTasks(){return this.toDos.length}get title(){return this._title}get description(){return this._description}get toDoList(){return this.toDos}set title(t){this._title=t}set description(t){this._description=t}}const d=document.querySelector(".newProjectOverlay");function a(){const t=document.querySelector(".errorProjectOverlay");t.style.animation="projectSlideDown 1.5s forwards",setTimeout((function(){t.style.animation="projectSlideUp 1.5s forwards"}),2500)}function l(){document.getElementById("title").value="",document.getElementById("description").value=""}function u(t){const e=document.querySelector(".todoUL"),n=document.createElement("li"),i=document.createElement("div");i.textContent=t.tDue,i.classList.add("dateTaskDisp");const s=document.createElement("div"),r=document.createElement("input");r.type="checkbox";const d=document.createElement("input");d.type="date";const a=document.createElement("div"),l=document.createElement("div"),u=new Image;u.src=c,u.classList.add("taskProjEdit");const m=new Image;m.src=o,m.classList.add("taskProjRemove"),a.appendChild(u),l.appendChild(m),n.textContent=t.tTitle,n.appendChild(i),s.appendChild(a),s.appendChild(l),s.appendChild(r),s.classList.add("taskButtons"),n.appendChild(s),n.appendChild(d),n.classList.add("todo"),e.appendChild(n)}const m=I(".newTaskOverlay"),p=I(".taskCloseButton"),h=I(".taskSubmitButton");function f(){p.addEventListener("click",(function(){v(),m.style.animation="projectSlideUp 1.5s forwards"})),h.addEventListener("click",g)}function g(){m.style.animation="projectSlideUp 1.5s forwards";const t=function(t){const e=document.getElementById("tTitle").value,n=document.getElementById("tDescription").value,o=document.getElementById("tDueDate").value,i=document.getElementById("tTaskPrio").value,c=I(".projectNameMain").textContent;console.log(c);const s=S(c);if(e&&o){console.log(s.title);const t=s.newTask(e,n,o,i,s.title);return v(),t}return a(),v(),void(m.style.animation="projectSlideDown 1.5s forwards")}();t&&u(t),v(),h.removeEventListener("click",g)}function v(){document.getElementById("tTitle").value="",document.getElementById("tDescription").value="",document.getElementById("tDueDate").value="",document.getElementById("tTaskPrio").value="Select One"}const y=document.querySelector(".newProjectOverlay");let C=!1,j=null;function w(){document.addEventListener("click",E)}var E=function(t){const e=t.target.matches(".projEdit"),n=t.target.matches(".projRemove"),o=t.target.matches(".projAdd"),i=I(".projectNameMain");var c;j=i,e?(c=i.textContent,y.style.animation="projectSlideDown 1.5s forwards",I("#title").value=c,C=!0):n?(function(t){const e=I(".sidebarProject"),n=e.children;for(let o=0;o<n.length;o++)n[o].textContent==t&&e.removeChild(n[o])}(i.textContent),removeProjArr(i.textContent),k()):o&&(m.style.animation="projectSlideDown 1.5s forwards",f())};function S(t){let e=0;for(let n=0;n<b.length;n++)if(e=n,b[n].title==t)return b[n]}const L=I(".projectSection");function D(t){const e=I(".sidebarProject");let n=document.createElement("span");n.textContent=t,n.classList.add("projectNameSidebar"),e.appendChild(n)}function P(t){k();const e=document.createElement("div"),n=document.createElement("ul");n.classList.add("todoUL");const s=document.createElement("input");s.type="checkbox",s.classList.add("projectCheckbox");const r=document.createElement("span");if(t.title.length>30){let e=t.title.slice(0,31);r.textContent=e+"..."}else r.textContent=t.title;r.classList.add("projectNameMain");const d=document.createElement("div"),a=document.createElement("div"),l=document.createElement("div"),m=document.createElement("div"),p=new Image;p.src=i,p.classList.add("projAdd");const h=new Image;h.src=c,h.classList.add("projEdit");const f=new Image;f.src=o,f.classList.add("projRemove"),a.appendChild(p),l.appendChild(h),m.appendChild(f),d.appendChild(a),d.appendChild(l),d.appendChild(m),d.classList.add("projectOptions"),e.appendChild(s),e.appendChild(r),e.appendChild(d),e.classList.add("project"),L.appendChild(e),L.appendChild(n),function(t){const e=t.toDoList;if(e)for(var n=0;n<e.length;n++)u(e[n])}(t),w()}function k(){for(document.removeEventListener("click",E);L.firstChild;)L.removeChild(L.firstChild)}let b=[];function I(t){return document.querySelector(t)}!function(){const t=document.querySelector(".menuContainer"),c=document.querySelector(".mainLogo"),s=document.querySelector(".menuClose"),r=document.querySelector(".createProj"),d=new Image;d.src=e,d.classList.add("main-menu-logo");const a=new Image;a.src=n,a.classList.add("main-logo");const l=new Image;l.src=o,l.classList.add("menuClose");const u=new Image;u.src=i,u.classList.add("addProjButton"),t.appendChild(d),c.appendChild(a),s.appendChild(l),r.appendChild(u);const m=document.querySelector(".sidebar-menu"),p=document.querySelector(".newProjectOverlay");t.addEventListener("click",(function(){m.style.animation="menuSlideOn 1.5s forwards"})),s.addEventListener("click",(function(){m.style.animation="menuSlideClose 1.5s forwards"})),r.addEventListener("click",(function(){m.style.animation="menuSlideClose 1.5s forwards",p.style.animation="projectSlideDown 1.5s forwards"})),m.addEventListener("click",(t=>{"SPAN"===t.target.tagName&&P(S(t.target.textContent))}))}(),function(){const t=document.querySelector(".closeButton"),e=document.querySelector(".submitButton");t.addEventListener("click",(function(){d.style.animation="projectSlideUp 1.5s forwards",l()})),e.addEventListener("click",(function(){d.style.animation="projectSlideUp 1.5s forwards";const t=function(){const t=document.getElementById("title").value;let e=document.getElementById("description").value;if(t){const n=new r(t,e);return b.push(n),n}return a(),l(),void(d.style.animation="projectSlideDown 1.5s forwards")}();C?(function(t){for(let e=0;e<b.length;e++)b[e].title==t&&(b[e].title=b[b.length-1].title,b[e].description=b[b.length-1].description)}(j.textContent),function(t){const e=I(".sidebarProject").children;for(let n=0;n<e.length;n++)e[n].textContent==t&&(e[n].textContent=b[e.length].title)}(j.textContent),I(".projectNameMain").textContent=b[b.length-1].title,b.splice(b.length-1,1),C=!1):(t&&(D(t.title),P(t)),l())}))}();const T=new r("defaultProject","This is a default project. You can also create your own :)");b[0]=T,P(T),D("defaultProject"),w(),f()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,