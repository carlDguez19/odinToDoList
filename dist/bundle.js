(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&!e;)e=r[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();const e=t.p+"abbfad808c2786a6a2d4.png",n=t.p+"986e98635b18601755cf.png",r=t.p+"177a54134d0bd5aefd06.png",a=t.p+"edb755c23d1ebcf9c7a4.png",o=t.p+"c9c7160b568bb10d504c.png";class i{constructor(t,e,n,r,a){this.tTitle=t,this.tDesc=e,this.tDue=n,this.tPrio=r,this.tProj=a}set tTitle(t){this._tTitle=t}set tDesc(t){this._tDesc=t}set tDue(t){this._tDue=t}set tPrio(t){this._tPrio=t}set tProj(t){this._tProj=t}get tTitle(){return this._tTitle}get tDesc(){return this._tDesc}get tDue(){return this._tDue}get tPrio(){return this._tPrio}get tProj(){return this._tProj}}class u{constructor(t,e){this.title=t,this.description=e,this.toDos=[]}getLastTask(){return this.toDos[this.toDos.length-1]}removeLastTask(){this.toDos.splice(this.toDos.length-1,1)}editTask(t){for(let e=0;e<this.toDos.length;e++)this.toDos[e].tTitle==t&&(this.toDos[e].tTitle=this.toDos[this.toDos.length-1].tTitle,this.toDos[e].tDesc=this.toDos[this.toDos.length-1].tDesc,this.toDos[e].tDue=this.toDos[this.toDos.length-1].tDue,this.toDos[e].tPrio=this.toDos[this.toDos.length-1].tPrio,this.toDos[e].tProj=this.toDos[this.toDos.length-1].tProj)}newTask(t,e,n,r,a){let o=new i(t,e,n,r,a);return this.toDos.push(o),o}findTask(t){for(var e=0;e<this.toDos.length;e++)if(this.toDos[e].tTitle==t)return this.toDos[e]}removeTaskFromArr(t){for(var e=0;e<this.toDos.length;e++)this.toDos[e].tTitle==t&&this.toDos.splice(e,1)}printTasks(){console.log("current tasks in project "+this.title+": ");for(var t=0;t<this.toDos.length;t++)console.log(this.toDos[t].tTitle)}get numOfTasks(){return this.toDos.length}get title(){return this._title}get description(){return this._description}get toDoList(){return this.toDos}set title(t){this._title=t}set description(t){this._description=t}}const s=document.querySelector(".newProjectOverlay");function c(){const t=document.querySelector(".errorProjectOverlay");t.style.animation="projectSlideDown 1.5s forwards",setTimeout((function(){t.style.animation="projectSlideUp 1.5s forwards"}),2500)}function l(){document.getElementById("title").value="",document.getElementById("description").value=""}function d(){Mn(".infoCloseButton").addEventListener("click",f)}function f(){ht=!1,ct.style.animation="projectSlideUp 1.5s forwards",setTimeout((function(){lt.textContent=""}),1e3)}function h(t){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h(t)}function v(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function m(t){v(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===h(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function w(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function y(t,e){return v(2,arguments),function(t,e){v(2,arguments);var n=m(t).getTime(),r=w(e);return new Date(n+r)}(t,-w(e))}function g(t){v(1,arguments);var e=m(t),n=e.getUTCDay(),r=(n<1?7:0)+n-1;return e.setUTCDate(e.getUTCDate()-r),e.setUTCHours(0,0,0,0),e}function p(t){v(1,arguments);var e=m(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=g(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=g(o);return e.getTime()>=a.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function b(t){v(1,arguments);var e=m(t),n=g(e).getTime()-function(t){v(1,arguments);var e=p(t),n=new Date(0);return n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0),g(n)}(e).getTime();return Math.round(n/6048e5)+1}var T={};function k(){return T}function C(t,e){var n,r,a,o,i,u,s,c;v(1,arguments);var l=k(),d=w(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.weekStartsOn)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==a?a:l.weekStartsOn)&&void 0!==r?r:null===(s=l.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=m(t),h=f.getUTCDay(),y=(h<d?7:0)+h-d;return f.setUTCDate(f.getUTCDate()-y),f.setUTCHours(0,0,0,0),f}function D(t,e){var n,r,a,o,i,u,s,c;v(1,arguments);var l=m(t),d=l.getUTCFullYear(),f=k(),h=w(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:f.firstWeekContainsDate)&&void 0!==r?r:null===(s=f.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var y=new Date(0);y.setUTCFullYear(d+1,0,h),y.setUTCHours(0,0,0,0);var g=C(y,e),p=new Date(0);p.setUTCFullYear(d,0,h),p.setUTCHours(0,0,0,0);var b=C(p,e);return l.getTime()>=g.getTime()?d+1:l.getTime()>=b.getTime()?d:d-1}function x(t,e){v(1,arguments);var n=m(t),r=C(n,e).getTime()-function(t,e){var n,r,a,o,i,u,s,c;v(1,arguments);var l=k(),d=w(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:l.firstWeekContainsDate)&&void 0!==r?r:null===(s=l.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),f=D(t,e),h=new Date(0);return h.setUTCFullYear(f,0,d),h.setUTCHours(0,0,0,0),C(h,e)}(n,e).getTime();return Math.round(r/6048e5)+1}function S(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const P=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return S("yy"===e?r%100:r,e.length)},M=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):S(n+1,2)},U=function(t,e){return S(t.getUTCDate(),e.length)},E=function(t,e){return S(t.getUTCHours()%12||12,e.length)},j=function(t,e){return S(t.getUTCHours(),e.length)},L=function(t,e){return S(t.getUTCMinutes(),e.length)},O=function(t,e){return S(t.getUTCSeconds(),e.length)},q=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return S(Math.floor(r*Math.pow(10,n-3)),e.length)};function N(t,e){var n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=e||"";return n+String(a)+i+S(o,2)}function Y(t,e){return t%60==0?(t>0?"-":"+")+S(Math.abs(t)/60,2):A(t,e)}function A(t,e){var n=e||"",r=t>0?"-":"+",a=Math.abs(t);return r+S(Math.floor(a/60),2)+n+S(a%60,2)}const H={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return P(t,e)},Y:function(t,e,n,r){var a=D(t,r),o=a>0?a:1-a;return"YY"===e?S(o%100,2):"Yo"===e?n.ordinalNumber(o,{unit:"year"}):S(o,e.length)},R:function(t,e){return S(p(t),e.length)},u:function(t,e){return S(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return S(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return S(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return M(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return S(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var a=x(t,r);return"wo"===e?n.ordinalNumber(a,{unit:"week"}):S(a,e.length)},I:function(t,e,n){var r=b(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):S(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):U(t,e)},D:function(t,e,n){var r=function(t){v(1,arguments);var e=m(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=n-e.getTime();return Math.floor(r/864e5)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):S(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return S(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return S(o,e.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return S(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,a=t.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,a=t.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return E(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):j(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):S(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):S(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):L(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):O(t,e)},S:function(t,e){return q(t,e)},X:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return Y(a);case"XXXX":case"XX":return A(a);default:return A(a,":")}},x:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return Y(a);case"xxxx":case"xx":return A(a);default:return A(a,":")}},O:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+N(a,":");default:return"GMT"+A(a,":")}},z:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+N(a,":");default:return"GMT"+A(a,":")}},t:function(t,e,n,r){var a=r._originalDate||t;return S(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return S((r._originalDate||t).getTime(),e.length)}};var I=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},W=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},B={p:W,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return I(t,e);switch(a){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",I(a,e)).replace("{{time}}",W(o,e))}};const R=B;function Q(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var F=["D","DD"],G=["YY","YYYY"];function X(t){return-1!==F.indexOf(t)}function _(t){return-1!==G.indexOf(t)}function z(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var J={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function K(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}var $,Z={date:K({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:K({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:K({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},V={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function tt(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var a=t.defaultFormattingWidth||t.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=t.formattingValues[o]||t.formattingValues[a]}else{var i=t.defaultWidth,u=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[u]||t.values[i]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function et(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],o=e.match(a);if(!o)return null;var i,u=o[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(u))return n}(s):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(u))return n}(s);return i=t.valueCallback?t.valueCallback(c):c,{value:i=n.valueCallback?n.valueCallback(i):i,rest:e.slice(u.length)}}}const nt={code:"en-US",formatDistance:function(t,e,n){var r,a=J[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:Z,formatRelative:function(t,e,n,r){return V[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:tt({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:tt({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:tt({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:tt({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:tt({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:($={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match($.matchPattern);if(!n)return null;var r=n[0],a=t.match($.parsePattern);if(!a)return null;var o=$.valueCallback?$.valueCallback(a[0]):a[0];return{value:o=e.valueCallback?e.valueCallback(o):o,rest:t.slice(r.length)}}),era:et({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:et({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:et({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:et({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:et({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var rt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,at=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ot=/^'([^]*?)'?$/,it=/''/g,ut=/[a-zA-Z]/;function st(t,e,n){var r,a,o,i,u,s,c,l,d,f,g,p,b,T,C,D,x,S;v(2,arguments);var P=String(e),M=k(),U=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:M.locale)&&void 0!==r?r:nt,E=w(null!==(o=null!==(i=null!==(u=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==u?u:M.firstWeekContainsDate)&&void 0!==i?i:null===(d=M.locale)||void 0===d||null===(f=d.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==o?o:1);if(!(E>=1&&E<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var j=w(null!==(g=null!==(p=null!==(b=null!==(T=null==n?void 0:n.weekStartsOn)&&void 0!==T?T:null==n||null===(C=n.locale)||void 0===C||null===(D=C.options)||void 0===D?void 0:D.weekStartsOn)&&void 0!==b?b:M.weekStartsOn)&&void 0!==p?p:null===(x=M.locale)||void 0===x||null===(S=x.options)||void 0===S?void 0:S.weekStartsOn)&&void 0!==g?g:0);if(!(j>=0&&j<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!U.localize)throw new RangeError("locale must contain localize property");if(!U.formatLong)throw new RangeError("locale must contain formatLong property");var L=m(t);if(!function(t){if(v(1,arguments),!function(t){return v(1,arguments),t instanceof Date||"object"===h(t)&&"[object Date]"===Object.prototype.toString.call(t)}(t)&&"number"!=typeof t)return!1;var e=m(t);return!isNaN(Number(e))}(L))throw new RangeError("Invalid time value");var O=y(L,Q(L)),q={firstWeekContainsDate:E,weekStartsOn:j,locale:U,_originalDate:L};return P.match(at).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,R[e])(t,U.formatLong):t})).join("").match(rt).map((function(r){if("''"===r)return"'";var a,o,i=r[0];if("'"===i)return(o=(a=r).match(ot))?o[1].replace(it,"'"):a;var u=H[i];if(u)return null!=n&&n.useAdditionalWeekYearTokens||!_(r)||z(r,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!X(r)||z(r,e,String(t)),u(O,r,U.localize,q);if(i.match(ut))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}const ct=Mn(".infoDescOverlay"),lt=Mn(".infoSec");let dt=!1,ft=null,ht=!1,vt=!1;function mt(t){const e=t.target.parentElement.parentElement.parentElement;if(t.target.matches(".taskProjEdit"))dt=!0,console.log("morePestoPlease: "+e.textContent),ft=wt(e.textContent),function(t){nn.style.animation="projectSlideDown 1.5s forwards";const e=Mn("#tTitle"),n=Mn("#tDueDate");e.value=t.tTitle;const r=st(t.tDue,"yyyy-MM-dd");n.value=r,on()}(ft);else if(t.target.matches(".taskProjRemove")){vt=!0,console.log(e.textContent);const t=mn(wt(e.textContent).tProj);t.removeTaskFromArr(e.textContent),t.printTasks(),gt(e.textContent)}else if(t.target.matches(".titleTaskDisp")){ht=!0;n=wt(t.target.parentElement.textContent),ct.style.animation="projectSlideDown 1.5s forwards",lt.textContent+="DUE DATE: "+n.tDue+" DESCRIPTION: "+n.tDesc+" PROJECT: "+n.tProj,d()}var n}function wt(t){for(let n=0;n<Pn.length;n++){const r=Pn[n].toDoList;if(r)for(var e=0;e<r.length;e++)if(r[e].tTitle==t)return r[e]}}function yt(t){const e=document.querySelector(".todoUL"),n=document.createElement("li"),a=document.createElement("div");a.textContent=t.tTitle,a.classList.add("titleTaskDisp");const i=document.createElement("div"),u=document.createElement("input");u.type="checkbox";const s=document.createElement("div"),c=document.createElement("div"),l=new Image;l.src=o,l.classList.add("taskProjEdit");const d=new Image;d.src=r,d.classList.add("taskProjRemove"),s.appendChild(l),c.appendChild(d),i.appendChild(s),i.appendChild(c),i.appendChild(u),i.classList.add("taskButtons"),n.appendChild(a),n.appendChild(i),n.classList.add("todo");const f=t.tPrio;"high"==f?n.classList.add("highPrio"):"medium"==f?n.classList.add("mediumPrio"):"low"==f&&n.classList.add("lowPrio"),e.appendChild(n),document.addEventListener("click",mt)}function gt(t){const e=Mn(".todoUL"),n=e.children;for(let r=0;r<n.length;r++)n[r].textContent==t&&e.removeChild(n[r])}function pt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function bt(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return pt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?pt(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,a=function(){};return{s:a,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,u=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return i=t.done,t},e:function(t){u=!0,o=t},f:function(){try{i||null==n.return||n.return()}finally{if(u)throw o}}}}function Tt(t,e){if(null==t)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}function kt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ct(t,e){return Ct=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},Ct(t,e)}function Dt(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ct(t,e)}function xt(t){return xt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},xt(t)}function St(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=xt(t);if(e){var a=xt(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return function(t,e){if(e&&("object"===h(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return kt(t)}(this,n)}}function Pt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Mt(t){var e=function(t,e){if("object"!==h(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==h(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===h(e)?e:String(e)}function Ut(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,Mt(r.key),r)}}function Et(t,e,n){return e&&Ut(t.prototype,e),n&&Ut(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function jt(t,e,n){return(e=Mt(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Lt=function(){function t(){Pt(this,t),jt(this,"priority",void 0),jt(this,"subPriority",0)}return Et(t,[{key:"validate",value:function(t,e){return!0}}]),t}(),Ot=function(t){Dt(n,t);var e=St(n);function n(t,r,a,o,i){var u;return Pt(this,n),(u=e.call(this)).value=t,u.validateValue=r,u.setValue=a,u.priority=o,i&&(u.subPriority=i),u}return Et(n,[{key:"validate",value:function(t,e){return this.validateValue(t,this.value,e)}},{key:"set",value:function(t,e,n){return this.setValue(t,e,this.value,n)}}]),n}(Lt),qt=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",10),jt(kt(t),"subPriority",-1),t}return Et(n,[{key:"set",value:function(t,e){if(e.timestampIsSet)return t;var n=new Date(0);return n.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),n.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),n}}]),n}(Lt),Nt=function(){function t(){Pt(this,t),jt(this,"incompatibleTokens",void 0),jt(this,"priority",void 0),jt(this,"subPriority",void 0)}return Et(t,[{key:"run",value:function(t,e,n,r){var a=this.parse(t,e,n,r);return a?{setter:new Ot(a.value,this.validate,this.set,this.priority,this.subPriority),rest:a.rest}:null}},{key:"validate",value:function(t,e,n){return!0}}]),t}(),Yt=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",140),jt(kt(t),"incompatibleTokens",["R","u","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"G":case"GG":case"GGG":return n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"});case"GGGGG":return n.era(t,{width:"narrow"});default:return n.era(t,{width:"wide"})||n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"})}}},{key:"set",value:function(t,e,n){return e.era=n,t.setUTCFullYear(n,0,1),t.setUTCHours(0,0,0,0),t}}]),n}(Nt),At=(Math.pow(10,8),/^(1[0-2]|0?\d)/),Ht=/^(3[0-1]|[0-2]?\d)/,It=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,Wt=/^(5[0-3]|[0-4]?\d)/,Bt=/^(2[0-3]|[0-1]?\d)/,Rt=/^(2[0-4]|[0-1]?\d)/,Qt=/^(1[0-1]|0?\d)/,Ft=/^(1[0-2]|0?\d)/,Gt=/^[0-5]?\d/,Xt=/^[0-5]?\d/,_t=/^\d/,zt=/^\d{1,2}/,Jt=/^\d{1,3}/,Kt=/^\d{1,4}/,$t=/^-?\d+/,Zt=/^-?\d/,Vt=/^-?\d{1,2}/,te=/^-?\d{1,3}/,ee=/^-?\d{1,4}/,ne=/^([+-])(\d{2})(\d{2})?|Z/,re=/^([+-])(\d{2})(\d{2})|Z/,ae=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,oe=/^([+-])(\d{2}):(\d{2})|Z/,ie=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function ue(t,e){return t?{value:e(t.value),rest:t.rest}:t}function se(t,e){var n=e.match(t);return n?{value:parseInt(n[0],10),rest:e.slice(n[0].length)}:null}function ce(t,e){var n=e.match(t);return n?"Z"===n[0]?{value:0,rest:e.slice(1)}:{value:("+"===n[1]?1:-1)*(36e5*(n[2]?parseInt(n[2],10):0)+6e4*(n[3]?parseInt(n[3],10):0)+1e3*(n[5]?parseInt(n[5],10):0)),rest:e.slice(n[0].length)}:null}function le(t){return se($t,t)}function de(t,e){switch(t){case 1:return se(_t,e);case 2:return se(zt,e);case 3:return se(Jt,e);case 4:return se(Kt,e);default:return se(new RegExp("^\\d{1,"+t+"}"),e)}}function fe(t,e){switch(t){case 1:return se(Zt,e);case 2:return se(Vt,e);case 3:return se(te,e);case 4:return se(ee,e);default:return se(new RegExp("^-?\\d{1,"+t+"}"),e)}}function he(t){switch(t){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function ve(t,e){var n,r=e>0,a=r?e:1-e;if(a<=50)n=t||100;else{var o=a+50;n=t+100*Math.floor(o/100)-(t>=o%100?100:0)}return r?n:1-n}function me(t){return t%400==0||t%4==0&&t%100!=0}var we=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",130),jt(kt(t),"incompatibleTokens",["Y","R","u","w","I","i","e","c","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){var r=function(t){return{year:t,isTwoDigitYear:"yy"===e}};switch(e){case"y":return ue(de(4,t),r);case"yo":return ue(n.ordinalNumber(t,{unit:"year"}),r);default:return ue(de(e.length,t),r)}}},{key:"validate",value:function(t,e){return e.isTwoDigitYear||e.year>0}},{key:"set",value:function(t,e,n){var r=t.getUTCFullYear();if(n.isTwoDigitYear){var a=ve(n.year,r);return t.setUTCFullYear(a,0,1),t.setUTCHours(0,0,0,0),t}var o="era"in e&&1!==e.era?1-n.year:n.year;return t.setUTCFullYear(o,0,1),t.setUTCHours(0,0,0,0),t}}]),n}(Nt),ye=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",130),jt(kt(t),"incompatibleTokens",["y","R","u","Q","q","M","L","I","d","D","i","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){var r=function(t){return{year:t,isTwoDigitYear:"YY"===e}};switch(e){case"Y":return ue(de(4,t),r);case"Yo":return ue(n.ordinalNumber(t,{unit:"year"}),r);default:return ue(de(e.length,t),r)}}},{key:"validate",value:function(t,e){return e.isTwoDigitYear||e.year>0}},{key:"set",value:function(t,e,n,r){var a=D(t,r);if(n.isTwoDigitYear){var o=ve(n.year,a);return t.setUTCFullYear(o,0,r.firstWeekContainsDate),t.setUTCHours(0,0,0,0),C(t,r)}var i="era"in e&&1!==e.era?1-n.year:n.year;return t.setUTCFullYear(i,0,r.firstWeekContainsDate),t.setUTCHours(0,0,0,0),C(t,r)}}]),n}(Nt),ge=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",130),jt(kt(t),"incompatibleTokens",["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e){return fe("R"===e?4:e.length,t)}},{key:"set",value:function(t,e,n){var r=new Date(0);return r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0),g(r)}}]),n}(Nt),pe=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",130),jt(kt(t),"incompatibleTokens",["G","y","Y","R","w","I","i","e","c","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e){return fe("u"===e?4:e.length,t)}},{key:"set",value:function(t,e,n){return t.setUTCFullYear(n,0,1),t.setUTCHours(0,0,0,0),t}}]),n}(Nt),be=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",120),jt(kt(t),"incompatibleTokens",["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"Q":case"QQ":return de(e.length,t);case"Qo":return n.ordinalNumber(t,{unit:"quarter"});case"QQQ":return n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(t,{width:"narrow",context:"formatting"});default:return n.quarter(t,{width:"wide",context:"formatting"})||n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=1&&e<=4}},{key:"set",value:function(t,e,n){return t.setUTCMonth(3*(n-1),1),t.setUTCHours(0,0,0,0),t}}]),n}(Nt),Te=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",120),jt(kt(t),"incompatibleTokens",["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"q":case"qq":return de(e.length,t);case"qo":return n.ordinalNumber(t,{unit:"quarter"});case"qqq":return n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(t,{width:"narrow",context:"standalone"});default:return n.quarter(t,{width:"wide",context:"standalone"})||n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(t,e){return e>=1&&e<=4}},{key:"set",value:function(t,e,n){return t.setUTCMonth(3*(n-1),1),t.setUTCHours(0,0,0,0),t}}]),n}(Nt),ke=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"incompatibleTokens",["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]),jt(kt(t),"priority",110),t}return Et(n,[{key:"parse",value:function(t,e,n){var r=function(t){return t-1};switch(e){case"M":return ue(se(At,t),r);case"MM":return ue(de(2,t),r);case"Mo":return ue(n.ordinalNumber(t,{unit:"month"}),r);case"MMM":return n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(t,{width:"narrow",context:"formatting"});default:return n.month(t,{width:"wide",context:"formatting"})||n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=11}},{key:"set",value:function(t,e,n){return t.setUTCMonth(n,1),t.setUTCHours(0,0,0,0),t}}]),n}(Nt),Ce=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",110),jt(kt(t),"incompatibleTokens",["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){var r=function(t){return t-1};switch(e){case"L":return ue(se(At,t),r);case"LL":return ue(de(2,t),r);case"Lo":return ue(n.ordinalNumber(t,{unit:"month"}),r);case"LLL":return n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(t,{width:"narrow",context:"standalone"});default:return n.month(t,{width:"wide",context:"standalone"})||n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=11}},{key:"set",value:function(t,e,n){return t.setUTCMonth(n,1),t.setUTCHours(0,0,0,0),t}}]),n}(Nt),De=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",100),jt(kt(t),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","i","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"w":return se(Wt,t);case"wo":return n.ordinalNumber(t,{unit:"week"});default:return de(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=53}},{key:"set",value:function(t,e,n,r){return C(function(t,e,n){v(2,arguments);var r=m(t),a=w(e),o=x(r,n)-a;return r.setUTCDate(r.getUTCDate()-7*o),r}(t,n,r),r)}}]),n}(Nt),xe=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",100),jt(kt(t),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"I":return se(Wt,t);case"Io":return n.ordinalNumber(t,{unit:"week"});default:return de(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=53}},{key:"set",value:function(t,e,n){return g(function(t,e){v(2,arguments);var n=m(t),r=w(e),a=b(n)-r;return n.setUTCDate(n.getUTCDate()-7*a),n}(t,n))}}]),n}(Nt),Se=[31,28,31,30,31,30,31,31,30,31,30,31],Pe=[31,29,31,30,31,30,31,31,30,31,30,31],Me=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",90),jt(kt(t),"subPriority",1),jt(kt(t),"incompatibleTokens",["Y","R","q","Q","w","I","D","i","e","c","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"d":return se(Ht,t);case"do":return n.ordinalNumber(t,{unit:"date"});default:return de(e.length,t)}}},{key:"validate",value:function(t,e){var n=me(t.getUTCFullYear()),r=t.getUTCMonth();return n?e>=1&&e<=Pe[r]:e>=1&&e<=Se[r]}},{key:"set",value:function(t,e,n){return t.setUTCDate(n),t.setUTCHours(0,0,0,0),t}}]),n}(Nt),Ue=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",90),jt(kt(t),"subpriority",1),jt(kt(t),"incompatibleTokens",["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"D":case"DD":return se(It,t);case"Do":return n.ordinalNumber(t,{unit:"date"});default:return de(e.length,t)}}},{key:"validate",value:function(t,e){return me(t.getUTCFullYear())?e>=1&&e<=366:e>=1&&e<=365}},{key:"set",value:function(t,e,n){return t.setUTCMonth(0,n),t.setUTCHours(0,0,0,0),t}}]),n}(Nt);function Ee(t,e,n){var r,a,o,i,u,s,c,l;v(2,arguments);var d=k(),f=w(null!==(r=null!==(a=null!==(o=null!==(i=null==n?void 0:n.weekStartsOn)&&void 0!==i?i:null==n||null===(u=n.locale)||void 0===u||null===(s=u.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==a?a:null===(c=d.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==r?r:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=m(t),y=w(e),g=((y%7+7)%7<f?7:0)+y-h.getUTCDay();return h.setUTCDate(h.getUTCDate()+g),h}var je=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",90),jt(kt(t),"incompatibleTokens",["D","i","e","c","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"E":case"EE":case"EEE":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=6}},{key:"set",value:function(t,e,n,r){return(t=Ee(t,n,r)).setUTCHours(0,0,0,0),t}}]),n}(Nt),Le=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",90),jt(kt(t),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n,r){var a=function(t){var e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"e":case"ee":return ue(de(e.length,t),a);case"eo":return ue(n.ordinalNumber(t,{unit:"day"}),a);case"eee":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"eeeee":return n.day(t,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=6}},{key:"set",value:function(t,e,n,r){return(t=Ee(t,n,r)).setUTCHours(0,0,0,0),t}}]),n}(Nt),Oe=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",90),jt(kt(t),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n,r){var a=function(t){var e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"c":case"cc":return ue(de(e.length,t),a);case"co":return ue(n.ordinalNumber(t,{unit:"day"}),a);case"ccc":return n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});case"ccccc":return n.day(t,{width:"narrow",context:"standalone"});case"cccccc":return n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});default:return n.day(t,{width:"wide",context:"standalone"})||n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=6}},{key:"set",value:function(t,e,n,r){return(t=Ee(t,n,r)).setUTCHours(0,0,0,0),t}}]),n}(Nt),qe=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",90),jt(kt(t),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){var r=function(t){return 0===t?7:t};switch(e){case"i":case"ii":return de(e.length,t);case"io":return n.ordinalNumber(t,{unit:"day"});case"iii":return ue(n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiii":return ue(n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiiii":return ue(n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);default:return ue(n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r)}}},{key:"validate",value:function(t,e){return e>=1&&e<=7}},{key:"set",value:function(t,e,n){return t=function(t,e){v(2,arguments);var n=w(e);n%7==0&&(n-=7);var r=m(t),a=((n%7+7)%7<1?7:0)+n-r.getUTCDay();return r.setUTCDate(r.getUTCDate()+a),r}(t,n),t.setUTCHours(0,0,0,0),t}}]),n}(Nt),Ne=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",80),jt(kt(t),"incompatibleTokens",["b","B","H","k","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"a":case"aa":case"aaa":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(t,e,n){return t.setUTCHours(he(n),0,0,0),t}}]),n}(Nt),Ye=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",80),jt(kt(t),"incompatibleTokens",["a","B","H","k","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"b":case"bb":case"bbb":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(t,e,n){return t.setUTCHours(he(n),0,0,0),t}}]),n}(Nt),Ae=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",80),jt(kt(t),"incompatibleTokens",["a","b","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"B":case"BB":case"BBB":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(t,e,n){return t.setUTCHours(he(n),0,0,0),t}}]),n}(Nt),He=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",70),jt(kt(t),"incompatibleTokens",["H","K","k","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"h":return se(Ft,t);case"ho":return n.ordinalNumber(t,{unit:"hour"});default:return de(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=12}},{key:"set",value:function(t,e,n){var r=t.getUTCHours()>=12;return r&&n<12?t.setUTCHours(n+12,0,0,0):r||12!==n?t.setUTCHours(n,0,0,0):t.setUTCHours(0,0,0,0),t}}]),n}(Nt),Ie=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",70),jt(kt(t),"incompatibleTokens",["a","b","h","K","k","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"H":return se(Bt,t);case"Ho":return n.ordinalNumber(t,{unit:"hour"});default:return de(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=23}},{key:"set",value:function(t,e,n){return t.setUTCHours(n,0,0,0),t}}]),n}(Nt),We=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",70),jt(kt(t),"incompatibleTokens",["h","H","k","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"K":return se(Qt,t);case"Ko":return n.ordinalNumber(t,{unit:"hour"});default:return de(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=11}},{key:"set",value:function(t,e,n){return t.getUTCHours()>=12&&n<12?t.setUTCHours(n+12,0,0,0):t.setUTCHours(n,0,0,0),t}}]),n}(Nt),Be=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",70),jt(kt(t),"incompatibleTokens",["a","b","h","H","K","t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"k":return se(Rt,t);case"ko":return n.ordinalNumber(t,{unit:"hour"});default:return de(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=24}},{key:"set",value:function(t,e,n){var r=n<=24?n%24:n;return t.setUTCHours(r,0,0,0),t}}]),n}(Nt),Re=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",60),jt(kt(t),"incompatibleTokens",["t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"m":return se(Gt,t);case"mo":return n.ordinalNumber(t,{unit:"minute"});default:return de(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=59}},{key:"set",value:function(t,e,n){return t.setUTCMinutes(n,0,0),t}}]),n}(Nt),Qe=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",50),jt(kt(t),"incompatibleTokens",["t","T"]),t}return Et(n,[{key:"parse",value:function(t,e,n){switch(e){case"s":return se(Xt,t);case"so":return n.ordinalNumber(t,{unit:"second"});default:return de(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=59}},{key:"set",value:function(t,e,n){return t.setUTCSeconds(n,0),t}}]),n}(Nt),Fe=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",30),jt(kt(t),"incompatibleTokens",["t","T"]),t}return Et(n,[{key:"parse",value:function(t,e){return ue(de(e.length,t),(function(t){return Math.floor(t*Math.pow(10,3-e.length))}))}},{key:"set",value:function(t,e,n){return t.setUTCMilliseconds(n),t}}]),n}(Nt),Ge=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",10),jt(kt(t),"incompatibleTokens",["t","T","x"]),t}return Et(n,[{key:"parse",value:function(t,e){switch(e){case"X":return ce(ne,t);case"XX":return ce(re,t);case"XXXX":return ce(ae,t);case"XXXXX":return ce(ie,t);default:return ce(oe,t)}}},{key:"set",value:function(t,e,n){return e.timestampIsSet?t:new Date(t.getTime()-n)}}]),n}(Nt),Xe=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",10),jt(kt(t),"incompatibleTokens",["t","T","X"]),t}return Et(n,[{key:"parse",value:function(t,e){switch(e){case"x":return ce(ne,t);case"xx":return ce(re,t);case"xxxx":return ce(ae,t);case"xxxxx":return ce(ie,t);default:return ce(oe,t)}}},{key:"set",value:function(t,e,n){return e.timestampIsSet?t:new Date(t.getTime()-n)}}]),n}(Nt),_e=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",40),jt(kt(t),"incompatibleTokens","*"),t}return Et(n,[{key:"parse",value:function(t){return le(t)}},{key:"set",value:function(t,e,n){return[new Date(1e3*n),{timestampIsSet:!0}]}}]),n}(Nt),ze=function(t){Dt(n,t);var e=St(n);function n(){var t;Pt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return jt(kt(t=e.call.apply(e,[this].concat(a))),"priority",20),jt(kt(t),"incompatibleTokens","*"),t}return Et(n,[{key:"parse",value:function(t){return le(t)}},{key:"set",value:function(t,e,n){return[new Date(n),{timestampIsSet:!0}]}}]),n}(Nt),Je={G:new Yt,y:new we,Y:new ye,R:new ge,u:new pe,Q:new be,q:new Te,M:new ke,L:new Ce,w:new De,I:new xe,d:new Me,D:new Ue,E:new je,e:new Le,c:new Oe,i:new qe,a:new Ne,b:new Ye,B:new Ae,h:new He,H:new Ie,K:new We,k:new Be,m:new Re,s:new Qe,S:new Fe,X:new Ge,x:new Xe,t:new _e,T:new ze},Ke=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,$e=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ze=/^'([^]*?)'?$/,Ve=/''/g,tn=/\S/,en=/[a-zA-Z]/;const nn=Mn(".newTaskOverlay"),rn=Mn(".taskCloseButton"),an=Mn(".taskSubmitButton");function on(){rn.addEventListener("click",(function(){ln(),nn.style.animation="projectSlideUp 1.5s forwards"})),an.addEventListener("click",un)}function un(){if(nn.style.animation="projectSlideUp 1.5s forwards",console.log("taskEditButton bool value: "+dt),new Date,dt){const t=cn(),e=mn(t.tProj);gt(ft.tTitle),e.editTask(ft.tTitle),yt(t),e.removeLastTask(),e.printTasks(),dt=!1,sn()}else{const t=cn();t&&yt(t),ln(),sn()}}function sn(){an.removeEventListener("click",un),ft=null}function cn(){const t=document.getElementById("tTitle").value,e=document.getElementById("tDescription").value,n=document.getElementById("tDueDate").value,r=document.getElementById("tTaskPrio").value,a=ft?ft.tProj:Mn(".projectNameMain").textContent,o=function(t,e,n,r){var a,o,i,u,s,c,l,d,f,g,p,b,T,C,D,x,S,P;v(3,arguments);var M=String(t),U=String(e),E=k(),j=null!==(a=null!==(o=null==r?void 0:r.locale)&&void 0!==o?o:E.locale)&&void 0!==a?a:nt;if(!j.match)throw new RangeError("locale must contain match property");var L=w(null!==(i=null!==(u=null!==(s=null!==(c=null==r?void 0:r.firstWeekContainsDate)&&void 0!==c?c:null==r||null===(l=r.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==s?s:E.firstWeekContainsDate)&&void 0!==u?u:null===(f=E.locale)||void 0===f||null===(g=f.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==i?i:1);if(!(L>=1&&L<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var O=w(null!==(p=null!==(b=null!==(T=null!==(C=null==r?void 0:r.weekStartsOn)&&void 0!==C?C:null==r||null===(D=r.locale)||void 0===D||null===(x=D.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==T?T:E.weekStartsOn)&&void 0!==b?b:null===(S=E.locale)||void 0===S||null===(P=S.options)||void 0===P?void 0:P.weekStartsOn)&&void 0!==p?p:0);if(!(O>=0&&O<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(""===U)return""===M?m(n):new Date(NaN);var q,N={firstWeekContainsDate:L,weekStartsOn:O,locale:j},Y=[new qt],A=U.match($e).map((function(t){var e=t[0];return e in R?(0,R[e])(t,j.formatLong):t})).join("").match(Ke),H=[],I=bt(A);try{var W=function(){var e=q.value;null!=r&&r.useAdditionalWeekYearTokens||!_(e)||z(e,U,t),null!=r&&r.useAdditionalDayOfYearTokens||!X(e)||z(e,U,t);var n=e[0],a=Je[n];if(a){var o=a.incompatibleTokens;if(Array.isArray(o)){var i=H.find((function(t){return o.includes(t.token)||t.token===n}));if(i)throw new RangeError("The format string mustn't contain `".concat(i.fullToken,"` and `").concat(e,"` at the same time"))}else if("*"===a.incompatibleTokens&&H.length>0)throw new RangeError("The format string mustn't contain `".concat(e,"` and any other token at the same time"));H.push({token:n,fullToken:e});var u=a.run(M,e,j.match,N);if(!u)return{v:new Date(NaN)};Y.push(u.setter),M=u.rest}else{if(n.match(en))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");if("''"===e?e="'":"'"===n&&(e=e.match(Ze)[1].replace(Ve,"'")),0!==M.indexOf(e))return{v:new Date(NaN)};M=M.slice(e.length)}};for(I.s();!(q=I.n()).done;){var B=W();if("object"===h(B))return B.v}}catch(t){I.e(t)}finally{I.f()}if(M.length>0&&tn.test(M))return new Date(NaN);var F=Y.map((function(t){return t.priority})).sort((function(t,e){return e-t})).filter((function(t,e,n){return n.indexOf(t)===e})).map((function(t){return Y.filter((function(e){return e.priority===t})).sort((function(t,e){return e.subPriority-t.subPriority}))})).map((function(t){return t[0]})),G=m(n);if(isNaN(G.getTime()))return new Date(NaN);var J,K=y(G,Q(G)),$={},Z=bt(F);try{for(Z.s();!(J=Z.n()).done;){var V=J.value;if(!V.validate(K,N))return new Date(NaN);var tt=V.set(K,$,N);Array.isArray(tt)?(K=tt[0],Tt($,tt[1])):K=tt}}catch(t){Z.e(t)}finally{Z.f()}return K}(n,"yyyy-MM-dd",new Date),i=mn(a);if(t&&n){const n=i.newTask(t,e,o,r,a);return ln(),n}return c(),ln(),void(nn.style.animation="projectSlideDown 1.5s forwards")}function ln(){document.getElementById("tTitle").value="",document.getElementById("tDescription").value="",document.getElementById("tDueDate").value="",document.getElementById("tTaskPrio").value="Select One"}const dn=document.querySelector(".newProjectOverlay");let fn=!1,hn=null;var vn=function(t){const e=t.target.matches(".projEdit"),n=t.target.matches(".projRemove"),r=t.target.matches(".projAdd"),a=t.target.matches(".projectNameMain"),o=Mn(".projectNameMain");if(hn=o,e)i=o.textContent,dn.style.animation="projectSlideDown 1.5s forwards",Mn("#title").value=i,fn=!0;else if(n){!function(t){const e=Mn(".sidebarProject"),n=e.children;for(let r=0;r<n.length;r++)n[r].textContent==t&&e.removeChild(n[r])}(o.textContent),function(t){for(let e=0;e<Pn.length;e++)Pn[e].title==t&&(Pn.splice(e,1),localStorage.setItem("projects",JSON.stringify(Pn)))}(o.textContent),Sn(),console.log("current projects in array are: ");for(let t=0;t<Pn.length;t++)console.log(Pn[t].title)}else if(r)nn.style.animation="projectSlideDown 1.5s forwards",on();else if(a){u=mn(o.textContent),ct.style.animation="projectSlideDown 1.5s forwards",lt.textContent="DESCRIPTION: "+u.description,d()}var i,u};function mn(t){let e=0;for(let n=0;n<Pn.length;n++)if(e=n,Pn[n]._title==t)return console.log("project found"),Pn[n]}function wn(t,e){v(2,arguments);var n=m(t),r=m(e);return n.getTime()===r.getTime()}function yn(t,e){var n,r,a,o,i,u,s,c;v(1,arguments);var l=k(),d=w(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.weekStartsOn)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==a?a:l.weekStartsOn)&&void 0!==r?r:null===(s=l.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=m(t),h=f.getDay(),y=(h<d?7:0)+h-d;return f.setDate(f.getDate()-y),f.setHours(0,0,0,0),f}function gn(t,e){return v(1,arguments),function(t,e,n){v(2,arguments);var r=yn(t,n),a=yn(e,n);return r.getTime()===a.getTime()}(t,Date.now(),e)}const pn=Mn(".projectSection");function bn(t){const e=Mn(".sidebarProject");let n=document.createElement("span");n.textContent=t,n.classList.add("projectNameSidebar"),e.appendChild(n)}function Tn(t){Sn();const e=document.createElement("div"),n=document.createElement("ul");n.classList.add("todoUL");const i=document.createElement("input");i.type="checkbox",i.classList.add("projectCheckbox");const u=document.createElement("span");if(t.title.length>30){let e=t.title.slice(0,31);u.textContent=e+"..."}else u.textContent=t.title;u.classList.add("projectNameMain");const s=document.createElement("div"),c=document.createElement("div"),l=document.createElement("div"),d=document.createElement("div"),f=new Image;f.src=a,f.classList.add("projAdd");const h=new Image;h.src=o,h.classList.add("projEdit");const v=new Image;v.src=r,v.classList.add("projRemove"),c.appendChild(f),l.appendChild(h),d.appendChild(v),s.appendChild(c),s.appendChild(l),s.appendChild(d),s.classList.add("projectOptions"),e.appendChild(i),e.appendChild(u),e.appendChild(s),e.classList.add("project"),pn.appendChild(e),pn.appendChild(n),kn(t),document.addEventListener("click",vn)}function kn(t){const e=t.toDoList;if(e)for(var n=0;n<e.length;n++)yt(e[n])}function Cn(t){const e=t.toDoList;if(e)for(var n=0;n<e.length;n++)"high"==e[n].tPrio&&yt(e[n])}function Dn(t){const e=t.toDoList,n=st(new Date,"yyyy-MM-dd"),r=new Date(n);if(e)for(var a=0;a<e.length;a++){const t=st(e[a].tDue,"yyyy-MM-dd");wn(new Date(t),r)&&yt(e[a])}}function xn(t){const e=t.toDoList,n=st(new Date,"yyyy-MM-dd");if(new Date(n),e)for(var r=0;r<e.length;r++){const t=st(e[r].tDue,"yyyy-MM-dd");gn(new Date(t))&&yt(e[r])}}function Sn(){for(document.removeEventListener("click",vn);pn.firstChild;)pn.removeChild(pn.firstChild)}let Pn=null;function Mn(t){return document.querySelector(t)}function Un(){Sn();const t=document.createElement("ul");t.classList.add("todoUL"),pn.appendChild(t);for(let t=0;t<Pn.length;t++)xn(Pn[t])}function En(){Sn();const t=document.createElement("ul");t.classList.add("todoUL"),pn.appendChild(t);for(let t=0;t<Pn.length;t++)Dn(Pn[t])}function jn(){Sn();const t=document.createElement("ul");t.classList.add("todoUL"),pn.appendChild(t);for(let t=0;t<Pn.length;t++)Cn(Pn[t])}function Ln(){Sn();const t=document.createElement("ul");t.classList.add("todoUL"),pn.appendChild(t);for(let t=0;t<Pn.length;t++)kn(Pn[t])}!function(){if(localStorage.getItem("projects")){Pn=JSON.parse(localStorage.getItem("projects"));for(let t=0;t<Pn.length;t++)bn(Pn[t].title)}else Pn=[]}(),function(){const t=document.querySelector(".menuContainer"),o=document.querySelector(".mainLogo"),i=document.querySelector(".menuClose"),u=document.querySelector(".createProj"),s=new Image;s.src=e,s.classList.add("main-menu-logo");const c=new Image;c.src=n,c.classList.add("main-logo");const l=new Image;l.src=r,l.classList.add("menuClose");const d=new Image;d.src=a,d.classList.add("addProjButton"),t.appendChild(s),o.appendChild(c),i.appendChild(l),u.appendChild(d);const f=document.querySelector(".sidebar-menu"),h=document.querySelector(".allTasksSide"),v=document.querySelector(".importantHighTasksSide"),m=document.querySelector(".todayTasksSide"),w=document.querySelector(".weekTasksSide"),y=document.querySelector(".newProjectOverlay");t.addEventListener("click",(function(){f.style.animation="menuSlideOn 1.5s forwards"})),i.addEventListener("click",(function(){f.style.animation="menuSlideClose 1.5s forwards"})),u.addEventListener("click",(function(){f.style.animation="menuSlideClose 1.5s forwards",y.style.animation="projectSlideDown 1.5s forwards"})),f.addEventListener("click",(t=>{"SPAN"===t.target.tagName&&Tn(mn(t.target.textContent))})),h.addEventListener("click",Ln),v.addEventListener("click",jn),m.addEventListener("click",En),w.addEventListener("click",Un)}(),function(){const t=document.querySelector(".closeButton"),e=document.querySelector(".submitButton");t.addEventListener("click",(function(){s.style.animation="projectSlideUp 1.5s forwards",l()})),e.addEventListener("click",(function(){s.style.animation="projectSlideUp 1.5s forwards";const t=function(){const t=document.getElementById("title").value;let e=document.getElementById("description").value;if(t){const n=new u(t,e);return Pn.push(n),localStorage.setItem("projects",JSON.stringify(Pn)),n}return c(),l(),void(s.style.animation="projectSlideDown 1.5s forwards")}();fn?(function(t){for(let e=0;e<Pn.length;e++)Pn[e].title==t&&(Pn[e].title=Pn[Pn.length-1].title,Pn[e].description=Pn[Pn.length-1].description,localStorage.setItem("projects",JSON.stringify(Pn)))}(hn.textContent),function(t){const e=Mn(".sidebarProject").children;for(let n=0;n<e.length;n++)e[n].textContent==t&&(e[n].textContent=Pn[e.length].title)}(hn.textContent),Mn(".projectNameMain").textContent=Pn[Pn.length-1].title,Pn.splice(Pn.length-1,1),localStorage.setItem("projects",JSON.stringify(Pn)),fn=!1):(t&&(bn(t.title),Tn(t)),l())}))}();const On=new u("defaultProject","This is a default project. You can also create your own :)");Pn[0]=On,Tn(On),bn("defaultProject")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,