(()=>{"use strict";var t={d:(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})}};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),t.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var i=o.length-1;i>-1&&!e;)e=o[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();var e={};t.r(e),t.d(e,{Ey:()=>m,fr:()=>g});const n=t.p+"abbfad808c2786a6a2d4.png",o=t.p+"986e98635b18601755cf.png",i=t.p+"177a54134d0bd5aefd06.png",s=t.p+"edb755c23d1ebcf9c7a4.png",r=t.p+"c9c7160b568bb10d504c.png";class c{constructor(t,e,n,o,i){this.tTitle=t,this.tDesc=e,this.tDue=n,this.tPrio=o,this.tProj=i}set tTitle(t){this._tTitle=t}set tDesc(t){this._tDesc=t}set tDue(t){this._tDue=t}set tPrio(t){this._tPrio=t}set tProj(t){this._tProj=t}get tTitle(){return this._tTitle}get tDesc(){return this._tDesc}get tDue(){return this._tDue}get tPrio(){return this._tPrio}get tProj(){return this._tProj}}class l{constructor(t,e){this.title=t,this.description=e,this.toDos=[]}getLastTask(){return this.toDos[this.toDos.length-1]}editTask(t){for(let e=0;e<this.toDos.length;e++)this.toDos[e].tTitle==t&&(this.toDos[e].tTitle=this.toDos[this.toDos.length-1].tTitle,this.toDos[e].tDesc=this.toDos[this.toDos.length-1].tDesc,this.toDos[e].tDue=this.toDos[this.toDos.length-1].tDue,this.toDos[e].tPrio=this.toDos[this.toDos.length-1].tPrio,this.toDos[e].tProj=this.toDos[this.toDos.length-1].tProj)}newTask(t,e,n,o,i){let s=new c(t,e,n,o,i);return this.toDos.push(s),s}findTask(t){for(var e=0;e<this.toDos.length;e++)if(this.toDos[e].tTitle==t)return this.toDos[e]}removeTaskFromArr(t){for(var e=0;e<this.toDos.length;e++)this.toDos[e].tTitle==t&&this.toDos.splice(e,1)}printTasks(){console.log("current tasks in project: ");for(var t=0;t<this.toDos.length;t++)console.log(this.toDos[t].tTitle)}get numOfTasks(){return this.toDos.length}get title(){return this._title}get description(){return this._description}get toDoList(){return this.toDos}set title(t){this._title=t}set description(t){this._description=t}}const a=document.querySelector(".newProjectOverlay");function d(){const t=document.querySelector(".errorProjectOverlay");t.style.animation="projectSlideDown 1.5s forwards",setTimeout((function(){t.style.animation="projectSlideUp 1.5s forwards"}),2500)}function u(){document.getElementById("title").value="",document.getElementById("description").value=""}function p(t){const n=document.querySelector(".todoUL"),o=document.createElement("li"),s=document.createElement("div");s.textContent=t.tDue,s.classList.add("dateTaskDisp");const c=document.createElement("div"),l=document.createElement("input");l.type="checkbox";const a=document.createElement("input");a.type="date",a.value=t.tDue;const d=document.createElement("div"),u=document.createElement("div"),p=new Image;p.src=r,p.classList.add("taskProjEdit");const m=new Image;m.src=i,m.classList.add("taskProjRemove"),d.appendChild(p),u.appendChild(m),o.textContent=t.tTitle,c.appendChild(d),c.appendChild(u),c.appendChild(l),c.classList.add("taskButtons"),o.appendChild(c),o.appendChild(a),o.classList.add("todo"),n.appendChild(o),(0,e.taskEListeners)()}const m=B(".newTaskOverlay"),h=B(".taskCloseButton"),f=B(".taskSubmitButton");function g(){h.addEventListener("click",(function(){D(),m.style.animation="projectSlideUp 1.5s forwards"})),f.addEventListener("click",v)}function v(){if(m.style.animation="projectSlideUp 1.5s forwards",console.log("taskEditButton bool value: "+taskEditButton),taskEditButton)S(B(".projectNameMain").textContent).getLastTask(),y();else{const t=function(t){const e=document.getElementById("tTitle").value,n=document.getElementById("tDescription").value,o=document.getElementById("tDueDate").value,i=document.getElementById("tTaskPrio").value,s=S(B(".projectNameMain").textContent);if(e&&o){const t=s.newTask(e,n,o,i,s.title);return D(),t}return d(),D(),void(m.style.animation="projectSlideDown 1.5s forwards")}();t&&p(t),D(),y()}}function y(){f.removeEventListener("click",v)}function D(){document.getElementById("tTitle").value="",document.getElementById("tDescription").value="",document.getElementById("tDueDate").value="",document.getElementById("tTaskPrio").value="Select One"}const j=document.querySelector(".newProjectOverlay");let C=!1,E=null;var w=function(t){const e=t.target.matches(".projEdit"),n=t.target.matches(".projRemove"),o=t.target.matches(".projAdd"),i=B(".projectNameMain");if(E=i,e)s=i.textContent,j.style.animation="projectSlideDown 1.5s forwards",B("#title").value=s,C=!0;else if(n){!function(t){const e=B(".sidebarProject"),n=e.children;for(let o=0;o<n.length;o++)n[o].textContent==t&&e.removeChild(n[o])}(i.textContent),function(t){for(let e=0;e<T.length;e++)T[e].title==t&&T.splice(e,1)}(i.textContent),b(),console.log("current projects in array are: ");for(let t=0;t<T.length;t++)console.log(T[t].title)}else o&&(m.style.animation="projectSlideDown 1.5s forwards",g());var s};function S(t){let e=0;for(let n=0;n<T.length;n++)if(e=n,T[n].title==t)return console.log("project found"),T[n]}const k=B(".projectSection");function L(t){const e=B(".sidebarProject");let n=document.createElement("span");n.textContent=t,n.classList.add("projectNameSidebar"),e.appendChild(n)}function P(t){b();const e=document.createElement("div"),n=document.createElement("ul");n.classList.add("todoUL");const o=document.createElement("input");o.type="checkbox",o.classList.add("projectCheckbox");const c=document.createElement("span");if(t.title.length>30){let e=t.title.slice(0,31);c.textContent=e+"..."}else c.textContent=t.title;c.classList.add("projectNameMain");const l=document.createElement("div"),a=document.createElement("div"),d=document.createElement("div"),u=document.createElement("div"),m=new Image;m.src=s,m.classList.add("projAdd");const h=new Image;h.src=r,h.classList.add("projEdit");const f=new Image;f.src=i,f.classList.add("projRemove"),a.appendChild(m),d.appendChild(h),u.appendChild(f),l.appendChild(a),l.appendChild(d),l.appendChild(u),l.classList.add("projectOptions"),e.appendChild(o),e.appendChild(c),e.appendChild(l),e.classList.add("project"),k.appendChild(e),k.appendChild(n),function(t){const e=t.toDoList;if(e)for(var n=0;n<e.length;n++)p(e[n])}(t),document.addEventListener("click",w)}function b(){for(document.removeEventListener("click",w);k.firstChild;)k.removeChild(k.firstChild)}let T=[];function B(t){return document.querySelector(t)}!function(){const t=document.querySelector(".menuContainer"),e=document.querySelector(".mainLogo"),r=document.querySelector(".menuClose"),c=document.querySelector(".createProj"),l=new Image;l.src=n,l.classList.add("main-menu-logo");const a=new Image;a.src=o,a.classList.add("main-logo");const d=new Image;d.src=i,d.classList.add("menuClose");const u=new Image;u.src=s,u.classList.add("addProjButton"),t.appendChild(l),e.appendChild(a),r.appendChild(d),c.appendChild(u);const p=document.querySelector(".sidebar-menu"),m=document.querySelector(".newProjectOverlay");t.addEventListener("click",(function(){p.style.animation="menuSlideOn 1.5s forwards"})),r.addEventListener("click",(function(){p.style.animation="menuSlideClose 1.5s forwards"})),c.addEventListener("click",(function(){p.style.animation="menuSlideClose 1.5s forwards",m.style.animation="projectSlideDown 1.5s forwards"})),p.addEventListener("click",(t=>{"SPAN"===t.target.tagName&&P(S(t.target.textContent))}))}(),function(){const t=document.querySelector(".closeButton"),e=document.querySelector(".submitButton");t.addEventListener("click",(function(){a.style.animation="projectSlideUp 1.5s forwards",u()})),e.addEventListener("click",(function(){a.style.animation="projectSlideUp 1.5s forwards";const t=function(){const t=document.getElementById("title").value;let e=document.getElementById("description").value;if(t){const n=new l(t,e);return T.push(n),n}return d(),u(),void(a.style.animation="projectSlideDown 1.5s forwards")}();C?(function(t){for(let e=0;e<T.length;e++)T[e].title==t&&(T[e].title=T[T.length-1].title,T[e].description=T[T.length-1].description)}(E.textContent),function(t){const e=B(".sidebarProject").children;for(let n=0;n<e.length;n++)e[n].textContent==t&&(e[n].textContent=T[e.length].title)}(E.textContent),B(".projectNameMain").textContent=T[T.length-1].title,T.splice(T.length-1,1),C=!1):(t&&(L(t.title),P(t)),u())}))}();const I=new l("defaultProject","This is a default project. You can also create your own :)");T[0]=I,P(I),L("defaultProject")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RyxPQUFRQyxJQUN4QzJHLEVBQW9CM0csR0FBR2dFLGFBQWV5QyxJQUVyQ0UsRUFBb0IzRyxHQUFHZ0UsWUFBYytDLEVBQVFKLEVBQW9CNUcsUUFBUXVCLE1BR3JGLENKZFl3SSxDQUFxQjdELEVBQVdqQyxhSWlCckIsRUFBSSxvQkFDWkEsWUFBYytDLEVBQVFBLEVBQVFoSCxPQUFPLEdBQUd1QixNSmhCM0N5RixFQUFReEUsT0FBT3dFLEVBQVFoSCxPQUFPLEVBQUUsR0FDaENpRyxHQUFvQixJQUVqQnVELElBQ0NuQyxFQUFvQm1DLEVBQWFqSSxPQUNqQ2lHLEVBQXFCZ0MsSUFFekIvRixJQUVSLEdBQ0osQ016QkF1RyxHQUNBLE1BQU1DLEVBQVUsSUFBSTNJLEVBQVEsaUJBQWtCLDhEQUM5QzBGLEVBQVEsR0FBS2lELEVBQ2J6QyxFQUFxQnlDLEdBQ3JCNUMsRUFBb0IsaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vZGludG9kb2xpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vb2RpbnRvZG9saXN0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9vZGludG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9vZGludG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9vZGludG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9vZGludG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vb2RpbnRvZG9saXN0Ly4vc3JjL3Rhc2tDbGFzcy5qcyIsIndlYnBhY2s6Ly9vZGludG9kb2xpc3QvLi9zcmMvcHJvamVjdENsYXNzLmpzIiwid2VicGFjazovL29kaW50b2RvbGlzdC8uL3NyYy9wcm9qZWN0Rm9ybS5qcyIsIndlYnBhY2s6Ly9vZGludG9kb2xpc3QvLi9zcmMvdGFza0RPTS5qcyIsIndlYnBhY2s6Ly9vZGludG9kb2xpc3QvLi9zcmMvdGFza0Zvcm0uanMiLCJ3ZWJwYWNrOi8vb2RpbnRvZG9saXN0Ly4vc3JjL3Byb2plY3RFdmVudExpc3RlbmVycy5qcyIsIndlYnBhY2s6Ly9vZGludG9kb2xpc3QvLi9zcmMvcHJvamVjdERPTS5qcyIsIndlYnBhY2s6Ly9vZGludG9kb2xpc3QvLi9zcmMvbWVudUV2ZW50TGlzdGVuZXJzLmpzIiwid2VicGFjazovL29kaW50b2RvbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHtcblx0XHRcdHZhciBpID0gc2NyaXB0cy5sZW5ndGggLSAxO1xuXHRcdFx0d2hpbGUgKGkgPiAtMSAmJiAhc2NyaXB0VXJsKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiZXhwb3J0IGNsYXNzIFRhc2t7XG4gICAgY29uc3RydWN0b3IodFRpdGxlLCB0RGVzYywgdER1ZSwgdFByaW8sIHRQcm9qKXtcbiAgICAgICAgdGhpcy50VGl0bGUgPSB0VGl0bGU7XG4gICAgICAgIHRoaXMudERlc2MgPSB0RGVzYztcbiAgICAgICAgdGhpcy50RHVlID0gdER1ZTtcbiAgICAgICAgdGhpcy50UHJpbyA9IHRQcmlvO1xuICAgICAgICB0aGlzLnRQcm9qID0gdFByb2o7XG4gICAgfVxuICAgIHNldCB0VGl0bGUobmV3dFRpdGxlKXtcbiAgICAgICAgdGhpcy5fdFRpdGxlID0gbmV3dFRpdGxlO1xuICAgIH1cbiAgICBzZXQgdERlc2MobmV3dERlc2Mpe1xuICAgICAgICB0aGlzLl90RGVzYyA9IG5ld3REZXNjO1xuICAgIH1cbiAgICBzZXQgdER1ZShuZXd0RHVlKXtcbiAgICAgICAgdGhpcy5fdER1ZSA9IG5ld3REdWU7XG4gICAgfVxuICAgIHNldCB0UHJpbyhuZXd0UHJpbyl7XG4gICAgICAgIHRoaXMuX3RQcmlvID0gbmV3dFByaW87XG4gICAgfVxuICAgIHNldCB0UHJvaihuZXd0UHJvail7XG4gICAgICAgIHRoaXMuX3RQcm9qID0gbmV3dFByb2o7XG4gICAgfVxuXG4gICAgZ2V0IHRUaXRsZSgpe1xuICAgICAgICByZXR1cm4gdGhpcy5fdFRpdGxlO1xuICAgIH1cbiAgICBnZXQgdERlc2MoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3REZXNjO1xuICAgIH1cbiAgICBnZXQgdER1ZSgpe1xuICAgICAgICByZXR1cm4gdGhpcy5fdER1ZTtcbiAgICB9XG4gICAgZ2V0IHRQcmlvKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl90UHJpbztcbiAgICB9XG4gICAgZ2V0IHRQcm9qKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl90UHJvajtcbiAgICB9XG59IiwiaW1wb3J0IHsgVGFzayB9IGZyb20gXCIuL3Rhc2tDbGFzc1wiO1xuXG5leHBvcnQgY2xhc3MgUHJvamVjdHtcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSwgZGVzY3JpcHRpb24pe1xuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy50b0RvcyA9IFtdO1xuICAgIH1cblxuICAgIGdldExhc3RUYXNrKCl7XG4gICAgICAgIHJldHVybiB0aGlzLnRvRG9zW3RoaXMudG9Eb3MubGVuZ3RoLTFdO1xuICAgIH1cblxuICAgIGVkaXRUYXNrKHRhc2tOYW1lKXtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMudG9Eb3MubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgaWYodGhpcy50b0Rvc1tpXS50VGl0bGUgPT0gdGFza05hbWUpe1xuICAgICAgICAgICAgICAgIHRoaXMudG9Eb3NbaV0udFRpdGxlID0gdGhpcy50b0Rvc1t0aGlzLnRvRG9zLmxlbmd0aC0xXS50VGl0bGU7XG4gICAgICAgICAgICAgICAgdGhpcy50b0Rvc1tpXS50RGVzYyA9IHRoaXMudG9Eb3NbdGhpcy50b0Rvcy5sZW5ndGgtMV0udERlc2M7XG4gICAgICAgICAgICAgICAgdGhpcy50b0Rvc1tpXS50RHVlID0gdGhpcy50b0Rvc1t0aGlzLnRvRG9zLmxlbmd0aC0xXS50RHVlO1xuICAgICAgICAgICAgICAgIHRoaXMudG9Eb3NbaV0udFByaW8gPSB0aGlzLnRvRG9zW3RoaXMudG9Eb3MubGVuZ3RoLTFdLnRQcmlvO1xuICAgICAgICAgICAgICAgIHRoaXMudG9Eb3NbaV0udFByb2ogPSB0aGlzLnRvRG9zW3RoaXMudG9Eb3MubGVuZ3RoLTFdLnRQcm9qO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmV3VGFzayhUdGl0bGUsIFRkZXNjLCBUZHVlLCBUcHJpbywgVHByb2ope1xuICAgICAgICBsZXQgdCA9IG5ldyBUYXNrKFR0aXRsZSwgVGRlc2MsIFRkdWUsIFRwcmlvLCBUcHJvaik7XG4gICAgICAgIHRoaXMudG9Eb3MucHVzaCh0KTsvL3BsYWNlZCB1bmRlcnNjb3JlXG4gICAgICAgIHJldHVybiB0O1xuICAgIH1cblxuICAgIGZpbmRUYXNrKHRpdGxlTmFtZSl7XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLnRvRG9zLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGlmKHRoaXMudG9Eb3NbaV0udFRpdGxlID09IHRpdGxlTmFtZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9Eb3NbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVUYXNrRnJvbUFycih0aXRsZU5hbWUpe1xuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy50b0Rvcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBpZih0aGlzLnRvRG9zW2ldLnRUaXRsZSA9PSB0aXRsZU5hbWUpe1xuICAgICAgICAgICAgICAgIHRoaXMudG9Eb3Muc3BsaWNlKGksMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcmludFRhc2tzKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY3VycmVudCB0YXNrcyBpbiBwcm9qZWN0OiBcIik7XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLnRvRG9zLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMudG9Eb3NbaV0udFRpdGxlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBudW1PZlRhc2tzKCl7XG4gICAgICAgIHJldHVybiB0aGlzLnRvRG9zLmxlbmd0aDsvL3BsYWNlZCB1bmRlcnNjb3JlXG4gICAgfVxuXG4gICAgZ2V0IHRpdGxlKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl90aXRsZTtcbiAgICB9XG4gICAgZ2V0IGRlc2NyaXB0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXNjcmlwdGlvbjtcbiAgICB9XG4gICAgZ2V0IHRvRG9MaXN0KCl7Ly9nZXQgYXJyYXkgdGhlbiBwdXNoIGEgdG9Eb1xuICAgICAgICByZXR1cm4gdGhpcy50b0RvcztcbiAgICB9XG5cbiAgICBzZXQgdGl0bGUobmV3VGl0bGUpe1xuICAgICAgICB0aGlzLl90aXRsZSA9IG5ld1RpdGxlO1xuICAgIH1cbiAgICBzZXQgZGVzY3JpcHRpb24obmV3RGVzYyl7XG4gICAgICAgIHRoaXMuX2Rlc2NyaXB0aW9uID0gbmV3RGVzYztcbiAgICB9XG5cbn0iLCJpbXBvcnQgeyBQcm9qZWN0IH0gZnJvbSBcIi4vcHJvamVjdENsYXNzXCI7XG5pbXBvcnQgeyBwcm9qQXJyIH0gZnJvbSBcIi4vbWVudUV2ZW50TGlzdGVuZXJzXCI7XG5pbXBvcnQgeyBhZGRQcm9qZWN0VG9TaWRlYmFyLCBlZGl0UHJvamVjdEluU2lkZWJhciwgZGlzcGxheVByb2plY3RJbk1haW4sIGVkaXRQcm9qZWN0TmFtZU1haW4gfSBmcm9tIFwiLi9wcm9qZWN0RE9NXCI7XG5pbXBvcnQgeyBfdGVzdGVyaW5nLCBlZGl0QnV0dG9uQ2xpY2tlZCwgY3VyclRpdGxlMiB9IGZyb20gXCIuL3Byb2plY3RFdmVudExpc3RlbmVyc1wiO1xuXG5jb25zdCBwcm9qT3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmV3UHJvamVjdE92ZXJsYXlcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0T3ZlcmxheVN0dWZmKCl7XG4gICAgLy9idXR0b25zXG4gICAgY29uc3QgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNsb3NlQnV0dG9uXCIpO1xuICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3VibWl0QnV0dG9uXCIpO1xuXG4gICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICBwcm9qT3ZlcmxheS5zdHlsZS5hbmltYXRpb24gPSAncHJvamVjdFNsaWRlVXAgMS41cyBmb3J3YXJkcyc7XG4gICAgICAgIHByb2plY3RGb3JtQ2xlYXIoKTtcbiAgICB9KVxuICAgIHN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgIHByb2pPdmVybGF5LnN0eWxlLmFuaW1hdGlvbiA9ICdwcm9qZWN0U2xpZGVVcCAxLjVzIGZvcndhcmRzJztcbiAgICAgICAgY29uc3QgcHJvamVjdFBhcmFtID0gZXh0cmFjdERhdGFGb3JQcm9qZWN0KCk7XG4gICAgICAgIGlmKGVkaXRCdXR0b25DbGlja2VkKXtcbiAgICAgICAgICAgIGVkaXRQcm9qZWN0SW5BcnIoY3VyclRpdGxlMi50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICBlZGl0UHJvamVjdEluU2lkZWJhcihjdXJyVGl0bGUyLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgIGVkaXRQcm9qZWN0TmFtZU1haW4oKTtcbiAgICAgICAgICAgIHByb2pBcnIuc3BsaWNlKHByb2pBcnIubGVuZ3RoLTEsMSk7Ly9SRU1PVkUgVEhFIExBU1QgUFJPSkVDVCBJTiBBUlJBWS4uTk9XIFVTRUxFU1NcbiAgICAgICAgICAgIGVkaXRCdXR0b25DbGlja2VkID0gZmFsc2U7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgaWYocHJvamVjdFBhcmFtKXtcbiAgICAgICAgICAgICAgICBhZGRQcm9qZWN0VG9TaWRlYmFyKHByb2plY3RQYXJhbS50aXRsZSkvL3RoaXMgd2lsbCBiZSBpbiBwcm9qZWN0RE9NLmpzIGZpbGVcbiAgICAgICAgICAgICAgICBkaXNwbGF5UHJvamVjdEluTWFpbihwcm9qZWN0UGFyYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvamVjdEZvcm1DbGVhcigpO1xuICAgICAgICB9XG4gICAgfSlcbn1cblxuZnVuY3Rpb24gZWRpdFByb2plY3RJbkFycihyZXBsYWNlVGl0bGUpe1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwcm9qQXJyLmxlbmd0aDsgaSsrKXsvL2ZvcihsZXQgaSA9IDA7IGkgPCBwcm9qQXJyLmxlbmd0aC0xOyBpKyspe1xuICAgICAgICBpZihwcm9qQXJyW2ldLnRpdGxlID09IHJlcGxhY2VUaXRsZSl7XG4gICAgICAgICAgICBwcm9qQXJyW2ldLnRpdGxlID0gcHJvakFycltwcm9qQXJyLmxlbmd0aC0xXS50aXRsZTtcbiAgICAgICAgICAgIHByb2pBcnJbaV0uZGVzY3JpcHRpb24gPSBwcm9qQXJyW3Byb2pBcnIubGVuZ3RoLTFdLmRlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0RGF0YUZvclByb2plY3QoKXtcbiAgICBjb25zdCB0aXRsZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aXRsZVwiKS52YWx1ZVxuICAgIGxldCBkZXNjSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRlc2NyaXB0aW9uXCIpLnZhbHVlO1xuXG4gICAgaWYodGl0bGVJbnB1dCl7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJkZXRlY3RlZCB0aXRsZVwiKTsvL2RlYnVnZ2luZ1xuICAgICAgICBjb25zdCBwcm9qZWN0TWFkZSA9IG5ldyBQcm9qZWN0KHRpdGxlSW5wdXQsIGRlc2NJbnB1dCk7XG4gICAgICAgIHByb2pBcnIucHVzaChwcm9qZWN0TWFkZSk7XG4gICAgICAgIHJldHVybiBwcm9qZWN0TWFkZTtcbiAgICB9ZWxzZXtcbiAgICAgICAgZGlzcGxheU5lZWRUaXRsZSgpOy8vIENBTiBJTlNFUlQgRE9NIE1BTklQVUxBVElPTiBUTyBTSElGVCBET1dOIFRIRSBFUlJPUiBPVkVSTEFZIDopXG4gICAgICAgIHByb2plY3RGb3JtQ2xlYXIoKTtcbiAgICAgICAgcHJvak92ZXJsYXkuc3R5bGUuYW5pbWF0aW9uID0gXCJwcm9qZWN0U2xpZGVEb3duIDEuNXMgZm9yd2FyZHNcIjtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlOZWVkVGl0bGUoKXtcbiAgICBjb25zdCBlcnJvck92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmVycm9yUHJvamVjdE92ZXJsYXlcIik7XG4gICAgZXJyb3JPdmVybGF5LnN0eWxlLmFuaW1hdGlvbiA9IFwicHJvamVjdFNsaWRlRG93biAxLjVzIGZvcndhcmRzXCJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgIGVycm9yT3ZlcmxheS5zdHlsZS5hbmltYXRpb24gPSBcInByb2plY3RTbGlkZVVwIDEuNXMgZm9yd2FyZHNcIlxuICAgIH0sIDI1MDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvamVjdEZvcm1DbGVhcigpe1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGl0bGVcIikudmFsdWUgPSBcIlwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGVzY3JpcHRpb25cIikudmFsdWUgPSBcIlwiO1xufSIsImltcG9ydCBFZGl0IGZyb20gJy4uL3NyYy9pbWdzL2VkaXQucG5nJztcbmltcG9ydCBSZW1vdmUgZnJvbSAnLi4vc3JjL2ltZ3MvY2xvc2UucG5nJztcbmltcG9ydCB7IF90YXNrVGVzdGVyaW5nIH0gZnJvbSAnLi90YXNrRXZlbnRMaXN0ZW5lcnMnO1xuaW1wb3J0IHsgZHFzIH0gZnJvbSAnLi9tZW51RXZlbnRMaXN0ZW5lcnMnO1xuaW1wb3J0IHsgdGFza0VMaXN0ZW5lcnMgfSBmcm9tICcuL3Rhc2tGb3JtJztcblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlUYXNrSW5NYWluKHRhc2spey8vKHByb2plY3QsIHVsKSBtaWdodCBiZSBuZWVkZWQgYXMgcGFyYW1zIGJ1dCBwcm9icyBub3RcbiAgICBjb25zdCBwcm9qVUwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvZG9VTFwiKTtcblxuICAgIGNvbnN0IHRhc2tMSSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG5cbiAgICBjb25zdCBkYXRlRGlzcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRhdGVEaXNwLnRleHRDb250ZW50ID0gdGFzay50RHVlO1xuICAgIGRhdGVEaXNwLmNsYXNzTGlzdC5hZGQoXCJkYXRlVGFza0Rpc3BcIik7XG5cbiAgICBjb25zdCBidXR0b25EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGNvbnN0IHRhc2tDaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgdGFza0NoZWNrYm94LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cbiAgICBjb25zdCB0YXNrRGF0ZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICB0YXNrRGF0ZUlucHV0LnR5cGUgPSBcImRhdGVcIjtcbiAgICB0YXNrRGF0ZUlucHV0LnZhbHVlID0gdGFzay50RHVlO1xuXG4gICAgY29uc3QgdGFza0VkaXREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCB0YXNrUmVtb3ZlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICBjb25zdCB0YXNrRWRpdEljb24gPSBuZXcgSW1hZ2UoKTtcbiAgICB0YXNrRWRpdEljb24uc3JjID0gRWRpdDtcbiAgICB0YXNrRWRpdEljb24uY2xhc3NMaXN0LmFkZCgndGFza1Byb2pFZGl0Jyk7XG5cbiAgICBjb25zdCB0YXNrUmVtb3ZlSWNvbiA9IG5ldyBJbWFnZSgpO1xuICAgIHRhc2tSZW1vdmVJY29uLnNyYyA9IFJlbW92ZTtcbiAgICB0YXNrUmVtb3ZlSWNvbi5jbGFzc0xpc3QuYWRkKCd0YXNrUHJvalJlbW92ZScpO1xuXG4gICAgdGFza0VkaXREaXYuYXBwZW5kQ2hpbGQodGFza0VkaXRJY29uKTtcbiAgICB0YXNrUmVtb3ZlRGl2LmFwcGVuZENoaWxkKHRhc2tSZW1vdmVJY29uKTtcblxuICAgIHRhc2tMSS50ZXh0Q29udGVudCA9IHRhc2sudFRpdGxlOy8vdGFzay50VGl0bGUgKyBcIiAgXCIgKyB0YXNrLnREdWVcblxuICAgIGJ1dHRvbkRpdi5hcHBlbmRDaGlsZCh0YXNrRWRpdERpdik7XG4gICAgYnV0dG9uRGl2LmFwcGVuZENoaWxkKHRhc2tSZW1vdmVEaXYpO1xuICAgIGJ1dHRvbkRpdi5hcHBlbmRDaGlsZCh0YXNrQ2hlY2tib3gpO1xuXG4gICAgYnV0dG9uRGl2LmNsYXNzTGlzdC5hZGQoJ3Rhc2tCdXR0b25zJyk7XG5cbiAgICAvL3Rhc2tMSS5hcHBlbmRDaGlsZChkYXRlRGlzcCk7XG5cbiAgICB0YXNrTEkuYXBwZW5kQ2hpbGQoYnV0dG9uRGl2KTtcblxuICAgIHRhc2tMSS5hcHBlbmRDaGlsZCh0YXNrRGF0ZUlucHV0KTtcblxuICAgIHRhc2tMSS5jbGFzc0xpc3QuYWRkKFwidG9kb1wiKTtcblxuICAgIHByb2pVTC5hcHBlbmRDaGlsZCh0YXNrTEkpO1xuXG4gICAgdGFza0VMaXN0ZW5lcnMoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyVGFza01haW4odGFzayl7XG4gICAgLy9nZXQgdGFzayB1bCBzZWN0aW9uIGFuZCByZW1vdmUgbGkgdmlhIHBhcmFtZXRlcihsaWtlIHJlbW92aW5nIGEgcHJvamVjdCBmcm9tIHNpZGViYXIpXG4gICAgY29uc3QgdWxQYXJlbnQgPSBkcXMoXCIudG9kb1VMXCIpO1xuICAgIGNvbnN0IGxpVGFza0NoaWxkcmVuID0gdWxQYXJlbnQuY2hpbGRyZW47XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGxpVGFza0NoaWxkcmVuLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgaWYobGlUYXNrQ2hpbGRyZW5baV0udGV4dENvbnRlbnQgPT0gdGFzayl7XG4gICAgICAgICAgICB1bFBhcmVudC5yZW1vdmVDaGlsZChsaVRhc2tDaGlsZHJlbltpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy9kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIF90YXNrVGVzdGVyaW5nKTtJRiBNVUxUSVBMRSBUQVNLUywgT1RIRVIgVEFTS1MgQlVUVE9OUyBXT05UIFdPUktcbn0iLCJpbXBvcnQgeyBkcXMgfSBmcm9tIFwiLi9tZW51RXZlbnRMaXN0ZW5lcnNcIjtcbmltcG9ydCB7IGZpbmRQcm9qZWN0SW5BcnIgfSBmcm9tIFwiLi9wcm9qZWN0RXZlbnRMaXN0ZW5lcnNcIjtcbmltcG9ydCB7IGRpc3BsYXlOZWVkVGl0bGUgfSBmcm9tIFwiLi9wcm9qZWN0Rm9ybVwiO1xuaW1wb3J0IHsgZGlzcGxheVRhc2tJbk1haW4gfSBmcm9tIFwiLi90YXNrRE9NXCI7XG5pbXBvcnQgeyBjbGVhclRhc2tNYWluIH0gZnJvbSBcIi4vdGFza0RPTVwiO1xuXG5leHBvcnQgY29uc3QgdGFza092ZXJsYXkgPSBkcXMoXCIubmV3VGFza092ZXJsYXlcIik7XG5jb25zdCB0YXNrQ2xvc2UgPSBkcXMoXCIudGFza0Nsb3NlQnV0dG9uXCIpO1xuY29uc3QgdGFza1N1Ym1pdCA9IGRxcyhcIi50YXNrU3VibWl0QnV0dG9uXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gdGFza092ZXJsYXlMaXN0ZW5lcnMoKXtcbiAgICB0YXNrQ2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICB0YXNrRm9ybUNsZWFyKCk7XG4gICAgICAgIHRhc2tPdmVybGF5LnN0eWxlLmFuaW1hdGlvbiA9IFwicHJvamVjdFNsaWRlVXAgMS41cyBmb3J3YXJkc1wiXG4gICAgfSk7XG4gICAgdGFza1N1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF90YXNrU3VibWl0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF90YXNrU3VibWl0KCl7XG4gICAgdGFza092ZXJsYXkuc3R5bGUuYW5pbWF0aW9uID0gXCJwcm9qZWN0U2xpZGVVcCAxLjVzIGZvcndhcmRzXCJcbiAgICBjb25zb2xlLmxvZyhcInRhc2tFZGl0QnV0dG9uIGJvb2wgdmFsdWU6IFwiICsgdGFza0VkaXRCdXR0b24pO1xuICAgIGlmKHRhc2tFZGl0QnV0dG9uKXtcbiAgICAgICAgLy9BREQgVEFTSyBVU0lORyBGVU5DVElPTiBGUk9NIHRhc2tET00uanMgZmlsZSAoZGlzcGxheVRhc2tJbk1haW4obW9kZGVkVGFzaykpXG4gICAgICAgIC8vUkVNT1ZFIE9MRCBUQVNLIFVTSU5HIEFMR09SSVRITSBGUk9NIFJFTU9WRVRBU0sgU0VDVElPTiAoZWRpdFRhc2sgaXMgdGFzayB0byBiZSByZW1vdmVkKVxuICAgICAgICAvLyAvLyAvLyAvLyAvL2NvbnN0IHRhc2tOYW1lMiA9IGdldFRhc2tOYW1lTGlcbiAgICAgICAgLy8gLy8gLy8gLy8gLy9pbnNlcnQgZWRpdCBhbGdvcml0aG0gaGVyZVxuICAgICAgICAvLyAvLyAvLyAvLyAvL2xldCB0YXNrTmFtZSA9IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC50ZXh0Q29udGVudDtcbiAgICAgICAgLy8gLy8gLy8gLy8gLy9jb25zb2xlLmxvZyhcInRhc2tOYW1lIGluIHRhc2tTdWJtaXQgcG9vcDogXCIgKyB0YXNrTmFtZS50ZXh0Q29udGVudCk7XG4gICAgICAgIGNvbnN0IHByb2pOYW1lRWQgPSBkcXMoXCIucHJvamVjdE5hbWVNYWluXCIpO1xuICAgICAgICBjb25zdCBwcm9qRWQgPSBmaW5kUHJvamVjdEluQXJyKHByb2pOYW1lRWQudGV4dENvbnRlbnQpO1xuICAgICAgICBjb25zdCBtb2RkZWRUYXNrID0gcHJvakVkLmdldExhc3RUYXNrKClcbiAgICAgICAgLy8gLy8gLy8gLy8gLy9wcm9qRWQuZWRpdFRhc2sodGFza05hbWUudGV4dENvbnRlbnQpOy8vTk9UIE5FRURFRD8/XG4gICAgICAgIC8vIC8vIC8vIC8vIC8vdGFza05hbWUudGV4dENvbnRlbnQgPSBtb2RlZFRhc2sudFRpdGxlOy8vTk9UIE5FRURFRD8/XG4gICAgICAgIC8vIC8vIC8vIC8vIGNoZWNrVUxDaGlsZHJlbkVkaXRUYXNrKGVkaXRUYXNrKTtcbiAgICAgICAgLy8gLy8gLy8gLy8gcHJvakVkLnJlbW92ZVRhc2tGcm9tQXJyKG1vZGRlZFRhc2sudFRpdGxlKTtcbiAgICAgICAgLy8gLy8gLy8gLy8gdGFza0VkaXRCdXR0b24gPSBmYWxzZTtcbiAgICAgICAgLy8gLy8gLy8gLy8gbW9kZGVkVGFzayA9IG51bGw7XG4gICAgICAgIGNsZWFyRXZMaXMoKTtcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgICAgY29uc3QgbWFkZVRhc2sgPSBleHRyYWN0RGF0YUZvclRhc2soKTtcbiAgICAgICAgaWYobWFkZVRhc2spe1xuICAgICAgICAgICAgZGlzcGxheVRhc2tJbk1haW4obWFkZVRhc2spOy8vY3VycmVudCBwcm9qZWN0IGlzIGFscmVhZHkgZGV0ZWN0ZWQgaW4gZXh0cmFjdERhdGFGb3JUYXNrIGZ1bmMuLm1heSBub3QgbmVlZCBwcm9qIGFuZCB1bCBhcyBwYXJhbXNcbiAgICAgICAgfVxuICAgICAgICB0YXNrRm9ybUNsZWFyKCk7XG4gICAgICAgIGNsZWFyRXZMaXMoKTsgICAgLy9ORUVEIFRPIEZJTkQgQSBXQVkgVE8gQ0xFQVIgRVZFTlRMSVNURU5FUiBTT01FV0hFUkUgRUxTRT8/Pz8/XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjbGVhckV2TGlzKCl7XG4gICAgdGFza1N1Ym1pdC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIF90YXNrU3VibWl0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3REYXRhRm9yVGFzayhwcm9qKXtcbiAgICBjb25zdCB0YXNrVGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRUaXRsZVwiKS52YWx1ZTtcbiAgICBjb25zdCB0YXNrRGVzYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidERlc2NyaXB0aW9uXCIpLnZhbHVlO1xuICAgIGNvbnN0IHRhc2tEdWVEYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0RHVlRGF0ZVwiKS52YWx1ZTtcbiAgICBjb25zdCB0YXNrUHJpbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidFRhc2tQcmlvXCIpLnZhbHVlO1xuICAgIFxuICAgIGNvbnN0IHRlbXAgPSBkcXMoXCIucHJvamVjdE5hbWVNYWluXCIpOy8vU0hPVUxEIE5PVCBCRSBORUVERUQgR0lWRU4gUEFSQU1cbiAgICBjb25zdCB0YXNrUHJvaiA9IHRlbXAudGV4dENvbnRlbnQ7XG5cbiAgICBjb25zdCBmbmRQcm9qID0gZmluZFByb2plY3RJbkFycih0YXNrUHJvaik7XG5cblxuICAgIGlmKHRhc2tUaXRsZSAmJiB0YXNrRHVlRGF0ZSl7XG4gICAgICAgIGNvbnN0IHRhc2tNYWRlID0gZm5kUHJvai5uZXdUYXNrKHRhc2tUaXRsZSwgdGFza0Rlc2MsIHRhc2tEdWVEYXRlLCB0YXNrUHJpbywgZm5kUHJvai50aXRsZSk7XG4gICAgICAgIHRhc2tGb3JtQ2xlYXIoKTtcbiAgICAgICAgcmV0dXJuIHRhc2tNYWRlO1xuICAgIH1lbHNle1xuICAgICAgICBkaXNwbGF5TmVlZFRpdGxlKCk7XG4gICAgICAgIHRhc2tGb3JtQ2xlYXIoKTtcbiAgICAgICAgdGFza092ZXJsYXkuc3R5bGUuYW5pbWF0aW9uID0gXCJwcm9qZWN0U2xpZGVEb3duIDEuNXMgZm9yd2FyZHNcIjtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRhc2tGb3JtQ2xlYXIoKXtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRUaXRsZVwiKS52YWx1ZSA9IFwiXCI7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0RGVzY3JpcHRpb25cIikudmFsdWUgPSBcIlwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidER1ZURhdGVcIikudmFsdWUgPSBcIlwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidFRhc2tQcmlvXCIpLnZhbHVlID0gXCJTZWxlY3QgT25lXCI7XG59IiwiaW1wb3J0IHsgZHFzIH0gZnJvbSBcIi4vbWVudUV2ZW50TGlzdGVuZXJzXCI7XG5pbXBvcnQgeyBwcm9qQXJyIH0gZnJvbSBcIi4vbWVudUV2ZW50TGlzdGVuZXJzXCI7XG5pbXBvcnQgeyBjbGVhck1haW4gfSBmcm9tIFwiLi9wcm9qZWN0RE9NXCI7XG5pbXBvcnQgeyB0YXNrT3ZlcmxheSwgdGFza092ZXJsYXlMaXN0ZW5lcnMgfSBmcm9tIFwiLi90YXNrRm9ybVwiO1xuaW1wb3J0IHsgcmVtb3ZlUHJvamVjdEZyb21TaWRlYmFyIH0gZnJvbSBcIi4vcHJvamVjdERPTVwiO1xuXG5jb25zdCBwcm9qT3ZlcmxheTEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5ld1Byb2plY3RPdmVybGF5XCIpO1xuZXhwb3J0IGxldCBlZGl0QnV0dG9uQ2xpY2tlZCA9IGZhbHNlO1xuZXhwb3J0IGxldCBjdXJyVGl0bGUyID0gbnVsbDsvLz0gZHFzKFwiLnByb2plY3ROYW1lTWFpblwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByb2plY3RFTGlzdGVuZXJzKCl7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfdGVzdGVyaW5nKVxufTtcblxuZXhwb3J0IHZhciBfdGVzdGVyaW5nID0gZnVuY3Rpb24oZSl7XG4gICAgLy9nbyB0aHJvdWhnIGFycmF5IGNvbXBhcmluZyB0aXRsZVxuICAgICAgICAvL3doZW4gZm91bmQgZmlsbCBwcm9qZWN0Rm9ybSBhbmQgZHJvcCBmb3JtIGRvd24gZm9yIHVzZXJcbiAgICAgICAgLy9pZiBzdWJtaXQgdGhlbiByZXBsYWNlIGluZm8gd2l0aCBuZXcgaW5mb1xuICAgICAgICAvL2Vsc2UgaWYgY2FuY2VsIHRoZW4gbGVhdmUgcHJvamVjdCBhcyBpdCB3YXNcbiAgICAgICAgY29uc3QgZWRpdEJ1dHRvbiA9IGUudGFyZ2V0Lm1hdGNoZXMoXCIucHJvakVkaXRcIik7XG4gICAgICAgIGNvbnN0IHJlbW92ZUJ1dHRvbiA9IGUudGFyZ2V0Lm1hdGNoZXMoXCIucHJvalJlbW92ZVwiKTtcbiAgICAgICAgY29uc3QgYWRkVGFza0J1dHRvbiA9IGUudGFyZ2V0Lm1hdGNoZXMoXCIucHJvakFkZFwiKTtcbiAgICAgICAgY29uc3QgY3VyclRpdGxlID0gZHFzKFwiLnByb2plY3ROYW1lTWFpblwiKTtcbiAgICAgICAgY3VyclRpdGxlMiA9IGN1cnJUaXRsZTtcbiAgICAgICAgaWYoZWRpdEJ1dHRvbil7Ly90aGlzIHdpbGwgYmUgZG9uZSBvbmNlICdyZW1vdmUnIGlzIGNvbXBsZXRlZFxuICAgICAgICAgICAgZWRpdEZvcm0oY3VyclRpdGxlLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgIGVkaXRCdXR0b25DbGlja2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKHJlbW92ZUJ1dHRvbil7XG4gICAgICAgICAgICAvL2NvbnN0IGN1cnJUaXRsZSA9IGRxcyhcIi5wcm9qZWN0TmFtZU1haW5cIik7XG4gICAgICAgICAgICByZW1vdmVQcm9qZWN0RnJvbVNpZGViYXIoY3VyclRpdGxlLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgIHJlbW92ZVByb2pBcnIoY3VyclRpdGxlLnRleHRDb250ZW50KTsvLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/XG4gICAgICAgICAgICBjbGVhck1haW4oKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY3VycmVudCBwcm9qZWN0cyBpbiBhcnJheSBhcmU6IFwiKTtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwcm9qQXJyLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhwcm9qQXJyW2ldLnRpdGxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKGFkZFRhc2tCdXR0b24pe1xuICAgICAgICAgICAgdGFza092ZXJsYXkuc3R5bGUuYW5pbWF0aW9uID0gXCJwcm9qZWN0U2xpZGVEb3duIDEuNXMgZm9yd2FyZHNcIjtcbiAgICAgICAgICAgIHRhc2tPdmVybGF5TGlzdGVuZXJzKCk7Ly9hZGQgcHJvaiBhcyBwYXJhbSBoZXJlISEhIGZpbmQgcHJvaiBvbiBsaW5lIGJlZm9yZSB0aGlzXG4gICAgICAgIH1cbn1cblxuZnVuY3Rpb24gZWRpdEZvcm0ocHJvamVjdFRpdGxlKXsvL3BhcmFtIGlzIGN1cnJlbnQgdGl0bGUgaXQgd2lsbCBmaWxsIHRoZSBpbnB1dCB0aXRsZSBib3hcbiAgICBwcm9qT3ZlcmxheTEuc3R5bGUuYW5pbWF0aW9uID0gJ3Byb2plY3RTbGlkZURvd24gMS41cyBmb3J3YXJkcyc7XG4gICAgY29uc3QgdGl0bGVJbiA9IGRxcyhcIiN0aXRsZVwiKTtcbiAgICB0aXRsZUluLnZhbHVlID0gcHJvamVjdFRpdGxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUHJvakFycih0aXRsZSl7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHByb2pBcnIubGVuZ3RoOyBpKyspe1xuICAgICAgICBpZihwcm9qQXJyW2ldLnRpdGxlID09IHRpdGxlKXtcbiAgICAgICAgICAgIHByb2pBcnIuc3BsaWNlKGksMSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kUHJvamVjdEluQXJyKHRpdGxlKXsvL01JR0hUIE5PVCBORUVEIFRISVMgTUlHSFQgTk9UIE5FRUQgVEhJUyBNSUdIVCBOT1QgTkVFRCBUSElTXG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgcHJvakFyci5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgaWYocHJvakFycltpXS50aXRsZSA9PSB0aXRsZSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInByb2plY3QgZm91bmRcIik7XG4gICAgICAgICAgICByZXR1cm4gcHJvakFycltpXTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgUmVtb3ZlIGZyb20gJy4uL3NyYy9pbWdzL2Nsb3NlLnBuZyc7XG5pbXBvcnQgQ3JlYXRlIGZyb20gJy4uL3NyYy9pbWdzL2FkZC5wbmcnO1xuaW1wb3J0IEVkaXQgZnJvbSAnLi4vc3JjL2ltZ3MvZWRpdC5wbmcnO1xuaW1wb3J0IHsgZHFzLCBwcm9qQXJyIH0gZnJvbSAnLi9tZW51RXZlbnRMaXN0ZW5lcnMnO1xuaW1wb3J0IHsgcHJvamVjdEVMaXN0ZW5lcnMgfSBmcm9tICcuL3Byb2plY3RFdmVudExpc3RlbmVycyc7XG5pbXBvcnQgeyBfdGVzdGVyaW5nIH0gZnJvbSAnLi9wcm9qZWN0RXZlbnRMaXN0ZW5lcnMnO1xuaW1wb3J0IHsgZGlzcGxheVRhc2tJbk1haW4gfSBmcm9tICcuL3Rhc2tET00nO1xuXG5jb25zdCBtYWluU2VjID0gZHFzKFwiLnByb2plY3RTZWN0aW9uXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkUHJvamVjdFRvU2lkZWJhcihwcm9qZWN0VGl0bGUpe1xuICAgIGNvbnN0IHByb2pTaWRlID0gZHFzKFwiLnNpZGViYXJQcm9qZWN0XCIpO1xuICAgIGxldCBwcm9qVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgcHJvalRpdGxlLnRleHRDb250ZW50ID0gcHJvamVjdFRpdGxlO1xuICAgIHByb2pUaXRsZS5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0TmFtZVNpZGViYXInKTtcbiAgICBwcm9qU2lkZS5hcHBlbmRDaGlsZChwcm9qVGl0bGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVByb2plY3RGcm9tU2lkZWJhcihwcm9qZWN0VGl0bGUpe1xuICAgIGNvbnN0IHNpZGViYXJQcm9qID0gZHFzKFwiLnNpZGViYXJQcm9qZWN0XCIpO1xuICAgIGNvbnN0IHNpZGViYXJQcm9qQ2hpbGRyZW4gPSBzaWRlYmFyUHJvai5jaGlsZHJlbjtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2lkZWJhclByb2pDaGlsZHJlbi5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGlmKHNpZGViYXJQcm9qQ2hpbGRyZW5baV0udGV4dENvbnRlbnQgPT0gcHJvamVjdFRpdGxlKXtcbiAgICAgICAgICAgIHNpZGViYXJQcm9qLnJlbW92ZUNoaWxkKHNpZGViYXJQcm9qQ2hpbGRyZW5baV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGVkaXRQcm9qZWN0SW5TaWRlYmFyKHByb2plY3RUaXRsZSl7XG4gICAgY29uc3Qgc2lkZWJhclByb2ogPSBkcXMoXCIuc2lkZWJhclByb2plY3RcIik7XG4gICAgY29uc3Qgc2lkZWJhclByb2pDaGlsZHJlbiA9IHNpZGViYXJQcm9qLmNoaWxkcmVuO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaWRlYmFyUHJvakNoaWxkcmVuLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgaWYoc2lkZWJhclByb2pDaGlsZHJlbltpXS50ZXh0Q29udGVudCA9PSBwcm9qZWN0VGl0bGUpe1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImZvdW5kIHNpZGViYXIgcHJvamVjdCBuYW1lZCBcIiArIHNpZGViYXJQcm9qQ2hpbGRyZW5baV0udGV4dENvbnRlbnQpOyBERUJVR1xuICAgICAgICAgICAgc2lkZWJhclByb2pDaGlsZHJlbltpXS50ZXh0Q29udGVudCA9IHByb2pBcnJbc2lkZWJhclByb2pDaGlsZHJlbi5sZW5ndGhdLnRpdGxlOy8vcHJvakFycltzaWRlYmFyUHJvakNoaWxkcmVuLmxlbmd0aC0xXS50aXRsZVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZWRpdFByb2plY3ROYW1lTWFpbigpe1xuICAgIGNvbnN0IE9HUHJvak5hbWUgPSBkcXMoXCIucHJvamVjdE5hbWVNYWluXCIpO1xuICAgIE9HUHJvak5hbWUudGV4dENvbnRlbnQgPSBwcm9qQXJyW3Byb2pBcnIubGVuZ3RoLTFdLnRpdGxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheVByb2plY3RJbk1haW4ocHJvamVjdCl7XG4gICAgY2xlYXJNYWluKCk7XG4gICAgY29uc3QgcHJvakRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgY29uc3QgdGFza1NlY1VMID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICB0YXNrU2VjVUwuY2xhc3NMaXN0LmFkZChcInRvZG9VTFwiKVxuICAgIFxuICAgIGNvbnN0IHByb2pDaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgcHJvakNoZWNrYm94LnR5cGUgPSBcImNoZWNrYm94XCI7XG4gICAgcHJvakNoZWNrYm94LmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0Q2hlY2tib3hcIik7XG5cbiAgICBcbiAgICBjb25zdCBwcm9qTmFtZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgaWYocHJvamVjdC50aXRsZS5sZW5ndGggPiAzMCl7XG4gICAgICAgIGxldCBtYWluTW9kUHJvalRpdGxlID0gcHJvamVjdC50aXRsZS5zbGljZSgwLDMxKTtcbiAgICAgICAgcHJvak5hbWVTcGFuLnRleHRDb250ZW50ID0gbWFpbk1vZFByb2pUaXRsZSArIFwiLi4uXCI7XG4gICAgfWVsc2V7XG4gICAgICAgIHByb2pOYW1lU3Bhbi50ZXh0Q29udGVudCA9IHByb2plY3QudGl0bGU7XG4gICAgfVxuICAgIHByb2pOYW1lU3Bhbi5jbGFzc0xpc3QuYWRkKFwicHJvamVjdE5hbWVNYWluXCIpO1xuXG4gICAgXG4gICAgY29uc3QgYnV0dG9uQ29udCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIFxuICAgIGNvbnN0IGFkZERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnN0IGVkaXREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCByZW1vdmVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGNvbnN0IGFkZEljb24gPSBuZXcgSW1hZ2UoKTtcbiAgICBhZGRJY29uLnNyYyA9IENyZWF0ZTtcbiAgICBhZGRJY29uLmNsYXNzTGlzdC5hZGQoJ3Byb2pBZGQnKTtcblxuICAgIGNvbnN0IGVkaXRJY29uID0gbmV3IEltYWdlKCk7XG4gICAgZWRpdEljb24uc3JjID0gRWRpdDtcbiAgICBlZGl0SWNvbi5jbGFzc0xpc3QuYWRkKCdwcm9qRWRpdCcpO1xuXG4gICAgY29uc3QgcmVtSWNvbiA9IG5ldyBJbWFnZSgpO1xuICAgIHJlbUljb24uc3JjID0gUmVtb3ZlO1xuICAgIHJlbUljb24uY2xhc3NMaXN0LmFkZCgncHJvalJlbW92ZScpO1xuXG4gICAgYWRkRGl2LmFwcGVuZENoaWxkKGFkZEljb24pO1xuICAgIGVkaXREaXYuYXBwZW5kQ2hpbGQoZWRpdEljb24pO1xuICAgIHJlbW92ZURpdi5hcHBlbmRDaGlsZChyZW1JY29uKTtcbiAgICBcbiAgICBidXR0b25Db250LmFwcGVuZENoaWxkKGFkZERpdik7XG4gICAgYnV0dG9uQ29udC5hcHBlbmRDaGlsZChlZGl0RGl2KTtcbiAgICBidXR0b25Db250LmFwcGVuZENoaWxkKHJlbW92ZURpdik7XG4gICAgYnV0dG9uQ29udC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdE9wdGlvbnNcIik7XG5cbiAgICBwcm9qRGl2LmFwcGVuZENoaWxkKHByb2pDaGVja2JveCk7XG4gICAgcHJvakRpdi5hcHBlbmRDaGlsZChwcm9qTmFtZVNwYW4pO1xuICAgIHByb2pEaXYuYXBwZW5kQ2hpbGQoYnV0dG9uQ29udCk7XG4gICAgcHJvakRpdi5jbGFzc0xpc3QuYWRkKFwicHJvamVjdFwiKTtcblxuICAgIG1haW5TZWMuYXBwZW5kQ2hpbGQocHJvakRpdik7XG4gICAgbWFpblNlYy5hcHBlbmRDaGlsZCh0YXNrU2VjVUwpO1xuICAgIFxuICAgIC8vY2hlY2sgZm9yIHRhc2tzIHdpdGggYSBsb29wIGFuZCBkaXNwbGF5IGVhY2hcbiAgICBjaGVja0ZvclRhc2tzKHByb2plY3QpO1xuXG4gICAgLy9jYWxsIGV2ZW50TGlzdGVuZXIgaGVyZVxuICAgIHByb2plY3RFTGlzdGVuZXJzKCk7Ly9XSUxMIEhBVkUgVE8gQUREIEVWRU5UIExJU1RFTkVSUyBGT1IgVEFTS1MgSEVSRT8/P1xufVxuXG5mdW5jdGlvbiBjaGVja0ZvclRhc2tzKHByb2ope1xuICAgIC8vZ2l2ZW4gcHJvaiBhcyBwYXJhbSB3ZSB3aWxsIGNoZWNrIGlmIGl0IGNvbnRhaW5zIGFueSB0YXNrcyB0aGF0IG5lZWQgdG8gYmUgY3JlYXRlZFxuICAgIGNvbnN0IHRhc2tBcnIgPSBwcm9qLnRvRG9MaXN0O1xuICAgIGlmKHRhc2tBcnIpe1xuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGFza0Fyci5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBkaXNwbGF5VGFza0luTWFpbih0YXNrQXJyW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyTWFpbigpe1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX3Rlc3RlcmluZyk7XG4gICAgd2hpbGUobWFpblNlYy5maXJzdENoaWxkKXtcbiAgICAgICAgbWFpblNlYy5yZW1vdmVDaGlsZChtYWluU2VjLmZpcnN0Q2hpbGQpXG4gICAgfVxufSIsImltcG9ydCBNZW51IGZyb20gJy4uL3NyYy9pbWdzL21lbnUucG5nJ1xuaW1wb3J0IEJyYW5kIGZyb20gJy4uL3NyYy9pbWdzL1dvcmtlckFudHNNb2QucG5nJztcbmltcG9ydCBDbG9zZSBmcm9tICcuLi9zcmMvaW1ncy9jbG9zZS5wbmcnO1xuaW1wb3J0IENyZWF0ZSBmcm9tICcuLi9zcmMvaW1ncy9hZGQucG5nJztcbmltcG9ydCB7IGRpc3BsYXlQcm9qZWN0SW5NYWluIH0gZnJvbSAnLi9wcm9qZWN0RE9NJztcbmltcG9ydCB7IGZpbmRQcm9qZWN0SW5BcnIgfSBmcm9tICcuL3Byb2plY3RFdmVudExpc3RlbmVycyc7XG5cbi8vSSBORUVEIFRPIEFERCBBIEdMT0JBTCBWQVJJQUJMRSBBUlJBWSBUSEFUIFNUT1JFUyBBTEwgVEhFIFBST0pFQ1RTIEhFUkVcbmV4cG9ydCBsZXQgcHJvakFyciA9IFtdO1xuXG5leHBvcnQgZnVuY3Rpb24gZHFzKGMpe1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVudUV2ZW50TGlzdGVuKCl7XG4gICAgY29uc3QgbWVudUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWVudUNvbnRhaW5lclwiKTtcbiAgICBjb25zdCBtYWluTG9nb0NvbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW5Mb2dvXCIpO1xuICAgIGNvbnN0IGNsb3NlQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tZW51Q2xvc2VcIik7XG4gICAgY29uc3QgY3JlYXRlUHJvakNvbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNyZWF0ZVByb2pcIik7XG4gICAgXG4gICAgY29uc3QgbWVudUljb24gPSBuZXcgSW1hZ2UoKTtcbiAgICBtZW51SWNvbi5zcmMgPSBNZW51O1xuICAgIG1lbnVJY29uLmNsYXNzTGlzdC5hZGQoJ21haW4tbWVudS1sb2dvJyk7XG5cbiAgICBjb25zdCBtYWluTG9nb0ltZyA9IG5ldyBJbWFnZSgpO1xuICAgIG1haW5Mb2dvSW1nLnNyYyA9IEJyYW5kO1xuICAgIG1haW5Mb2dvSW1nLmNsYXNzTGlzdC5hZGQoJ21haW4tbG9nbycpO1xuXG4gICAgY29uc3QgY2xvc2VJY29uID0gbmV3IEltYWdlKCk7XG4gICAgY2xvc2VJY29uLnNyYyA9IENsb3NlO1xuICAgIGNsb3NlSWNvbi5jbGFzc0xpc3QuYWRkKCdtZW51Q2xvc2UnKTtcblxuICAgIGNvbnN0IGNyZWF0ZVByb2pJY29uID0gbmV3IEltYWdlKCk7XG4gICAgY3JlYXRlUHJvakljb24uc3JjID0gQ3JlYXRlO1xuICAgIGNyZWF0ZVByb2pJY29uLmNsYXNzTGlzdC5hZGQoJ2FkZFByb2pCdXR0b24nKTtcblxuICAgIG1lbnVDb250YWluZXIuYXBwZW5kQ2hpbGQobWVudUljb24pO1xuICAgIG1haW5Mb2dvQ29udC5hcHBlbmRDaGlsZChtYWluTG9nb0ltZyk7XG4gICAgY2xvc2VDb250YWluZXIuYXBwZW5kQ2hpbGQoY2xvc2VJY29uKTtcbiAgICBjcmVhdGVQcm9qQ29udC5hcHBlbmRDaGlsZChjcmVhdGVQcm9qSWNvbik7XG5cbiAgICBjb25zdCBzaWRlQmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zaWRlYmFyLW1lbnVcIik7XG4gICAgY29uc3QgcHJvak92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5ld1Byb2plY3RPdmVybGF5XCIpO1xuXG4gICAgbWVudUNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgIHNpZGVCYXIuc3R5bGUuYW5pbWF0aW9uID0gJ21lbnVTbGlkZU9uIDEuNXMgZm9yd2FyZHMnO1xuICAgIH0pO1xuICAgIGNsb3NlQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgc2lkZUJhci5zdHlsZS5hbmltYXRpb24gPSAnbWVudVNsaWRlQ2xvc2UgMS41cyBmb3J3YXJkcyc7XG4gICAgfSk7XG4gICAgY3JlYXRlUHJvakNvbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICBzaWRlQmFyLnN0eWxlLmFuaW1hdGlvbiA9ICdtZW51U2xpZGVDbG9zZSAxLjVzIGZvcndhcmRzJztcbiAgICAgICAgcHJvak92ZXJsYXkuc3R5bGUuYW5pbWF0aW9uID0gJ3Byb2plY3RTbGlkZURvd24gMS41cyBmb3J3YXJkcyc7XG4gICAgfSk7XG4gICAgc2lkZUJhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgIGlmKGUudGFyZ2V0LnRhZ05hbWUgPT09ICdTUEFOJyl7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInRoZSBmb2xsb3dpbmcgaXMgZS50YXJnZXQudmFsdWVcIik7REVCVUdERUJVR0RFQlVHXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlLnRhcmdldC50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICBjb25zdCBkaXNwUHJvaiA9IGZpbmRQcm9qZWN0SW5BcnIoZS50YXJnZXQudGV4dENvbnRlbnQpXG4gICAgICAgICAgICBkaXNwbGF5UHJvamVjdEluTWFpbihkaXNwUHJvaik7XG4gICAgICAgIH1cbiAgICB9KTtcbn0iLCJpbXBvcnQgeyBtZW51RXZlbnRMaXN0ZW4sIHByb2pBcnIgfSBmcm9tIFwiLi9tZW51RXZlbnRMaXN0ZW5lcnNcIjtcbmltcG9ydCB7IGFkZFByb2plY3RUb1NpZGViYXIsIGRpc3BsYXlQcm9qZWN0SW5NYWluIH0gZnJvbSBcIi4vcHJvamVjdERPTVwiO1xuaW1wb3J0IHsgcHJvamVjdE92ZXJsYXlTdHVmZiB9IGZyb20gXCIuL3Byb2plY3RGb3JtXCI7XG5pbXBvcnQgeyB0YXNrT3ZlcmxheUxpc3RlbmVycywgX3Rhc2tTdWJtaXQgfSBmcm9tIFwiLi90YXNrRm9ybVwiO1xuaW1wb3J0IHsgcHJvamVjdEVMaXN0ZW5lcnMgfSBmcm9tIFwiLi9wcm9qZWN0RXZlbnRMaXN0ZW5lcnNcIjtcbmltcG9ydCB7IFByb2plY3QgfSBmcm9tIFwiLi9wcm9qZWN0Q2xhc3NcIjtcblxubWVudUV2ZW50TGlzdGVuKCk7XG5wcm9qZWN0T3ZlcmxheVN0dWZmKCk7XG5jb25zdCBkZWZQcm9qID0gbmV3IFByb2plY3QoXCJkZWZhdWx0UHJvamVjdFwiLCBcIlRoaXMgaXMgYSBkZWZhdWx0IHByb2plY3QuIFlvdSBjYW4gYWxzbyBjcmVhdGUgeW91ciBvd24gOilcIik7XG5wcm9qQXJyWzBdID0gZGVmUHJvajtcbmRpc3BsYXlQcm9qZWN0SW5NYWluKGRlZlByb2opO1xuYWRkUHJvamVjdFRvU2lkZWJhcihcImRlZmF1bHRQcm9qZWN0XCIpO1xuLy9wcm9qZWN0RUxpc3RlbmVycygpOy8vVEhJUyBXQVMgQ09NTUVOVEVEIE9VVFxuLy90YXNrT3ZlcmxheUxpc3RlbmVycygpOy8vVEhJUyBXQVMgQ09NTUVOVEVEIE9VVCJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZXhwb3J0cyIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJ0aGlzIiwiRnVuY3Rpb24iLCJlIiwid2luZG93Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiZG9jdW1lbnQiLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGVuZ3RoIiwiaSIsIkVycm9yIiwicmVwbGFjZSIsInAiLCJUYXNrIiwiY29uc3RydWN0b3IiLCJ0VGl0bGUiLCJ0RGVzYyIsInREdWUiLCJ0UHJpbyIsInRQcm9qIiwibmV3dFRpdGxlIiwiX3RUaXRsZSIsIm5ld3REZXNjIiwiX3REZXNjIiwibmV3dER1ZSIsIl90RHVlIiwibmV3dFByaW8iLCJfdFByaW8iLCJuZXd0UHJvaiIsIl90UHJvaiIsIlByb2plY3QiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwidG9Eb3MiLCJnZXRMYXN0VGFzayIsImVkaXRUYXNrIiwidGFza05hbWUiLCJuZXdUYXNrIiwiVHRpdGxlIiwiVGRlc2MiLCJUZHVlIiwiVHByaW8iLCJUcHJvaiIsInQiLCJwdXNoIiwiZmluZFRhc2siLCJ0aXRsZU5hbWUiLCJyZW1vdmVUYXNrRnJvbUFyciIsInNwbGljZSIsInByaW50VGFza3MiLCJjb25zb2xlIiwibG9nIiwibnVtT2ZUYXNrcyIsIl90aXRsZSIsIl9kZXNjcmlwdGlvbiIsInRvRG9MaXN0IiwibmV3VGl0bGUiLCJuZXdEZXNjIiwicHJvak92ZXJsYXkiLCJxdWVyeVNlbGVjdG9yIiwiZGlzcGxheU5lZWRUaXRsZSIsImVycm9yT3ZlcmxheSIsInN0eWxlIiwiYW5pbWF0aW9uIiwic2V0VGltZW91dCIsInByb2plY3RGb3JtQ2xlYXIiLCJnZXRFbGVtZW50QnlJZCIsImRpc3BsYXlUYXNrSW5NYWluIiwidGFzayIsInByb2pVTCIsInRhc2tMSSIsImNyZWF0ZUVsZW1lbnQiLCJkYXRlRGlzcCIsInRleHRDb250ZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYnV0dG9uRGl2IiwidGFza0NoZWNrYm94IiwidHlwZSIsInRhc2tEYXRlSW5wdXQiLCJ0YXNrRWRpdERpdiIsInRhc2tSZW1vdmVEaXYiLCJ0YXNrRWRpdEljb24iLCJJbWFnZSIsInRhc2tSZW1vdmVJY29uIiwiYXBwZW5kQ2hpbGQiLCJ0YXNrRUxpc3RlbmVycyIsInRhc2tDbG9zZSIsInRhc2tTdWJtaXQiLCJhZGRFdmVudExpc3RlbmVyIiwidGFza0Zvcm1DbGVhciIsIl90YXNrU3VibWl0IiwidGFza0VkaXRCdXR0b24iLCJjbGVhckV2TGlzIiwibWFkZVRhc2siLCJwcm9qIiwidGFza1RpdGxlIiwidGFza0Rlc2MiLCJ0YXNrRHVlRGF0ZSIsInRhc2tQcmlvIiwiZm5kUHJvaiIsInRhc2tNYWRlIiwiZXh0cmFjdERhdGFGb3JUYXNrIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInByb2pPdmVybGF5MSIsImVkaXRCdXR0b25DbGlja2VkIiwiY3VyclRpdGxlMiIsIl90ZXN0ZXJpbmciLCJlZGl0QnV0dG9uIiwidGFyZ2V0IiwibWF0Y2hlcyIsInJlbW92ZUJ1dHRvbiIsImFkZFRhc2tCdXR0b24iLCJjdXJyVGl0bGUiLCJwcm9qZWN0VGl0bGUiLCJzaWRlYmFyUHJvaiIsInNpZGViYXJQcm9qQ2hpbGRyZW4iLCJjaGlsZHJlbiIsInJlbW92ZUNoaWxkIiwicmVtb3ZlUHJvamVjdEZyb21TaWRlYmFyIiwicHJvakFyciIsInJlbW92ZVByb2pBcnIiLCJjbGVhck1haW4iLCJpbmRleCIsIm1haW5TZWMiLCJhZGRQcm9qZWN0VG9TaWRlYmFyIiwicHJvalNpZGUiLCJwcm9qVGl0bGUiLCJkaXNwbGF5UHJvamVjdEluTWFpbiIsInByb2plY3QiLCJwcm9qRGl2IiwidGFza1NlY1VMIiwicHJvakNoZWNrYm94IiwicHJvak5hbWVTcGFuIiwibWFpbk1vZFByb2pUaXRsZSIsInNsaWNlIiwiYnV0dG9uQ29udCIsImFkZERpdiIsImVkaXREaXYiLCJyZW1vdmVEaXYiLCJhZGRJY29uIiwiZWRpdEljb24iLCJyZW1JY29uIiwidGFza0FyciIsImNoZWNrRm9yVGFza3MiLCJmaXJzdENoaWxkIiwiYyIsIm1lbnVDb250YWluZXIiLCJtYWluTG9nb0NvbnQiLCJjbG9zZUNvbnRhaW5lciIsImNyZWF0ZVByb2pDb250IiwibWVudUljb24iLCJtYWluTG9nb0ltZyIsImNsb3NlSWNvbiIsImNyZWF0ZVByb2pJY29uIiwic2lkZUJhciIsInRhZ05hbWUiLCJtZW51RXZlbnRMaXN0ZW4iLCJjbG9zZUJ1dHRvbiIsInN1Ym1pdEJ1dHRvbiIsInByb2plY3RQYXJhbSIsInRpdGxlSW5wdXQiLCJkZXNjSW5wdXQiLCJwcm9qZWN0TWFkZSIsImV4dHJhY3REYXRhRm9yUHJvamVjdCIsInJlcGxhY2VUaXRsZSIsImVkaXRQcm9qZWN0SW5BcnIiLCJlZGl0UHJvamVjdEluU2lkZWJhciIsInByb2plY3RPdmVybGF5U3R1ZmYiLCJkZWZQcm9qIl0sInNvdXJjZVJvb3QiOiIifQ==