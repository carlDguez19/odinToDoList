(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&!e;)e=r[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();const e=t.p+"abbfad808c2786a6a2d4.png",n=t.p+"986e98635b18601755cf.png",r=t.p+"177a54134d0bd5aefd06.png",a=t.p+"edb755c23d1ebcf9c7a4.png",i=t.p+"c9c7160b568bb10d504c.png";class o{constructor(t,e){this.title=t,this.description=e}get title(){return this._title}get description(){return this._description}set title(t){this._title=t}set description(t){this._description=t}}const u=document.querySelector(".newProjectOverlay");function c(){const t=document.querySelector(".errorProjectOverlay");t.style.animation="projectSlideDown 1.5s forwards",setTimeout((function(){t.style.animation="projectSlideUp 1.5s forwards"}),2500)}function s(){document.getElementById("title").value="",document.getElementById("description").value=""}function l(){Yn(".infoCloseButton").addEventListener("click",d)}function d(){ft=!1,ct.style.animation="projectSlideUp 1.5s forwards",setTimeout((function(){st.textContent=""}),1e3)}function f(t){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f(t)}function h(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function m(t){h(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===f(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function v(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function w(t,e){return h(2,arguments),function(t,e){h(2,arguments);var n=m(t).getTime(),r=v(e);return new Date(n+r)}(t,-v(e))}function g(t){h(1,arguments);var e=m(t),n=e.getUTCDay(),r=(n<1?7:0)+n-1;return e.setUTCDate(e.getUTCDate()-r),e.setUTCHours(0,0,0,0),e}function y(t){h(1,arguments);var e=m(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=g(r),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var o=g(i);return e.getTime()>=a.getTime()?n+1:e.getTime()>=o.getTime()?n:n-1}function p(t){h(1,arguments);var e=m(t),n=g(e).getTime()-function(t){h(1,arguments);var e=y(t),n=new Date(0);return n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0),g(n)}(e).getTime();return Math.round(n/6048e5)+1}var b={};function T(){return b}function k(t,e){var n,r,a,i,o,u,c,s;h(1,arguments);var l=T(),d=v(null!==(n=null!==(r=null!==(a=null!==(i=null==e?void 0:e.weekStartsOn)&&void 0!==i?i:null==e||null===(o=e.locale)||void 0===o||null===(u=o.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==a?a:l.weekStartsOn)&&void 0!==r?r:null===(c=l.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==n?n:0);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=m(t),w=f.getUTCDay(),g=(w<d?7:0)+w-d;return f.setUTCDate(f.getUTCDate()-g),f.setUTCHours(0,0,0,0),f}function C(t,e){var n,r,a,i,o,u,c,s;h(1,arguments);var l=m(t),d=l.getUTCFullYear(),f=T(),w=v(null!==(n=null!==(r=null!==(a=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(o=e.locale)||void 0===o||null===(u=o.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:f.firstWeekContainsDate)&&void 0!==r?r:null===(c=f.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==n?n:1);if(!(w>=1&&w<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var g=new Date(0);g.setUTCFullYear(d+1,0,w),g.setUTCHours(0,0,0,0);var y=k(g,e),p=new Date(0);p.setUTCFullYear(d,0,w),p.setUTCHours(0,0,0,0);var b=k(p,e);return l.getTime()>=y.getTime()?d+1:l.getTime()>=b.getTime()?d:d-1}function D(t,e){h(1,arguments);var n=m(t),r=k(n,e).getTime()-function(t,e){var n,r,a,i,o,u,c,s;h(1,arguments);var l=T(),d=v(null!==(n=null!==(r=null!==(a=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(o=e.locale)||void 0===o||null===(u=o.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:l.firstWeekContainsDate)&&void 0!==r?r:null===(c=l.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==n?n:1),f=C(t,e),m=new Date(0);return m.setUTCFullYear(f,0,d),m.setUTCHours(0,0,0,0),k(m,e)}(n,e).getTime();return Math.round(r/6048e5)+1}function x(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const S=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return x("yy"===e?r%100:r,e.length)},U=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):x(n+1,2)},M=function(t,e){return x(t.getUTCDate(),e.length)},P=function(t,e){return x(t.getUTCHours()%12||12,e.length)},E=function(t,e){return x(t.getUTCHours(),e.length)},N=function(t,e){return x(t.getUTCMinutes(),e.length)},j=function(t,e){return x(t.getUTCSeconds(),e.length)},O=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return x(Math.floor(r*Math.pow(10,n-3)),e.length)};function L(t,e){var n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),i=r%60;if(0===i)return n+String(a);var o=e||"";return n+String(a)+o+x(i,2)}function q(t,e){return t%60==0?(t>0?"-":"+")+x(Math.abs(t)/60,2):Y(t,e)}function Y(t,e){var n=e||"",r=t>0?"-":"+",a=Math.abs(t);return r+x(Math.floor(a/60),2)+n+x(a%60,2)}const _={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return S(t,e)},Y:function(t,e,n,r){var a=C(t,r),i=a>0?a:1-a;return"YY"===e?x(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):x(i,e.length)},R:function(t,e){return x(y(t),e.length)},u:function(t,e){return x(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return x(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return x(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return U(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return x(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var a=D(t,r);return"wo"===e?n.ordinalNumber(a,{unit:"week"}):x(a,e.length)},I:function(t,e,n){var r=p(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):x(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):M(t,e)},D:function(t,e,n){var r=function(t){h(1,arguments);var e=m(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=n-e.getTime();return Math.floor(r/864e5)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):x(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var a=t.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return x(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var a=t.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return x(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return x(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,a=t.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,a=t.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return P(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):E(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):x(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):x(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):N(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):j(t,e)},S:function(t,e){return O(t,e)},X:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return q(a);case"XXXX":case"XX":return Y(a);default:return Y(a,":")}},x:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return q(a);case"xxxx":case"xx":return Y(a);default:return Y(a,":")}},O:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+L(a,":");default:return"GMT"+Y(a,":")}},z:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+L(a,":");default:return"GMT"+Y(a,":")}},t:function(t,e,n,r){var a=r._originalDate||t;return x(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return x((r._originalDate||t).getTime(),e.length)}};var I=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},H=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},A={p:H,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],a=r[1],i=r[2];if(!i)return I(t,e);switch(a){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",I(a,e)).replace("{{time}}",H(i,e))}};const W=A;function R(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var B=["D","DD"],F=["YY","YYYY"];function Q(t){return-1!==B.indexOf(t)}function G(t){return-1!==F.indexOf(t)}function X(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var z={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function J(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}var Z,$={date:J({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:J({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:J({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},K={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function V(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var a=t.defaultFormattingWidth||t.defaultWidth,i=null!=n&&n.width?String(n.width):a;r=t.formattingValues[i]||t.formattingValues[a]}else{var o=t.defaultWidth,u=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[u]||t.values[o]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function tt(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],i=e.match(a);if(!i)return null;var o,u=i[0],c=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],s=Array.isArray(c)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(u))return n}(c):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(u))return n}(c);return o=t.valueCallback?t.valueCallback(s):s,{value:o=n.valueCallback?n.valueCallback(o):o,rest:e.slice(u.length)}}}const et={code:"en-US",formatDistance:function(t,e,n){var r,a=z[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:$,formatRelative:function(t,e,n,r){return K[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:V({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:V({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:V({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:V({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:V({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(Z={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(Z.matchPattern);if(!n)return null;var r=n[0],a=t.match(Z.parsePattern);if(!a)return null;var i=Z.valueCallback?Z.valueCallback(a[0]):a[0];return{value:i=e.valueCallback?e.valueCallback(i):i,rest:t.slice(r.length)}}),era:tt({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:tt({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:tt({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:tt({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:tt({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var nt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,rt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,at=/^'([^]*?)'?$/,it=/''/g,ot=/[a-zA-Z]/;function ut(t,e,n){var r,a,i,o,u,c,s,l,d,g,y,p,b,k,C,D,x,S;h(2,arguments);var U=String(e),M=T(),P=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:M.locale)&&void 0!==r?r:et,E=v(null!==(i=null!==(o=null!==(u=null!==(c=null==n?void 0:n.firstWeekContainsDate)&&void 0!==c?c:null==n||null===(s=n.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==u?u:M.firstWeekContainsDate)&&void 0!==o?o:null===(d=M.locale)||void 0===d||null===(g=d.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==i?i:1);if(!(E>=1&&E<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var N=v(null!==(y=null!==(p=null!==(b=null!==(k=null==n?void 0:n.weekStartsOn)&&void 0!==k?k:null==n||null===(C=n.locale)||void 0===C||null===(D=C.options)||void 0===D?void 0:D.weekStartsOn)&&void 0!==b?b:M.weekStartsOn)&&void 0!==p?p:null===(x=M.locale)||void 0===x||null===(S=x.options)||void 0===S?void 0:S.weekStartsOn)&&void 0!==y?y:0);if(!(N>=0&&N<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!P.localize)throw new RangeError("locale must contain localize property");if(!P.formatLong)throw new RangeError("locale must contain formatLong property");var j=m(t);if(!function(t){if(h(1,arguments),!function(t){return h(1,arguments),t instanceof Date||"object"===f(t)&&"[object Date]"===Object.prototype.toString.call(t)}(t)&&"number"!=typeof t)return!1;var e=m(t);return!isNaN(Number(e))}(j))throw new RangeError("Invalid time value");var O=w(j,R(j)),L={firstWeekContainsDate:E,weekStartsOn:N,locale:P,_originalDate:j};return U.match(rt).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,W[e])(t,P.formatLong):t})).join("").match(nt).map((function(r){if("''"===r)return"'";var a,i,o=r[0];if("'"===o)return(i=(a=r).match(at))?i[1].replace(it,"'"):a;var u=_[o];if(u)return null!=n&&n.useAdditionalWeekYearTokens||!G(r)||X(r,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!Q(r)||X(r,e,String(t)),u(O,r,P.localize,L);if(o.match(ot))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("")}const ct=Yn(".infoDescOverlay"),st=Yn(".infoSec");let lt=!1,dt=null,ft=!1,ht=!1;function mt(t){const e=t.target.parentElement.parentElement.parentElement;if(t.target.matches(".taskProjEdit"))lt=!0,dt=vt(e.textContent),function(t){an.style.animation="projectSlideDown 1.5s forwards";const e=Yn("#tTitle"),n=Yn("#tDueDate");e.value=t._tTitle;const r=ut(new Date(t._tDue),"yyyy-MM-dd");n.value=r,cn()}(dt);else if(t.target.matches(".taskProjRemove"))ht=!0,vt(e.textContent),function(t){for(var e=0;e<qn.length;e++)qn[e]._tTitle==t&&qn.splice(e,1);localStorage.setItem("tasks",JSON.stringify(qn))}(e.textContent),gt(e.textContent);else if(t.target.matches(".titleTaskDisp")){ft=!0;n=vt(t.target.parentElement.textContent),ct.style.animation="projectSlideDown 1.5s forwards",st.textContent+="DUE DATE: "+n._tDue+" DESCRIPTION: "+n._tDesc+" PROJECT: "+n._tProj,l()}var n}function vt(t){for(var e=0;e<qn.length;e++)if(qn[e]._tTitle==t)return qn[e]}function wt(t){const e=document.querySelector(".todoUL"),n=document.createElement("li"),a=document.createElement("div");a.textContent=t._tTitle,a.classList.add("titleTaskDisp");const o=document.createElement("div"),u=document.createElement("input");u.type="checkbox";const c=document.createElement("div"),s=document.createElement("div"),l=new Image;l.src=i,l.classList.add("taskProjEdit");const d=new Image;d.src=r,d.classList.add("taskProjRemove"),c.appendChild(l),s.appendChild(d),o.appendChild(c),o.appendChild(s),o.appendChild(u),o.classList.add("taskButtons"),n.appendChild(a),n.appendChild(o),n.classList.add("todo");const f=t._tPrio;"high"==f?n.classList.add("highPrio"):"medium"==f?n.classList.add("mediumPrio"):"low"==f&&n.classList.add("lowPrio"),e.appendChild(n),document.addEventListener("click",mt)}function gt(t){const e=Yn(".todoUL"),n=e.children;for(let r=0;r<n.length;r++)n[r].textContent==t&&e.removeChild(n[r])}function yt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function pt(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return yt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?yt(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,a=function(){};return{s:a,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,u=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return o=t.done,t},e:function(t){u=!0,i=t},f:function(){try{o||null==n.return||n.return()}finally{if(u)throw i}}}}function bt(t,e){if(null==t)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}function Tt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function kt(t,e){return kt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},kt(t,e)}function Ct(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&kt(t,e)}function Dt(t){return Dt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Dt(t)}function xt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Dt(t);if(e){var a=Dt(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return function(t,e){if(e&&("object"===f(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Tt(t)}(this,n)}}function St(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ut(t){var e=function(t,e){if("object"!==f(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==f(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===f(e)?e:String(e)}function Mt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,Ut(r.key),r)}}function Pt(t,e,n){return e&&Mt(t.prototype,e),n&&Mt(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function Et(t,e,n){return(e=Ut(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Nt=function(){function t(){St(this,t),Et(this,"priority",void 0),Et(this,"subPriority",0)}return Pt(t,[{key:"validate",value:function(t,e){return!0}}]),t}(),jt=function(t){Ct(n,t);var e=xt(n);function n(t,r,a,i,o){var u;return St(this,n),(u=e.call(this)).value=t,u.validateValue=r,u.setValue=a,u.priority=i,o&&(u.subPriority=o),u}return Pt(n,[{key:"validate",value:function(t,e){return this.validateValue(t,this.value,e)}},{key:"set",value:function(t,e,n){return this.setValue(t,e,this.value,n)}}]),n}(Nt),Ot=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",10),Et(Tt(t),"subPriority",-1),t}return Pt(n,[{key:"set",value:function(t,e){if(e.timestampIsSet)return t;var n=new Date(0);return n.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),n.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),n}}]),n}(Nt),Lt=function(){function t(){St(this,t),Et(this,"incompatibleTokens",void 0),Et(this,"priority",void 0),Et(this,"subPriority",void 0)}return Pt(t,[{key:"run",value:function(t,e,n,r){var a=this.parse(t,e,n,r);return a?{setter:new jt(a.value,this.validate,this.set,this.priority,this.subPriority),rest:a.rest}:null}},{key:"validate",value:function(t,e,n){return!0}}]),t}(),qt=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",140),Et(Tt(t),"incompatibleTokens",["R","u","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"G":case"GG":case"GGG":return n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"});case"GGGGG":return n.era(t,{width:"narrow"});default:return n.era(t,{width:"wide"})||n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"})}}},{key:"set",value:function(t,e,n){return e.era=n,t.setUTCFullYear(n,0,1),t.setUTCHours(0,0,0,0),t}}]),n}(Lt),Yt=(Math.pow(10,8),6e4),_t=36e5,It=/^(1[0-2]|0?\d)/,Ht=/^(3[0-1]|[0-2]?\d)/,At=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,Wt=/^(5[0-3]|[0-4]?\d)/,Rt=/^(2[0-3]|[0-1]?\d)/,Bt=/^(2[0-4]|[0-1]?\d)/,Ft=/^(1[0-1]|0?\d)/,Qt=/^(1[0-2]|0?\d)/,Gt=/^[0-5]?\d/,Xt=/^[0-5]?\d/,zt=/^\d/,Jt=/^\d{1,2}/,Zt=/^\d{1,3}/,$t=/^\d{1,4}/,Kt=/^-?\d+/,Vt=/^-?\d/,te=/^-?\d{1,2}/,ee=/^-?\d{1,3}/,ne=/^-?\d{1,4}/,re=/^([+-])(\d{2})(\d{2})?|Z/,ae=/^([+-])(\d{2})(\d{2})|Z/,ie=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,oe=/^([+-])(\d{2}):(\d{2})|Z/,ue=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function ce(t,e){return t?{value:e(t.value),rest:t.rest}:t}function se(t,e){var n=e.match(t);return n?{value:parseInt(n[0],10),rest:e.slice(n[0].length)}:null}function le(t,e){var n=e.match(t);if(!n)return null;if("Z"===n[0])return{value:0,rest:e.slice(1)};var r="+"===n[1]?1:-1,a=n[2]?parseInt(n[2],10):0,i=n[3]?parseInt(n[3],10):0,o=n[5]?parseInt(n[5],10):0;return{value:r*(a*_t+i*Yt+1e3*o),rest:e.slice(n[0].length)}}function de(t){return se(Kt,t)}function fe(t,e){switch(t){case 1:return se(zt,e);case 2:return se(Jt,e);case 3:return se(Zt,e);case 4:return se($t,e);default:return se(new RegExp("^\\d{1,"+t+"}"),e)}}function he(t,e){switch(t){case 1:return se(Vt,e);case 2:return se(te,e);case 3:return se(ee,e);case 4:return se(ne,e);default:return se(new RegExp("^-?\\d{1,"+t+"}"),e)}}function me(t){switch(t){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function ve(t,e){var n,r=e>0,a=r?e:1-e;if(a<=50)n=t||100;else{var i=a+50;n=t+100*Math.floor(i/100)-(t>=i%100?100:0)}return r?n:1-n}function we(t){return t%400==0||t%4==0&&t%100!=0}var ge=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",130),Et(Tt(t),"incompatibleTokens",["Y","R","u","w","I","i","e","c","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){var r=function(t){return{year:t,isTwoDigitYear:"yy"===e}};switch(e){case"y":return ce(fe(4,t),r);case"yo":return ce(n.ordinalNumber(t,{unit:"year"}),r);default:return ce(fe(e.length,t),r)}}},{key:"validate",value:function(t,e){return e.isTwoDigitYear||e.year>0}},{key:"set",value:function(t,e,n){var r=t.getUTCFullYear();if(n.isTwoDigitYear){var a=ve(n.year,r);return t.setUTCFullYear(a,0,1),t.setUTCHours(0,0,0,0),t}var i="era"in e&&1!==e.era?1-n.year:n.year;return t.setUTCFullYear(i,0,1),t.setUTCHours(0,0,0,0),t}}]),n}(Lt),ye=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",130),Et(Tt(t),"incompatibleTokens",["y","R","u","Q","q","M","L","I","d","D","i","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){var r=function(t){return{year:t,isTwoDigitYear:"YY"===e}};switch(e){case"Y":return ce(fe(4,t),r);case"Yo":return ce(n.ordinalNumber(t,{unit:"year"}),r);default:return ce(fe(e.length,t),r)}}},{key:"validate",value:function(t,e){return e.isTwoDigitYear||e.year>0}},{key:"set",value:function(t,e,n,r){var a=C(t,r);if(n.isTwoDigitYear){var i=ve(n.year,a);return t.setUTCFullYear(i,0,r.firstWeekContainsDate),t.setUTCHours(0,0,0,0),k(t,r)}var o="era"in e&&1!==e.era?1-n.year:n.year;return t.setUTCFullYear(o,0,r.firstWeekContainsDate),t.setUTCHours(0,0,0,0),k(t,r)}}]),n}(Lt),pe=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",130),Et(Tt(t),"incompatibleTokens",["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e){return he("R"===e?4:e.length,t)}},{key:"set",value:function(t,e,n){var r=new Date(0);return r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0),g(r)}}]),n}(Lt),be=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",130),Et(Tt(t),"incompatibleTokens",["G","y","Y","R","w","I","i","e","c","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e){return he("u"===e?4:e.length,t)}},{key:"set",value:function(t,e,n){return t.setUTCFullYear(n,0,1),t.setUTCHours(0,0,0,0),t}}]),n}(Lt),Te=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",120),Et(Tt(t),"incompatibleTokens",["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"Q":case"QQ":return fe(e.length,t);case"Qo":return n.ordinalNumber(t,{unit:"quarter"});case"QQQ":return n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(t,{width:"narrow",context:"formatting"});default:return n.quarter(t,{width:"wide",context:"formatting"})||n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=1&&e<=4}},{key:"set",value:function(t,e,n){return t.setUTCMonth(3*(n-1),1),t.setUTCHours(0,0,0,0),t}}]),n}(Lt),ke=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",120),Et(Tt(t),"incompatibleTokens",["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"q":case"qq":return fe(e.length,t);case"qo":return n.ordinalNumber(t,{unit:"quarter"});case"qqq":return n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(t,{width:"narrow",context:"standalone"});default:return n.quarter(t,{width:"wide",context:"standalone"})||n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(t,e){return e>=1&&e<=4}},{key:"set",value:function(t,e,n){return t.setUTCMonth(3*(n-1),1),t.setUTCHours(0,0,0,0),t}}]),n}(Lt),Ce=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"incompatibleTokens",["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]),Et(Tt(t),"priority",110),t}return Pt(n,[{key:"parse",value:function(t,e,n){var r=function(t){return t-1};switch(e){case"M":return ce(se(It,t),r);case"MM":return ce(fe(2,t),r);case"Mo":return ce(n.ordinalNumber(t,{unit:"month"}),r);case"MMM":return n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(t,{width:"narrow",context:"formatting"});default:return n.month(t,{width:"wide",context:"formatting"})||n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=11}},{key:"set",value:function(t,e,n){return t.setUTCMonth(n,1),t.setUTCHours(0,0,0,0),t}}]),n}(Lt),De=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",110),Et(Tt(t),"incompatibleTokens",["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){var r=function(t){return t-1};switch(e){case"L":return ce(se(It,t),r);case"LL":return ce(fe(2,t),r);case"Lo":return ce(n.ordinalNumber(t,{unit:"month"}),r);case"LLL":return n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(t,{width:"narrow",context:"standalone"});default:return n.month(t,{width:"wide",context:"standalone"})||n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=11}},{key:"set",value:function(t,e,n){return t.setUTCMonth(n,1),t.setUTCHours(0,0,0,0),t}}]),n}(Lt),xe=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",100),Et(Tt(t),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","i","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"w":return se(Wt,t);case"wo":return n.ordinalNumber(t,{unit:"week"});default:return fe(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=53}},{key:"set",value:function(t,e,n,r){return k(function(t,e,n){h(2,arguments);var r=m(t),a=v(e),i=D(r,n)-a;return r.setUTCDate(r.getUTCDate()-7*i),r}(t,n,r),r)}}]),n}(Lt),Se=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",100),Et(Tt(t),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"I":return se(Wt,t);case"Io":return n.ordinalNumber(t,{unit:"week"});default:return fe(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=53}},{key:"set",value:function(t,e,n){return g(function(t,e){h(2,arguments);var n=m(t),r=v(e),a=p(n)-r;return n.setUTCDate(n.getUTCDate()-7*a),n}(t,n))}}]),n}(Lt),Ue=[31,28,31,30,31,30,31,31,30,31,30,31],Me=[31,29,31,30,31,30,31,31,30,31,30,31],Pe=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",90),Et(Tt(t),"subPriority",1),Et(Tt(t),"incompatibleTokens",["Y","R","q","Q","w","I","D","i","e","c","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"d":return se(Ht,t);case"do":return n.ordinalNumber(t,{unit:"date"});default:return fe(e.length,t)}}},{key:"validate",value:function(t,e){var n=we(t.getUTCFullYear()),r=t.getUTCMonth();return n?e>=1&&e<=Me[r]:e>=1&&e<=Ue[r]}},{key:"set",value:function(t,e,n){return t.setUTCDate(n),t.setUTCHours(0,0,0,0),t}}]),n}(Lt),Ee=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",90),Et(Tt(t),"subpriority",1),Et(Tt(t),"incompatibleTokens",["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"D":case"DD":return se(At,t);case"Do":return n.ordinalNumber(t,{unit:"date"});default:return fe(e.length,t)}}},{key:"validate",value:function(t,e){return we(t.getUTCFullYear())?e>=1&&e<=366:e>=1&&e<=365}},{key:"set",value:function(t,e,n){return t.setUTCMonth(0,n),t.setUTCHours(0,0,0,0),t}}]),n}(Lt);function Ne(t,e,n){var r,a,i,o,u,c,s,l;h(2,arguments);var d=T(),f=v(null!==(r=null!==(a=null!==(i=null!==(o=null==n?void 0:n.weekStartsOn)&&void 0!==o?o:null==n||null===(u=n.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==i?i:d.weekStartsOn)&&void 0!==a?a:null===(s=d.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==r?r:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var w=m(t),g=v(e),y=((g%7+7)%7<f?7:0)+g-w.getUTCDay();return w.setUTCDate(w.getUTCDate()+y),w}var je=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",90),Et(Tt(t),"incompatibleTokens",["D","i","e","c","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"E":case"EE":case"EEE":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=6}},{key:"set",value:function(t,e,n,r){return(t=Ne(t,n,r)).setUTCHours(0,0,0,0),t}}]),n}(Lt),Oe=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",90),Et(Tt(t),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n,r){var a=function(t){var e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"e":case"ee":return ce(fe(e.length,t),a);case"eo":return ce(n.ordinalNumber(t,{unit:"day"}),a);case"eee":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"eeeee":return n.day(t,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=6}},{key:"set",value:function(t,e,n,r){return(t=Ne(t,n,r)).setUTCHours(0,0,0,0),t}}]),n}(Lt),Le=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",90),Et(Tt(t),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n,r){var a=function(t){var e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"c":case"cc":return ce(fe(e.length,t),a);case"co":return ce(n.ordinalNumber(t,{unit:"day"}),a);case"ccc":return n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});case"ccccc":return n.day(t,{width:"narrow",context:"standalone"});case"cccccc":return n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});default:return n.day(t,{width:"wide",context:"standalone"})||n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=6}},{key:"set",value:function(t,e,n,r){return(t=Ne(t,n,r)).setUTCHours(0,0,0,0),t}}]),n}(Lt),qe=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",90),Et(Tt(t),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){var r=function(t){return 0===t?7:t};switch(e){case"i":case"ii":return fe(e.length,t);case"io":return n.ordinalNumber(t,{unit:"day"});case"iii":return ce(n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiii":return ce(n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiiii":return ce(n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);default:return ce(n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r)}}},{key:"validate",value:function(t,e){return e>=1&&e<=7}},{key:"set",value:function(t,e,n){return t=function(t,e){h(2,arguments);var n=v(e);n%7==0&&(n-=7);var r=m(t),a=((n%7+7)%7<1?7:0)+n-r.getUTCDay();return r.setUTCDate(r.getUTCDate()+a),r}(t,n),t.setUTCHours(0,0,0,0),t}}]),n}(Lt),Ye=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",80),Et(Tt(t),"incompatibleTokens",["b","B","H","k","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"a":case"aa":case"aaa":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(t,e,n){return t.setUTCHours(me(n),0,0,0),t}}]),n}(Lt),_e=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",80),Et(Tt(t),"incompatibleTokens",["a","B","H","k","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"b":case"bb":case"bbb":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(t,e,n){return t.setUTCHours(me(n),0,0,0),t}}]),n}(Lt),Ie=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",80),Et(Tt(t),"incompatibleTokens",["a","b","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"B":case"BB":case"BBB":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(t,e,n){return t.setUTCHours(me(n),0,0,0),t}}]),n}(Lt),He=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",70),Et(Tt(t),"incompatibleTokens",["H","K","k","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"h":return se(Qt,t);case"ho":return n.ordinalNumber(t,{unit:"hour"});default:return fe(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=12}},{key:"set",value:function(t,e,n){var r=t.getUTCHours()>=12;return r&&n<12?t.setUTCHours(n+12,0,0,0):r||12!==n?t.setUTCHours(n,0,0,0):t.setUTCHours(0,0,0,0),t}}]),n}(Lt),Ae=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",70),Et(Tt(t),"incompatibleTokens",["a","b","h","K","k","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"H":return se(Rt,t);case"Ho":return n.ordinalNumber(t,{unit:"hour"});default:return fe(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=23}},{key:"set",value:function(t,e,n){return t.setUTCHours(n,0,0,0),t}}]),n}(Lt),We=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",70),Et(Tt(t),"incompatibleTokens",["h","H","k","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"K":return se(Ft,t);case"Ko":return n.ordinalNumber(t,{unit:"hour"});default:return fe(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=11}},{key:"set",value:function(t,e,n){return t.getUTCHours()>=12&&n<12?t.setUTCHours(n+12,0,0,0):t.setUTCHours(n,0,0,0),t}}]),n}(Lt),Re=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",70),Et(Tt(t),"incompatibleTokens",["a","b","h","H","K","t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"k":return se(Bt,t);case"ko":return n.ordinalNumber(t,{unit:"hour"});default:return fe(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=24}},{key:"set",value:function(t,e,n){var r=n<=24?n%24:n;return t.setUTCHours(r,0,0,0),t}}]),n}(Lt),Be=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",60),Et(Tt(t),"incompatibleTokens",["t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"m":return se(Gt,t);case"mo":return n.ordinalNumber(t,{unit:"minute"});default:return fe(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=59}},{key:"set",value:function(t,e,n){return t.setUTCMinutes(n,0,0),t}}]),n}(Lt),Fe=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",50),Et(Tt(t),"incompatibleTokens",["t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e,n){switch(e){case"s":return se(Xt,t);case"so":return n.ordinalNumber(t,{unit:"second"});default:return fe(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=59}},{key:"set",value:function(t,e,n){return t.setUTCSeconds(n,0),t}}]),n}(Lt),Qe=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",30),Et(Tt(t),"incompatibleTokens",["t","T"]),t}return Pt(n,[{key:"parse",value:function(t,e){return ce(fe(e.length,t),(function(t){return Math.floor(t*Math.pow(10,3-e.length))}))}},{key:"set",value:function(t,e,n){return t.setUTCMilliseconds(n),t}}]),n}(Lt),Ge=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",10),Et(Tt(t),"incompatibleTokens",["t","T","x"]),t}return Pt(n,[{key:"parse",value:function(t,e){switch(e){case"X":return le(re,t);case"XX":return le(ae,t);case"XXXX":return le(ie,t);case"XXXXX":return le(ue,t);default:return le(oe,t)}}},{key:"set",value:function(t,e,n){return e.timestampIsSet?t:new Date(t.getTime()-n)}}]),n}(Lt),Xe=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",10),Et(Tt(t),"incompatibleTokens",["t","T","X"]),t}return Pt(n,[{key:"parse",value:function(t,e){switch(e){case"x":return le(re,t);case"xx":return le(ae,t);case"xxxx":return le(ie,t);case"xxxxx":return le(ue,t);default:return le(oe,t)}}},{key:"set",value:function(t,e,n){return e.timestampIsSet?t:new Date(t.getTime()-n)}}]),n}(Lt),ze=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",40),Et(Tt(t),"incompatibleTokens","*"),t}return Pt(n,[{key:"parse",value:function(t){return de(t)}},{key:"set",value:function(t,e,n){return[new Date(1e3*n),{timestampIsSet:!0}]}}]),n}(Lt),Je=function(t){Ct(n,t);var e=xt(n);function n(){var t;St(this,n);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return Et(Tt(t=e.call.apply(e,[this].concat(a))),"priority",20),Et(Tt(t),"incompatibleTokens","*"),t}return Pt(n,[{key:"parse",value:function(t){return de(t)}},{key:"set",value:function(t,e,n){return[new Date(n),{timestampIsSet:!0}]}}]),n}(Lt),Ze={G:new qt,y:new ge,Y:new ye,R:new pe,u:new be,Q:new Te,q:new ke,M:new Ce,L:new De,w:new xe,I:new Se,d:new Pe,D:new Ee,E:new je,e:new Oe,c:new Le,i:new qe,a:new Ye,b:new _e,B:new Ie,h:new He,H:new Ae,K:new We,k:new Re,m:new Be,s:new Fe,S:new Qe,X:new Ge,x:new Xe,t:new ze,T:new Je},$e=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ke=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ve=/^'([^]*?)'?$/,tn=/''/g,en=/\S/,nn=/[a-zA-Z]/;class rn{constructor(t,e,n,r,a){this.tTitle=t,this.tDesc=e,this.tDue=n,this.tPrio=r,this.tProj=a}set tTitle(t){this._tTitle=t}set tDesc(t){this._tDesc=t}set tDue(t){this._tDue=t}set tPrio(t){this._tPrio=t}set tProj(t){this._tProj=t}get tTitle(){return this._tTitle}get tDesc(){return this._tDesc}get tDue(){return this._tDue}get tPrio(){return this._tPrio}get tProj(){return this._tProj}}const an=Yn(".newTaskOverlay"),on=Yn(".taskCloseButton"),un=Yn(".taskSubmitButton");function cn(){on.addEventListener("click",(function(){fn(),an.style.animation="projectSlideUp 1.5s forwards"})),un.addEventListener("click",sn)}function sn(){if(an.style.animation="projectSlideUp 1.5s forwards",new Date,lt){const t=dn();gt(dt._tTitle),function(t){for(let e=0;e<qn.length;e++)qn[e]._tTitle==t&&(qn[e]._tTitle=qn[qn.length-1]._tTitle,qn[e]._tDesc=qn[qn.length-1]._tDesc,qn[e]._tDue=qn[qn.length-1]._tDue,qn[e]._tPrio=qn[qn.length-1]._tPrio,qn[e]._tProj=qn[qn.length-1]._tProj,localStorage.setItem("tasks",JSON.stringify(qn)))}(dt._tTitle),wt(t),qn.splice(qn.length-1,1),localStorage.setItem("tasks",JSON.stringify(qn)),lt=!1,ln()}else{const t=dn();t&&wt(t),fn(),ln()}}function ln(){un.removeEventListener("click",sn),dt=null}function dn(){const t=document.getElementById("tTitle").value,e=document.getElementById("tDescription").value,n=document.getElementById("tDueDate").value,r=document.getElementById("tTaskPrio").value,a=Yn(".projectNameMain").textContent,i=function(t,e,n,r){var a,i,o,u,c,s,l,d,g,y,p,b,k,C,D,x,S,U;h(3,arguments);var M=String(t),P=String(e),E=T(),N=null!==(a=null!==(i=null==r?void 0:r.locale)&&void 0!==i?i:E.locale)&&void 0!==a?a:et;if(!N.match)throw new RangeError("locale must contain match property");var j=v(null!==(o=null!==(u=null!==(c=null!==(s=null==r?void 0:r.firstWeekContainsDate)&&void 0!==s?s:null==r||null===(l=r.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==c?c:E.firstWeekContainsDate)&&void 0!==u?u:null===(g=E.locale)||void 0===g||null===(y=g.options)||void 0===y?void 0:y.firstWeekContainsDate)&&void 0!==o?o:1);if(!(j>=1&&j<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var O=v(null!==(p=null!==(b=null!==(k=null!==(C=null==r?void 0:r.weekStartsOn)&&void 0!==C?C:null==r||null===(D=r.locale)||void 0===D||null===(x=D.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==k?k:E.weekStartsOn)&&void 0!==b?b:null===(S=E.locale)||void 0===S||null===(U=S.options)||void 0===U?void 0:U.weekStartsOn)&&void 0!==p?p:0);if(!(O>=0&&O<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(""===P)return""===M?m(n):new Date(NaN);var L,q={firstWeekContainsDate:j,weekStartsOn:O,locale:N},Y=[new Ot],_=P.match(Ke).map((function(t){var e=t[0];return e in W?(0,W[e])(t,N.formatLong):t})).join("").match($e),I=[],H=pt(_);try{var A=function(){var e=L.value;null!=r&&r.useAdditionalWeekYearTokens||!G(e)||X(e,P,t),null!=r&&r.useAdditionalDayOfYearTokens||!Q(e)||X(e,P,t);var n=e[0],a=Ze[n];if(a){var i=a.incompatibleTokens;if(Array.isArray(i)){var o=I.find((function(t){return i.includes(t.token)||t.token===n}));if(o)throw new RangeError("The format string mustn't contain `".concat(o.fullToken,"` and `").concat(e,"` at the same time"))}else if("*"===a.incompatibleTokens&&I.length>0)throw new RangeError("The format string mustn't contain `".concat(e,"` and any other token at the same time"));I.push({token:n,fullToken:e});var u=a.run(M,e,N.match,q);if(!u)return{v:new Date(NaN)};Y.push(u.setter),M=u.rest}else{if(n.match(nn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");if("''"===e?e="'":"'"===n&&(e=e.match(Ve)[1].replace(tn,"'")),0!==M.indexOf(e))return{v:new Date(NaN)};M=M.slice(e.length)}};for(H.s();!(L=H.n()).done;){var B=A();if("object"===f(B))return B.v}}catch(t){H.e(t)}finally{H.f()}if(M.length>0&&en.test(M))return new Date(NaN);var F=Y.map((function(t){return t.priority})).sort((function(t,e){return e-t})).filter((function(t,e,n){return n.indexOf(t)===e})).map((function(t){return Y.filter((function(e){return e.priority===t})).sort((function(t,e){return e.subPriority-t.subPriority}))})).map((function(t){return t[0]})),z=m(n);if(isNaN(z.getTime()))return new Date(NaN);var J,Z=w(z,R(z)),$={},K=pt(F);try{for(K.s();!(J=K.n()).done;){var V=J.value;if(!V.validate(Z,q))return new Date(NaN);var tt=V.set(Z,$,q);Array.isArray(tt)?(Z=tt[0],bt($,tt[1])):Z=tt}}catch(t){K.e(t)}finally{K.f()}return Z}(n,"yyyy-MM-dd",new Date);if(t&&n){if(function(t){for(let e=0;e<qn.length;e++)if(qn[e]._tTitle==t)return!0;return!1}(t))return c(),fn(),void(an.style.animation="projectSlideDown 1.5s forwards");const n=new rn(t,e,i,r,a);return qn.push(n),localStorage.setItem("tasks",JSON.stringify(qn)),fn(),n}return c(),fn(),void(an.style.animation="projectSlideDown 1.5s forwards")}function fn(){document.getElementById("tTitle").value="",document.getElementById("tDescription").value="",document.getElementById("tDueDate").value="",document.getElementById("tTaskPrio").value="Select One"}const hn=document.querySelector(".newProjectOverlay");let mn=!1,vn=null;var wn=function(t){const e=t.target.matches(".projEdit"),n=t.target.matches(".projRemove"),r=t.target.matches(".projAdd"),a=t.target.matches(".projectNameMain"),i=Yn(".projectNameMain");if(vn=i,e)o=i.textContent,hn.style.animation="projectSlideDown 1.5s forwards",Yn("#title").value=o,mn=!0;else if(n)!function(t){const e=Yn(".sidebarProject"),n=e.children;for(let r=0;r<n.length;r++)n[r].textContent==t&&e.removeChild(n[r])}(i.textContent),function(t){for(let e=0;e<Ln.length;e++)Ln[e]._title==t&&(Ln.splice(e,1),localStorage.setItem("projects",JSON.stringify(Ln)))}(i.textContent),function(t){for(let e=0;e<qn.length;e++)qn[e]._tProj==t&&(qn.splice(e,1),e--);localStorage.setItem("tasks",JSON.stringify(qn))}(i.textContent),On();else if(r)an.style.animation="projectSlideDown 1.5s forwards",cn();else if(a){u=gn(i.textContent),ct.style.animation="projectSlideDown 1.5s forwards",st.textContent="DESCRIPTION: "+u._description,l()}var o,u};function gn(t){for(let e=0;e<Ln.length;e++)if(Ln[e]._title==t)return Ln[e]}function yn(t,e){var n;h(1,arguments);var r=v(null!==(n=null==e?void 0:e.additionalDigits)&&void 0!==n?n:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var a,i=function(t){var e,n={},r=t.split(pn.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?e=r[0]:(n.date=r[0],e=r[1],pn.timeZoneDelimiter.test(n.date)&&(n.date=t.split(pn.timeZoneDelimiter)[0],e=t.substr(n.date.length,t.length))),e){var a=pn.timezone.exec(e);a?(n.time=e.replace(a[1],""),n.timezone=a[1]):n.time=e}return n}(t);if(i.date){var o=function(t,e){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=t.match(n);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,i=r[2]?parseInt(r[2]):null;return{year:null===i?a:100*i,restDateString:t.slice((r[1]||r[2]).length)}}(i.date,r);a=function(t,e){if(null===e)return new Date(NaN);var n=t.match(bn);if(!n)return new Date(NaN);var r=!!n[4],a=Cn(n[1]),i=Cn(n[2])-1,o=Cn(n[3]),u=Cn(n[4]),c=Cn(n[5])-1;if(r)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,u,c)?function(t,e,n){var r=new Date(0);r.setUTCFullYear(t,0,4);var a=7*(e-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(e,u,c):new Date(NaN);var s=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(xn[e]||(Sn(t)?29:28))}(e,i,o)&&function(t,e){return e>=1&&e<=(Sn(t)?366:365)}(e,a)?(s.setUTCFullYear(e,i,Math.max(a,o)),s):new Date(NaN)}(o.restDateString,o.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var u,c=a.getTime(),s=0;if(i.time&&(s=function(t){var e=t.match(Tn);if(!e)return NaN;var n=Dn(e[1]),r=Dn(e[2]),a=Dn(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,r,a)?n*_t+r*Yt+1e3*a:NaN}(i.time),isNaN(s)))return new Date(NaN);if(!i.timezone){var l=new Date(c+s),d=new Date(0);return d.setFullYear(l.getUTCFullYear(),l.getUTCMonth(),l.getUTCDate()),d.setHours(l.getUTCHours(),l.getUTCMinutes(),l.getUTCSeconds(),l.getUTCMilliseconds()),d}return u=function(t){if("Z"===t)return 0;var e=t.match(kn);if(!e)return 0;var n="+"===e[1]?-1:1,r=parseInt(e[2]),a=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,a)?n*(r*_t+a*Yt):NaN}(i.timezone),isNaN(u)?new Date(NaN):new Date(c+s+u)}var pn={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},bn=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,Tn=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,kn=/^([+-])(\d{2})(?::?(\d{2}))?$/;function Cn(t){return t?parseInt(t):1}function Dn(t){return t&&parseFloat(t.replace(",","."))||0}var xn=[31,null,31,30,31,30,31,31,30,31,30,31];function Sn(t){return t%400==0||t%4==0&&t%100!=0}function Un(t,e){h(2,arguments);var n=m(t),r=m(e);return n.getTime()===r.getTime()}function Mn(t,e){var n,r,a,i,o,u,c,s;h(1,arguments);var l=T(),d=v(null!==(n=null!==(r=null!==(a=null!==(i=null==e?void 0:e.weekStartsOn)&&void 0!==i?i:null==e||null===(o=e.locale)||void 0===o||null===(u=o.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==a?a:l.weekStartsOn)&&void 0!==r?r:null===(c=l.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==n?n:0);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=m(t),w=f.getDay(),g=(w<d?7:0)+w-d;return f.setDate(f.getDate()-g),f.setHours(0,0,0,0),f}function Pn(t,e){return h(1,arguments),function(t,e,n){h(2,arguments);var r=Mn(t,n),a=Mn(e,n);return r.getTime()===a.getTime()}(t,Date.now(),e)}const En=Yn(".projectSection");function Nn(t){const e=Yn(".sidebarProject");let n=document.createElement("span");n.textContent=t,n.classList.add("projectNameSidebar"),e.appendChild(n)}function jn(t){On();const e=document.createElement("div"),n=document.createElement("ul");n.classList.add("todoUL");const o=document.createElement("input");o.type="checkbox",o.classList.add("projectCheckbox");const u=document.createElement("span");if(t._title.length>30){let e=t._title.slice(0,31);u.textContent=e+"..."}else u.textContent=t._title;u.classList.add("projectNameMain");const c=document.createElement("div"),s=document.createElement("div"),l=document.createElement("div"),d=document.createElement("div"),f=new Image;f.src=a,f.classList.add("projAdd");const h=new Image;h.src=i,h.classList.add("projEdit");const m=new Image;m.src=r,m.classList.add("projRemove"),s.appendChild(f),l.appendChild(h),d.appendChild(m),c.appendChild(s),c.appendChild(l),c.appendChild(d),c.classList.add("projectOptions"),e.appendChild(o),e.appendChild(u),e.appendChild(c),e.classList.add("project"),En.appendChild(e),En.appendChild(n),function(t){if(qn)for(var e=0;e<qn.length;e++)qn[e]._tProj==t._title&&wt(qn[e])}(t),document.addEventListener("click",wn)}function On(){for(document.removeEventListener("click",wn);En.firstChild;)En.removeChild(En.firstChild)}let Ln=localStorage.getItem("projects")?JSON.parse(localStorage.getItem("projects")):[],qn=localStorage.getItem("tasks")?JSON.parse(localStorage.getItem("tasks")):[];if(Ln)for(let t=0;t<Ln.length;t++)Nn(Ln[t]._title);function Yn(t){return document.querySelector(t)}function _n(){On();const t=document.createElement("ul");t.classList.add("todoUL"),En.appendChild(t),function(t){const e=ut(new Date,"yyyy-MM-dd");if(new Date(e),t)for(var n=0;n<t.length;n++){const e=ut(yn(new rn(t[n]._tTitle,t[n]._tDesc,t[n]._tDue,t[n]._tPrio,t[n]._tProj).tDue),"yyyy-MM-dd");Pn(new Date(e))&&wt(qn[n])}}(qn)}function In(){On();const t=document.createElement("ul");t.classList.add("todoUL"),En.appendChild(t),function(t){const e=ut(new Date,"yyyy-MM-dd"),n=new Date(e);if(t)for(var r=0;r<t.length;r++){const e=ut(yn(new rn(t[r]._tTitle,t[r]._tDesc,t[r]._tDue,t[r]._tPrio,t[r]._tProj).tDue),"yyyy-MM-dd");Un(new Date(e),n)&&wt(qn[r])}}(qn)}function Hn(){On();const t=document.createElement("ul");t.classList.add("todoUL"),En.appendChild(t),function(t){if(t)for(var e=0;e<t.length;e++)"high"==t[e]._tPrio&&wt(qn[e])}(qn)}function An(){On();const t=document.createElement("ul");t.classList.add("todoUL"),En.appendChild(t);for(let t=0;t<qn.length;t++)wt(qn[t])}!function(){const t=document.querySelector(".menuContainer"),i=document.querySelector(".mainLogo"),u=document.querySelector(".menuClose"),c=document.querySelector(".createProj"),s=new Image;s.src=e,s.classList.add("main-menu-logo");const l=new Image;l.src=n,l.classList.add("main-logo");const d=new Image;d.src=r,d.classList.add("menuClose");const f=new Image;f.src=a,f.classList.add("addProjButton"),t.appendChild(s),i.appendChild(l),u.appendChild(d),c.appendChild(f);const h=document.querySelector(".sidebar-menu"),m=document.querySelector(".allTasksSide"),v=document.querySelector(".importantHighTasksSide"),w=document.querySelector(".todayTasksSide"),g=document.querySelector(".weekTasksSide"),y=document.querySelector(".newProjectOverlay");t.addEventListener("click",(function(){h.style.animation="menuSlideOn 1.5s forwards"})),u.addEventListener("click",(function(){h.style.animation="menuSlideClose 1.5s forwards"})),c.addEventListener("click",(function(){h.style.animation="menuSlideClose 1.5s forwards",y.style.animation="projectSlideDown 1.5s forwards"})),h.addEventListener("click",(t=>{if("SPAN"===t.target.tagName){const e=gn(t.target.textContent);jn(new o(e._title,e._description))}})),m.addEventListener("click",An),v.addEventListener("click",Hn),w.addEventListener("click",In),g.addEventListener("click",_n)}(),function(){const t=document.querySelector(".closeButton"),e=document.querySelector(".submitButton");t.addEventListener("click",(function(){u.style.animation="projectSlideUp 1.5s forwards",s()})),e.addEventListener("click",(function(){u.style.animation="projectSlideUp 1.5s forwards";const t=function(){const t=document.getElementById("title").value;let e=document.getElementById("description").value;if(t){if(function(t){for(let e=0;e<Ln.length;e++)if(Ln[e]._title==t)return!0;return!1}(t))return c(),s(),void(u.style.animation="projectSlideDown 1.5s forwards");const n=new o(t,e);return Ln.push(n),localStorage.setItem("projects",JSON.stringify(Ln)),n}return c(),s(),void(u.style.animation="projectSlideDown 1.5s forwards")}();mn?(function(t){for(let e=0;e<Ln.length;e++)Ln[e]._title==t&&(Ln[e]._title=Ln[Ln.length-1]._title,Ln[e]._description=Ln[Ln.length-1]._description,localStorage.setItem("projects",JSON.stringify(Ln)))}(vn.textContent),function(t){const e=Yn(".sidebarProject").children;for(let n=0;n<e.length;n++)e[n].textContent==t&&(e[n].textContent=Ln[e.length-1]._title)}(vn.textContent),function(t){for(let e=0;e<qn.length;e++)qn[e]._tProj==t&&(qn[e]._tProj=Ln[Ln.length-1]._title,localStorage.setItem("tasks",JSON.stringify(qn)))}(vn.textContent),Yn(".projectNameMain").textContent=Ln[Ln.length-1]._title,Ln.splice(Ln.length-1,1),localStorage.setItem("projects",JSON.stringify(Ln)),mn=!1):(t&&(Nn(t.title),jn(t)),s())}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,