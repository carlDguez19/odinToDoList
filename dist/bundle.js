(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var o=n.getElementsByTagName("script");if(o.length)for(var c=o.length-1;c>-1&&!t;)t=o[c--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();const t=e.p+"abbfad808c2786a6a2d4.png",n=e.p+"986e98635b18601755cf.png",o=e.p+"177a54134d0bd5aefd06.png",c=e.p+"edb755c23d1ebcf9c7a4.png",i=e.p+"c9c7160b568bb10d504c.png",r=(g(".projAdd"),g(".projRemove"),document.querySelector(".newProjectOverlay"));var l=function(e){console.log("in projEditButton eventListener");const t=e.target.matches(".projEdit"),n=e.target.matches(".projRemove"),o=g(".projectNameMain");var c;t?(console.log("editButton clicked"),c=o.textContent,r.style.animation="projectSlideDown 1.5s forwards",g("#title").value=c,s(o)):n&&(console.log("removeButton clicked"),function(e){const t=g(".sidebarProject"),n=t.children;for(let o=0;o<n.length;o++)n[o].textContent==e&&t.removeChild(n[o])}(o.textContent),function(e){for(let t=0;t<m.length;t++)m[t].title==e&&m.splice(t,1)}(o.textContent),p())};function s(e){console.log("looking for project in arr");let t=0;for(let n=0;n<m.length;n++)if(t=n,m[n].title==e)return m[n]}const d=g(".projectSection");function a(e){e.slice(0,7);const t=g(".sidebarProject");let n=document.createElement("span");n.textContent=e,n.classList.add("projectNameSidebar"),t.appendChild(n)}function u(e){p();const t=document.createElement("div"),n=document.createElement("input");n.type="checkbox",n.classList.add("projectCheckbox");const r=document.createElement("span");if(e.title.length>30){let t=e.title.slice(0,31);r.textContent=t+"..."}else r.textContent=e.title;r.classList.add("projectNameMain");const l=document.createElement("div"),s=document.createElement("div"),a=document.createElement("div"),u=document.createElement("div"),m=new Image;m.src=c,m.classList.add("projAdd");const g=new Image;g.src=i,g.classList.add("projEdit");const f=new Image;f.src=o,f.classList.add("projRemove"),s.appendChild(m),a.appendChild(g),u.appendChild(f),l.appendChild(s),l.appendChild(a),l.appendChild(u),l.classList.add("projectOptions"),t.appendChild(n),t.appendChild(r),t.appendChild(l),t.classList.add("project"),d.appendChild(t),projectEListeners()}function p(){for(document.removeEventListener("click",l);d.firstChild;)d.removeChild(d.firstChild)}let m=[];function g(e){return document.querySelector(e)}class f{constructor(e,t){this.title=e,this.description=t,this.toDos=[]}get title(){return this._title}get description(){return this._description}get toDoList(){return this._toDos}set title(e){this._title=e}set description(e){this._description=e}}const h=document.querySelector(".newProjectOverlay");function j(){document.getElementById("title").value="",document.getElementById("description").value=""}!function(){const e=document.querySelector(".menuContainer"),i=document.querySelector(".mainLogo"),r=document.querySelector(".menuClose"),l=document.querySelector(".createProj"),d=new Image;d.src=t,d.classList.add("main-menu-logo");const a=new Image;a.src=n,a.classList.add("main-logo");const p=new Image;p.src=o,p.classList.add("menuClose");const m=new Image;m.src=c,m.classList.add("addProjButton"),e.appendChild(d),i.appendChild(a),r.appendChild(p),l.appendChild(m);const g=document.querySelector(".sidebar-menu"),f=document.querySelector(".newProjectOverlay");e.addEventListener("click",(function(){g.style.animation="menuSlideOn 1.5s forwards"})),r.addEventListener("click",(function(){g.style.animation="menuSlideClose 1.5s forwards"})),l.addEventListener("click",(function(){console.log("create project button clicked!!"),g.style.animation="menuSlideClose 1.5s forwards",f.style.animation="projectSlideDown 1.5s forwards"})),g.addEventListener("click",(e=>{"SPAN"===e.target.tagName&&(console.log("the following is e.target.value"),console.log(e.target.textContent),u(s(e.target.textContent)))}))}(),function(){const e=document.querySelector(".closeButton"),t=document.querySelector(".submitButton");e.addEventListener("click",(function(){h.style.animation="projectSlideUp 1.5s forwards",j()})),t.addEventListener("click",(function(){console.log("submit button clicked"),h.style.animation="projectSlideUp 1.5s forwards";const e=function(){const e=document.getElementById("title").value;let t=document.getElementById("description").value;if(e){console.log("detected title");const n=new f(e,t);return m.push(n),console.log(m[m.length-1].title),console.log(m[m.length-1].description),n}return console.log("Need a title to create a project!"),void function(){const e=document.querySelector(".errorProjectOverlay");e.style.animation="projectSlideDown 1.5s forwards",setTimeout((function(){e.style.animation="projectSlideUp 1.5s forwards"}),2500),j(),h.style.animation="projectSlideDown 1.5s forwards"}()}();e&&(console.log("project obj returned successfully"),a(e.title),u(e)),j()}))}(),u({title:"defaultProject",description:"This is a default project. You can also create your own :)"}),a("defaultProject"),m[0]={title:"defaultProject",description:"This is a default project. You can also create your own :)"}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QSxFQUFjLE9BQUUsR0FBR29DLGFBQ2pDNEIsQ0FDWCxDQUdJLE9BRkFuRixRQUFRQyxJQUFJLDBDQU1wQixXQUNJLE1BQU1vRixFQUFlbkcsU0FBU1ksY0FBYyx3QkFDNUN1RixFQUFhNUUsTUFBTUMsVUFBWSxpQ0FDL0I0RSxZQUFXLFdBQ1BELEVBQWE1RSxNQUFNQyxVQUFZLDhCQUNuQyxHQUFHLE1BQ0hzRCxJQUNBRCxFQUFZdEQsTUFBTUMsVUFBWSxnQ0FDbEMsQ0FiUTZFLEVBR1IsQ0E1QjZCQyxHQUVsQlIsSUFDQ2hGLFFBQVFDLElBQUkscUNBQ1p5QixFQUFvQnNELEVBQWE1RCxPQUNqQ2MsRUFBcUI4QyxJQUd6QmhCLEdBQ0osR0FDSixDQzFCQXlCLEdBQ0F2RCxFQUFxQixDQUFDZCxNQUFPLGlCQUFrQm1DLFlBQWEsK0RBQzVEN0IsRUFBb0Isa0JBQ3BCUCxFQUFRLEdBQUssQ0FBQ0MsTUFBTyxpQkFBa0JtQyxZQUFhLDZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2RpbnRvZG9saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL29kaW50b2RvbGlzdC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL29kaW50b2RvbGlzdC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9vZGludG9kb2xpc3QvLi9zcmMvcHJvamVjdEV2ZW50TGlzdGVuZXJzLmpzIiwid2VicGFjazovL29kaW50b2RvbGlzdC8uL3NyYy9wcm9qZWN0RE9NLmpzIiwid2VicGFjazovL29kaW50b2RvbGlzdC8uL3NyYy9tZW51RXZlbnRMaXN0ZW5lcnMuanMiLCJ3ZWJwYWNrOi8vb2RpbnRvZG9saXN0Ly4vc3JjL3Byb2plY3RDbGFzcy5qcyIsIndlYnBhY2s6Ly9vZGludG9kb2xpc3QvLi9zcmMvcHJvamVjdEZvcm0uanMiLCJ3ZWJwYWNrOi8vb2RpbnRvZG9saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgIXNjcmlwdFVybCkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsImltcG9ydCB7IGRxcyB9IGZyb20gXCIuL21lbnVFdmVudExpc3RlbmVyc1wiO1xuaW1wb3J0IHsgcHJvakFyciB9IGZyb20gXCIuL21lbnVFdmVudExpc3RlbmVyc1wiO1xuaW1wb3J0IHsgY2xlYXJNYWluIH0gZnJvbSBcIi4vcHJvamVjdERPTVwiO1xuLy9pbXBvcnQgeyBwcm9qT3ZlcmxheSB9IGZyb20gXCIuL21lbnVFdmVudExpc3RlbmVyc1wiO1xuXG5jb25zdCBwcm9qVGFza0FkZCA9IGRxcyhcIi5wcm9qQWRkXCIpO1xuY29uc3QgcHJvalJlbUJ1dHRvbiA9IGRxcyhcIi5wcm9qUmVtb3ZlXCIpO1xuY29uc3QgcHJvak92ZXJsYXkxID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uZXdQcm9qZWN0T3ZlcmxheVwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByb2plY3RFTGlzdGVuZXJzKCl7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfdGVzdGVyaW5nKVxufTtcblxuZXhwb3J0IHZhciBfdGVzdGVyaW5nID0gZnVuY3Rpb24oZSl7XG4gICAgLy9nbyB0aHJvdWhnIGFycmF5IGNvbXBhcmluZyB0aXRsZVxuICAgICAgICAvL3doZW4gZm91bmQgZmlsbCBwcm9qZWN0Rm9ybSBhbmQgZHJvcCBmb3JtIGRvd24gZm9yIHVzZXJcbiAgICAgICAgLy9pZiBzdWJtaXQgdGhlbiByZXBsYWNlIGluZm8gd2l0aCBuZXcgaW5mb1xuICAgICAgICAvL2Vsc2UgaWYgY2FuY2VsIHRoZW4gbGVhdmUgcHJvamVjdCBhcyBpdCB3YXNcbiAgICAgICAgY29uc29sZS5sb2coXCJpbiBwcm9qRWRpdEJ1dHRvbiBldmVudExpc3RlbmVyXCIpO1xuICAgICAgICBjb25zdCBlZGl0QnV0dG9uID0gZS50YXJnZXQubWF0Y2hlcyhcIi5wcm9qRWRpdFwiKTtcbiAgICAgICAgY29uc3QgcmVtb3ZlQnV0dG9uID0gZS50YXJnZXQubWF0Y2hlcyhcIi5wcm9qUmVtb3ZlXCIpO1xuICAgICAgICBjb25zdCBjdXJyVGl0bGUgPSBkcXMoXCIucHJvamVjdE5hbWVNYWluXCIpO1xuICAgICAgICBpZihlZGl0QnV0dG9uKXsvL3RoaXMgd2lsbCBiZSBkb25lIG9uY2UgJ3JlbW92ZScgaXMgY29tcGxldGVkXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImVkaXRCdXR0b24gY2xpY2tlZFwiKTtcbiAgICAgICAgICAgIGVkaXRGb3JtKGN1cnJUaXRsZS50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICBjb25zdCBmb3VuZFByb2ogPSBmaW5kUHJvamVjdEluQXJyKGN1cnJUaXRsZSk7Ly90aGlzIHdpbGwgYmUgbGVmdCB0aWxsIHRoZSBlbmRcbiAgICAgICAgfWVsc2UgaWYocmVtb3ZlQnV0dG9uKXtcbiAgICAgICAgICAgIC8vY29uc3QgY3VyclRpdGxlID0gZHFzKFwiLnByb2plY3ROYW1lTWFpblwiKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVtb3ZlQnV0dG9uIGNsaWNrZWRcIik7XG4gICAgICAgICAgICByZW1vdmVQcm9qZWN0U2lkZShjdXJyVGl0bGUudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgcmVtb3ZlUHJvakFycihjdXJyVGl0bGUudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgY2xlYXJNYWluKCk7XG4gICAgICAgICAgICAvL2NvbnN0IHNpZGVCYXIgPSBkcXMoXCIuc2lkZWJhci1tZW51XCIpO1xuICAgICAgICAgICAgLy9zaWRlQmFyLnN0eWxlLmFuaW1hdGlvbiA9ICdtZW51U2xpZGVPbiAxLjVzIGZvcndhcmRzJztcbiAgICAgICAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVQcm9qZWN0U2lkZShwcm9qTmFtZSl7XG4gICAgY29uc3Qgc2lkZWJhclByb2ogPSBkcXMoXCIuc2lkZWJhclByb2plY3RcIik7XG4gICAgY29uc3Qgc2lkZWJhclByb2pDaGlsZHJlbiA9IHNpZGViYXJQcm9qLmNoaWxkcmVuO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaWRlYmFyUHJvakNoaWxkcmVuLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgaWYoc2lkZWJhclByb2pDaGlsZHJlbltpXS50ZXh0Q29udGVudCA9PSBwcm9qTmFtZSl7XG4gICAgICAgICAgICBzaWRlYmFyUHJvai5yZW1vdmVDaGlsZChzaWRlYmFyUHJvakNoaWxkcmVuW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlUHJvakFycihwcm9qTmFtZSl7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHByb2pBcnIubGVuZ3RoOyBpKyspe1xuICAgICAgICBpZihwcm9qQXJyW2ldLnRpdGxlID09IHByb2pOYW1lKXtcbiAgICAgICAgICAgIHByb2pBcnIuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBlZGl0Rm9ybShwcm9qZWN0VGl0bGUpe1xuICAgIHByb2pPdmVybGF5MS5zdHlsZS5hbmltYXRpb24gPSAncHJvamVjdFNsaWRlRG93biAxLjVzIGZvcndhcmRzJztcbiAgICBjb25zdCB0aXRsZUluID0gZHFzKFwiI3RpdGxlXCIpO1xuICAgIHRpdGxlSW4udmFsdWUgPSBwcm9qZWN0VGl0bGU7XG5cbiAgICAvL2FkZCBldmVudExpc3RlbmVyIGZvciBzdWJtaXQgYW5kIGNhbmNlbCBidXR0b25zIG9uIHByb2plY3QgZm9ybVxuICAgIC8vaG9wZWZ1bGx5IHRoZXkgd2lsbCBkbyBzb21ldGhpbmcgZGlmZmVyZW50Pz8/XG59XG5leHBvcnQgZnVuY3Rpb24gZmluZFByb2plY3RJbkFycih0aXRsZSl7Ly9NSUdIVCBOT1QgTkVFRCBUSElTIE1JR0hUIE5PVCBORUVEIFRISVMgTUlHSFQgTk9UIE5FRUQgVEhJU1xuICAgIGNvbnNvbGUubG9nKFwibG9va2luZyBmb3IgcHJvamVjdCBpbiBhcnJcIilcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwcm9qQXJyLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICBpZihwcm9qQXJyW2ldLnRpdGxlID09IHRpdGxlKXtcbiAgICAgICAgICAgIHJldHVybiBwcm9qQXJyW2ldO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCBSZW1vdmUgZnJvbSAnLi4vc3JjL2ltZ3MvY2xvc2UucG5nJztcbmltcG9ydCBDcmVhdGUgZnJvbSAnLi4vc3JjL2ltZ3MvYWRkLnBuZyc7XG5pbXBvcnQgRWRpdCBmcm9tICcuLi9zcmMvaW1ncy9lZGl0LnBuZyc7XG5pbXBvcnQgeyBkcXMgfSBmcm9tICcuL21lbnVFdmVudExpc3RlbmVycyc7XG5pbXBvcnQgeyBfdGVzdGVyaW5nIH0gZnJvbSAnLi9wcm9qZWN0RXZlbnRMaXN0ZW5lcnMnO1xuXG5jb25zdCBtYWluU2VjID0gZHFzKFwiLnByb2plY3RTZWN0aW9uXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkUHJvamVjdFRvU2lkZWJhcihwcm9qZWN0VGl0bGUpe1xuICAgIGxldCBuZXdQcm9qVGl0bGUgPSBwcm9qZWN0VGl0bGUuc2xpY2UoMCw3KTtcbiAgICBjb25zdCBwcm9qU2lkZSA9IGRxcyhcIi5zaWRlYmFyUHJvamVjdFwiKTtcbiAgICBsZXQgcHJvalRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHByb2pUaXRsZS50ZXh0Q29udGVudCA9IHByb2plY3RUaXRsZTtcbiAgICBwcm9qVGl0bGUuY2xhc3NMaXN0LmFkZCgncHJvamVjdE5hbWVTaWRlYmFyJyk7XG4gICAgcHJvalNpZGUuYXBwZW5kQ2hpbGQocHJvalRpdGxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlQcm9qZWN0SW5NYWluKHByb2plY3Qpe1xuICAgIGNsZWFyTWFpbigpO1xuICAgIGNvbnN0IHByb2pEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIFxuICAgIGNvbnN0IHByb2pDaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgcHJvakNoZWNrYm94LnR5cGUgPSBcImNoZWNrYm94XCI7XG4gICAgcHJvakNoZWNrYm94LmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0Q2hlY2tib3hcIik7XG5cbiAgICBcbiAgICBjb25zdCBwcm9qTmFtZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgaWYocHJvamVjdC50aXRsZS5sZW5ndGggPiAzMCl7XG4gICAgICAgIGxldCBtYWluTW9kUHJvalRpdGxlID0gcHJvamVjdC50aXRsZS5zbGljZSgwLDMxKTtcbiAgICAgICAgcHJvak5hbWVTcGFuLnRleHRDb250ZW50ID0gbWFpbk1vZFByb2pUaXRsZSArIFwiLi4uXCI7XG4gICAgfWVsc2V7XG4gICAgICAgIHByb2pOYW1lU3Bhbi50ZXh0Q29udGVudCA9IHByb2plY3QudGl0bGU7XG4gICAgfVxuICAgIHByb2pOYW1lU3Bhbi5jbGFzc0xpc3QuYWRkKFwicHJvamVjdE5hbWVNYWluXCIpO1xuXG4gICAgXG4gICAgY29uc3QgYnV0dG9uQ29udCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIFxuICAgIGNvbnN0IGFkZERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnN0IGVkaXREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCByZW1vdmVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGNvbnN0IGFkZEljb24gPSBuZXcgSW1hZ2UoKTtcbiAgICBhZGRJY29uLnNyYyA9IENyZWF0ZTtcbiAgICBhZGRJY29uLmNsYXNzTGlzdC5hZGQoJ3Byb2pBZGQnKTtcblxuICAgIGNvbnN0IGVkaXRJY29uID0gbmV3IEltYWdlKCk7XG4gICAgZWRpdEljb24uc3JjID0gRWRpdDtcbiAgICBlZGl0SWNvbi5jbGFzc0xpc3QuYWRkKCdwcm9qRWRpdCcpO1xuXG4gICAgY29uc3QgcmVtSWNvbiA9IG5ldyBJbWFnZSgpO1xuICAgIHJlbUljb24uc3JjID0gUmVtb3ZlO1xuICAgIHJlbUljb24uY2xhc3NMaXN0LmFkZCgncHJvalJlbW92ZScpO1xuXG4gICAgYWRkRGl2LmFwcGVuZENoaWxkKGFkZEljb24pO1xuICAgIGVkaXREaXYuYXBwZW5kQ2hpbGQoZWRpdEljb24pO1xuICAgIHJlbW92ZURpdi5hcHBlbmRDaGlsZChyZW1JY29uKTtcbiAgICBcbiAgICBidXR0b25Db250LmFwcGVuZENoaWxkKGFkZERpdik7XG4gICAgYnV0dG9uQ29udC5hcHBlbmRDaGlsZChlZGl0RGl2KTtcbiAgICBidXR0b25Db250LmFwcGVuZENoaWxkKHJlbW92ZURpdik7XG4gICAgYnV0dG9uQ29udC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdE9wdGlvbnNcIik7XG5cbiAgICBwcm9qRGl2LmFwcGVuZENoaWxkKHByb2pDaGVja2JveCk7XG4gICAgcHJvakRpdi5hcHBlbmRDaGlsZChwcm9qTmFtZVNwYW4pO1xuICAgIHByb2pEaXYuYXBwZW5kQ2hpbGQoYnV0dG9uQ29udCk7XG4gICAgcHJvakRpdi5jbGFzc0xpc3QuYWRkKFwicHJvamVjdFwiKTtcblxuICAgIG1haW5TZWMuYXBwZW5kQ2hpbGQocHJvakRpdik7XG4gICAgXG4gICAgLy9jYWxsIGV2ZW50TGlzdGVuZXIgaGVyZVxuICAgIHByb2plY3RFTGlzdGVuZXJzKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhck1haW4oKXtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIF90ZXN0ZXJpbmcpO1xuICAgIHdoaWxlKG1haW5TZWMuZmlyc3RDaGlsZCl7XG4gICAgICAgIG1haW5TZWMucmVtb3ZlQ2hpbGQobWFpblNlYy5maXJzdENoaWxkKVxuICAgIH1cbn0iLCJpbXBvcnQgTWVudSBmcm9tICcuLi9zcmMvaW1ncy9tZW51LnBuZydcbmltcG9ydCBCcmFuZCBmcm9tICcuLi9zcmMvaW1ncy9Xb3JrZXJBbnRzTW9kLnBuZyc7XG5pbXBvcnQgQ2xvc2UgZnJvbSAnLi4vc3JjL2ltZ3MvY2xvc2UucG5nJztcbmltcG9ydCBDcmVhdGUgZnJvbSAnLi4vc3JjL2ltZ3MvYWRkLnBuZyc7XG5pbXBvcnQgeyBkaXNwbGF5UHJvamVjdEluTWFpbiB9IGZyb20gJy4vcHJvamVjdERPTSc7XG5pbXBvcnQgeyBmaW5kUHJvamVjdEluQXJyIH0gZnJvbSAnLi9wcm9qZWN0RXZlbnRMaXN0ZW5lcnMnO1xuLy9JIE5FRUQgVE8gQUREIEEgR0xPQkFMIFZBUklBQkxFIEFSUkFZIFRIQVQgU1RPUkVTIEFMTCBUSEUgUFJPSkVDVFMgSEVSRVxuZXhwb3J0IGxldCBwcm9qQXJyID0gW107XG5cbmV4cG9ydCBmdW5jdGlvbiBkcXMoYyl7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZW51RXZlbnRMaXN0ZW4oKXtcbiAgICBjb25zdCBtZW51Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tZW51Q29udGFpbmVyXCIpO1xuICAgIGNvbnN0IG1haW5Mb2dvQ29udCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWFpbkxvZ29cIik7XG4gICAgY29uc3QgY2xvc2VDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1lbnVDbG9zZVwiKTtcbiAgICBjb25zdCBjcmVhdGVQcm9qQ29udCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY3JlYXRlUHJvalwiKTtcbiAgICBcbiAgICBjb25zdCBtZW51SWNvbiA9IG5ldyBJbWFnZSgpO1xuICAgIG1lbnVJY29uLnNyYyA9IE1lbnU7XG4gICAgbWVudUljb24uY2xhc3NMaXN0LmFkZCgnbWFpbi1tZW51LWxvZ28nKTtcblxuICAgIGNvbnN0IG1haW5Mb2dvSW1nID0gbmV3IEltYWdlKCk7XG4gICAgbWFpbkxvZ29JbWcuc3JjID0gQnJhbmQ7XG4gICAgbWFpbkxvZ29JbWcuY2xhc3NMaXN0LmFkZCgnbWFpbi1sb2dvJyk7XG5cbiAgICBjb25zdCBjbG9zZUljb24gPSBuZXcgSW1hZ2UoKTtcbiAgICBjbG9zZUljb24uc3JjID0gQ2xvc2U7XG4gICAgY2xvc2VJY29uLmNsYXNzTGlzdC5hZGQoJ21lbnVDbG9zZScpO1xuXG4gICAgY29uc3QgY3JlYXRlUHJvakljb24gPSBuZXcgSW1hZ2UoKTtcbiAgICBjcmVhdGVQcm9qSWNvbi5zcmMgPSBDcmVhdGU7XG4gICAgY3JlYXRlUHJvakljb24uY2xhc3NMaXN0LmFkZCgnYWRkUHJvakJ1dHRvbicpO1xuXG4gICAgbWVudUNvbnRhaW5lci5hcHBlbmRDaGlsZChtZW51SWNvbik7XG4gICAgbWFpbkxvZ29Db250LmFwcGVuZENoaWxkKG1haW5Mb2dvSW1nKTtcbiAgICBjbG9zZUNvbnRhaW5lci5hcHBlbmRDaGlsZChjbG9zZUljb24pO1xuICAgIGNyZWF0ZVByb2pDb250LmFwcGVuZENoaWxkKGNyZWF0ZVByb2pJY29uKTtcblxuICAgIGNvbnN0IHNpZGVCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNpZGViYXItbWVudVwiKTtcbiAgICBjb25zdCBwcm9qT3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmV3UHJvamVjdE92ZXJsYXlcIik7XG5cbiAgICBtZW51Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgc2lkZUJhci5zdHlsZS5hbmltYXRpb24gPSAnbWVudVNsaWRlT24gMS41cyBmb3J3YXJkcyc7XG4gICAgfSk7XG4gICAgY2xvc2VDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICBzaWRlQmFyLnN0eWxlLmFuaW1hdGlvbiA9ICdtZW51U2xpZGVDbG9zZSAxLjVzIGZvcndhcmRzJztcbiAgICB9KTtcbiAgICBjcmVhdGVQcm9qQ29udC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY3JlYXRlIHByb2plY3QgYnV0dG9uIGNsaWNrZWQhIVwiKTtcbiAgICAgICAgc2lkZUJhci5zdHlsZS5hbmltYXRpb24gPSAnbWVudVNsaWRlQ2xvc2UgMS41cyBmb3J3YXJkcyc7XG4gICAgICAgIHByb2pPdmVybGF5LnN0eWxlLmFuaW1hdGlvbiA9ICdwcm9qZWN0U2xpZGVEb3duIDEuNXMgZm9yd2FyZHMnO1xuICAgIH0pO1xuICAgIHNpZGVCYXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBpZihlLnRhcmdldC50YWdOYW1lID09PSAnU1BBTicpe1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0aGUgZm9sbG93aW5nIGlzIGUudGFyZ2V0LnZhbHVlXCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZS50YXJnZXQudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgY29uc3QgZGlzcFByb2ogPSBmaW5kUHJvamVjdEluQXJyKGUudGFyZ2V0LnRleHRDb250ZW50KVxuICAgICAgICAgICAgZGlzcGxheVByb2plY3RJbk1haW4oZGlzcFByb2opO1xuICAgICAgICB9XG4gICAgfSk7XG59IiwiZXhwb3J0IGNsYXNzIFByb2plY3R7XG4gICAgY29uc3RydWN0b3IodGl0bGUsIGRlc2NyaXB0aW9uKXtcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMudG9Eb3MgPSBbXTtcbiAgICB9XG4gICAgZ2V0IHRpdGxlKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl90aXRsZTtcbiAgICB9XG4gICAgZ2V0IGRlc2NyaXB0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXNjcmlwdGlvbjtcbiAgICB9XG4gICAgZ2V0IHRvRG9MaXN0KCl7Ly9nZXQgYXJyYXkgdGhlbiBwdXNoIGEgdG9Eb1xuICAgICAgICByZXR1cm4gdGhpcy5fdG9Eb3M7XG4gICAgfVxuXG4gICAgc2V0IHRpdGxlKG5ld1RpdGxlKXtcbiAgICAgICAgdGhpcy5fdGl0bGUgPSBuZXdUaXRsZTtcbiAgICB9XG4gICAgc2V0IGRlc2NyaXB0aW9uKG5ld0Rlc2Mpe1xuICAgICAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IG5ld0Rlc2M7XG4gICAgfVxuXG59IiwiaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gXCIuL3Byb2plY3RDbGFzc1wiO1xuaW1wb3J0IHsgcHJvakFyciB9IGZyb20gXCIuL21lbnVFdmVudExpc3RlbmVyc1wiO1xuaW1wb3J0IHsgYWRkUHJvamVjdFRvU2lkZWJhciB9IGZyb20gXCIuL3Byb2plY3RET01cIjtcbmltcG9ydCB7IGRpc3BsYXlQcm9qZWN0SW5NYWluIH0gZnJvbSBcIi4vcHJvamVjdERPTVwiO1xuaW1wb3J0IHsgcHJvamVjdEVMaXN0ZW5lcnMgfSBmcm9tIFwiLi9wcm9qZWN0RXZlbnRMaXN0ZW5lcnNcIjtcbmltcG9ydCB7IF90ZXN0ZXJpbmcgfSBmcm9tIFwiLi9wcm9qZWN0RXZlbnRMaXN0ZW5lcnNcIjtcblxuY29uc3QgcHJvak92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5ld1Byb2plY3RPdmVybGF5XCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJvamVjdE92ZXJsYXlTdHVmZigpe1xuICAgIC8vY29uc3QgcHJvak92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5ld1Byb2plY3RPdmVybGF5XCIpO1xuXG4gICAgLy9idXR0b25zXG4gICAgY29uc3QgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNsb3NlQnV0dG9uXCIpO1xuICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3VibWl0QnV0dG9uXCIpO1xuXG4gICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICBwcm9qT3ZlcmxheS5zdHlsZS5hbmltYXRpb24gPSAncHJvamVjdFNsaWRlVXAgMS41cyBmb3J3YXJkcyc7XG4gICAgICAgIHByb2plY3RGb3JtQ2xlYXIoKTtcbiAgICB9KVxuICAgIHN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKFwic3VibWl0IGJ1dHRvbiBjbGlja2VkXCIpO1xuICAgICAgICBwcm9qT3ZlcmxheS5zdHlsZS5hbmltYXRpb24gPSAncHJvamVjdFNsaWRlVXAgMS41cyBmb3J3YXJkcyc7XG4gICAgICAgIGNvbnN0IHByb2plY3RQYXJhbSA9IGV4dHJhY3REYXRhRm9yUHJvamVjdCgpO1xuICAgICAgICAvL2NyZWF0ZVByb2plY3RET00ocHJvamVjdFBhcmFtKTsvL3RoaXMgd2lsbCBiZSBpbiBwcm9qZWN0RE9NLmpzIGZpbGVcbiAgICAgICAgaWYocHJvamVjdFBhcmFtKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicHJvamVjdCBvYmogcmV0dXJuZWQgc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgYWRkUHJvamVjdFRvU2lkZWJhcihwcm9qZWN0UGFyYW0udGl0bGUpLy90aGlzIHdpbGwgYmUgaW4gcHJvamVjdERPTS5qcyBmaWxlXG4gICAgICAgICAgICBkaXNwbGF5UHJvamVjdEluTWFpbihwcm9qZWN0UGFyYW0pO1xuICAgICAgICAgICAgLy9wcm9qZWN0RUxpc3RlbmVycygpO1xuICAgICAgICB9XG4gICAgICAgIHByb2plY3RGb3JtQ2xlYXIoKTtcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBleHRyYWN0RGF0YUZvclByb2plY3QoKXtcbiAgICBjb25zdCB0aXRsZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aXRsZVwiKS52YWx1ZVxuICAgIGxldCBkZXNjSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRlc2NyaXB0aW9uXCIpLnZhbHVlO1xuXG4gICAgaWYodGl0bGVJbnB1dCl7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZGV0ZWN0ZWQgdGl0bGVcIik7Ly9kZWJ1Z2dpbmdcbiAgICAgICAgY29uc3QgcHJvamVjdE1hZGUgPSBuZXcgUHJvamVjdCh0aXRsZUlucHV0LCBkZXNjSW5wdXQpO1xuICAgICAgICBwcm9qQXJyLnB1c2gocHJvamVjdE1hZGUpO1xuICAgICAgICBjb25zb2xlLmxvZyhwcm9qQXJyWyhwcm9qQXJyLmxlbmd0aCktMV0udGl0bGUpO1xuICAgICAgICBjb25zb2xlLmxvZyhwcm9qQXJyWyhwcm9qQXJyLmxlbmd0aCktMV0uZGVzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gcHJvamVjdE1hZGU7XG4gICAgfWVsc2V7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTmVlZCBhIHRpdGxlIHRvIGNyZWF0ZSBhIHByb2plY3QhXCIpOy8vZGVidWdnaW5nXG4gICAgICAgIGRpc3BsYXlOZWVkVGl0bGUoKTsvLyBDQU4gSU5TRVJUIERPTSBNQU5JUFVMQVRJT04gVE8gU0hJRlQgRE9XTiBUSEUgRVJST1IgT1ZFUkxBWSA6KVxuICAgICAgICByZXR1cm47XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkaXNwbGF5TmVlZFRpdGxlKCl7XG4gICAgY29uc3QgZXJyb3JPdmVybGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5lcnJvclByb2plY3RPdmVybGF5XCIpO1xuICAgIGVycm9yT3ZlcmxheS5zdHlsZS5hbmltYXRpb24gPSBcInByb2plY3RTbGlkZURvd24gMS41cyBmb3J3YXJkc1wiXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICBlcnJvck92ZXJsYXkuc3R5bGUuYW5pbWF0aW9uID0gXCJwcm9qZWN0U2xpZGVVcCAxLjVzIGZvcndhcmRzXCJcbiAgICB9LCAyNTAwKTtcbiAgICBwcm9qZWN0Rm9ybUNsZWFyKCk7XG4gICAgcHJvak92ZXJsYXkuc3R5bGUuYW5pbWF0aW9uID0gXCJwcm9qZWN0U2xpZGVEb3duIDEuNXMgZm9yd2FyZHNcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2plY3RGb3JtQ2xlYXIoKXtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRpdGxlXCIpLnZhbHVlID0gXCJcIjtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRlc2NyaXB0aW9uXCIpLnZhbHVlID0gXCJcIjtcbn0iLCJpbXBvcnQgeyBtZW51RXZlbnRMaXN0ZW4sIHByb2pBcnIgfSBmcm9tIFwiLi9tZW51RXZlbnRMaXN0ZW5lcnNcIjtcbmltcG9ydCB7IGFkZFByb2plY3RUb1NpZGViYXIsIGRpc3BsYXlQcm9qZWN0SW5NYWluIH0gZnJvbSBcIi4vcHJvamVjdERPTVwiO1xuaW1wb3J0IHsgcHJvamVjdE92ZXJsYXlTdHVmZiB9IGZyb20gXCIuL3Byb2plY3RGb3JtXCI7XG4vL2ltcG9ydCB7IHByb2plY3RFTGlzdGVuZXJzIH0gZnJvbSBcIi4vcHJvamVjdEV2ZW50TGlzdGVuZXJzXCI7XG4vLyBpbXBvcnQgeyBQcm9qZWN0IH0gZnJvbSBcIi4vcHJvamVjdENsYXNzXCI7XG4vLyBpbXBvcnQgeyBjcmVhdGVQcm9qZWN0RnJvbURhdGEgfSBmcm9tIFwiLi9wcm9qZWN0Rm9ybVwiO1xubWVudUV2ZW50TGlzdGVuKCk7XG5wcm9qZWN0T3ZlcmxheVN0dWZmKCk7XG5kaXNwbGF5UHJvamVjdEluTWFpbih7dGl0bGU6IFwiZGVmYXVsdFByb2plY3RcIiwgZGVzY3JpcHRpb246IFwiVGhpcyBpcyBhIGRlZmF1bHQgcHJvamVjdC4gWW91IGNhbiBhbHNvIGNyZWF0ZSB5b3VyIG93biA6KVwifSk7XG5hZGRQcm9qZWN0VG9TaWRlYmFyKFwiZGVmYXVsdFByb2plY3RcIik7XG5wcm9qQXJyWzBdID0ge3RpdGxlOiBcImRlZmF1bHRQcm9qZWN0XCIsIGRlc2NyaXB0aW9uOiBcIlRoaXMgaXMgYSBkZWZhdWx0IHByb2plY3QuIFlvdSBjYW4gYWxzbyBjcmVhdGUgeW91ciBvd24gOilcIn07XG4vL3Byb2plY3RFTGlzdGVuZXJzKCk7XG4vLyBsZXQgcHJvajEgPSBuZXcgUHJvamVjdChcImNhcmxvc0JydWhcIiwgXCJhcGl1ZlwiKTtcbi8vIGNvbnNvbGUubG9nKHByb2oxLm5hbWUpO1xuLy8gY29uc29sZS5sb2cocHJvajEuZGVzY3JpcHRpb24pOyJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZyIsImdsb2JhbFRoaXMiLCJ0aGlzIiwiRnVuY3Rpb24iLCJlIiwid2luZG93Iiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiZG9jdW1lbnQiLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGVuZ3RoIiwiaSIsIkVycm9yIiwicmVwbGFjZSIsInAiLCJwcm9qT3ZlcmxheTEiLCJkcXMiLCJxdWVyeVNlbGVjdG9yIiwiX3Rlc3RlcmluZyIsImNvbnNvbGUiLCJsb2ciLCJlZGl0QnV0dG9uIiwidGFyZ2V0IiwibWF0Y2hlcyIsInJlbW92ZUJ1dHRvbiIsImN1cnJUaXRsZSIsInByb2plY3RUaXRsZSIsInRleHRDb250ZW50Iiwic3R5bGUiLCJhbmltYXRpb24iLCJ2YWx1ZSIsImZpbmRQcm9qZWN0SW5BcnIiLCJwcm9qTmFtZSIsInNpZGViYXJQcm9qIiwic2lkZWJhclByb2pDaGlsZHJlbiIsImNoaWxkcmVuIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVQcm9qZWN0U2lkZSIsInByb2pBcnIiLCJ0aXRsZSIsInNwbGljZSIsInJlbW92ZVByb2pBcnIiLCJjbGVhck1haW4iLCJpbmRleCIsIm1haW5TZWMiLCJhZGRQcm9qZWN0VG9TaWRlYmFyIiwic2xpY2UiLCJwcm9qU2lkZSIsInByb2pUaXRsZSIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJhcHBlbmRDaGlsZCIsImRpc3BsYXlQcm9qZWN0SW5NYWluIiwicHJvamVjdCIsInByb2pEaXYiLCJwcm9qQ2hlY2tib3giLCJ0eXBlIiwicHJvak5hbWVTcGFuIiwibWFpbk1vZFByb2pUaXRsZSIsImJ1dHRvbkNvbnQiLCJhZGREaXYiLCJlZGl0RGl2IiwicmVtb3ZlRGl2IiwiYWRkSWNvbiIsIkltYWdlIiwiZWRpdEljb24iLCJyZW1JY29uIiwicHJvamVjdEVMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZmlyc3RDaGlsZCIsImMiLCJQcm9qZWN0IiwiY29uc3RydWN0b3IiLCJkZXNjcmlwdGlvbiIsInRvRG9zIiwiX3RpdGxlIiwiX2Rlc2NyaXB0aW9uIiwidG9Eb0xpc3QiLCJfdG9Eb3MiLCJuZXdUaXRsZSIsIm5ld0Rlc2MiLCJwcm9qT3ZlcmxheSIsInByb2plY3RGb3JtQ2xlYXIiLCJnZXRFbGVtZW50QnlJZCIsIm1lbnVDb250YWluZXIiLCJtYWluTG9nb0NvbnQiLCJjbG9zZUNvbnRhaW5lciIsImNyZWF0ZVByb2pDb250IiwibWVudUljb24iLCJtYWluTG9nb0ltZyIsImNsb3NlSWNvbiIsImNyZWF0ZVByb2pJY29uIiwic2lkZUJhciIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0YWdOYW1lIiwibWVudUV2ZW50TGlzdGVuIiwiY2xvc2VCdXR0b24iLCJzdWJtaXRCdXR0b24iLCJwcm9qZWN0UGFyYW0iLCJ0aXRsZUlucHV0IiwiZGVzY0lucHV0IiwicHJvamVjdE1hZGUiLCJwdXNoIiwiZXJyb3JPdmVybGF5Iiwic2V0VGltZW91dCIsImRpc3BsYXlOZWVkVGl0bGUiLCJleHRyYWN0RGF0YUZvclByb2plY3QiLCJwcm9qZWN0T3ZlcmxheVN0dWZmIl0sInNvdXJjZVJvb3QiOiIifQ==