(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var i=o.length-1;i>-1&&!e;)e=o[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();const e=t.p+"abbfad808c2786a6a2d4.png",n=t.p+"986e98635b18601755cf.png",o=t.p+"177a54134d0bd5aefd06.png",i=t.p+"edb755c23d1ebcf9c7a4.png",c=t.p+"c9c7160b568bb10d504c.png";class s{constructor(t,e,n,o,i){this.tTitle=t,this.tDesc=e,this.tDue=n,this.tPrio=o,this.tProj=i}set tTitle(t){this._tTitle=t}set tDesc(t){this._tDesc=t}set tDue(t){this._tDue=t}set tPrio(t){this._tPrio=t}set tProj(t){this._tProj=t}get tTitle(){return this._tTitle}get tDesc(){return this._tDesc}get tDue(){return this._tDue}get tPrio(){return this._tPrio}get tProj(){return this._tProj}}class r{constructor(t,e){this.title=t,this.description=e,this.toDos=[]}newTask(t,e,n,o,i){let c=new s(t,e,n,o,i);return this.toDos.push(c),c}printTasks(){for(var t=0;t<this.toDos.length;t++)console.log(this.toDos[t])}get numOfTasks(){return this.toDos.length}get title(){return this._title}get description(){return this._description}get toDoList(){return this.toDos}set title(t){this._title=t}set description(t){this._description=t}}const l=document.querySelector(".newProjectOverlay");function d(){const t=document.querySelector(".errorProjectOverlay");t.style.animation="projectSlideDown 1.5s forwards",setTimeout((function(){t.style.animation="projectSlideUp 1.5s forwards"}),2500)}function a(){document.getElementById("title").value="",document.getElementById("description").value=""}function u(t){const e=document.querySelector(".todoUL"),n=document.createElement("li"),i=document.createElement("div"),s=document.createElement("input");s.type="checkbox";const r=document.createElement("input");r.type="date";const l=document.createElement("div"),d=document.createElement("div"),a=new Image;a.src=c,a.classList.add("projEdit");const u=new Image;u.src=o,u.classList.add("projRemove"),l.appendChild(a),d.appendChild(u),n.textContent=t.tTitle+"  "+t.tDue,n.appendChild(r),i.appendChild(s),i.appendChild(l),i.appendChild(d),i.classList.add("taskButtons"),n.appendChild(i),n.classList.add("todo"),e.appendChild(n)}const p=I(".newTaskOverlay"),m=I(".taskCloseButton"),h=I(".taskSubmitButton");function f(){m.addEventListener("click",(function(){v(),p.style.animation="projectSlideUp 1.5s forwards"})),h.addEventListener("click",g)}function g(){p.style.animation="projectSlideUp 1.5s forwards";const t=function(t){const e=document.getElementById("tTitle").value,n=document.getElementById("tDescription").value,o=document.getElementById("tDueDate").value,i=document.getElementById("tTaskPrio").value,c=I(".projectNameMain").textContent;console.log(c);const s=L(c);if(e&&o){console.log(s.title);const t=s.newTask(e,n,o,i,s.title);return v(),t}return d(),v(),void(p.style.animation="projectSlideDown 1.5s forwards")}();t&&u(t),v(),h.removeEventListener("click",g)}function v(){document.getElementById("tTitle").value="",document.getElementById("tDescription").value="",document.getElementById("tDueDate").value="",document.getElementById("tTaskPrio").value="Select One"}const y=document.querySelector(".newProjectOverlay");let C=!1;const w=I(".projectNameMain");function j(){document.addEventListener("click",E)}var E=function(t){const e=t.target.matches(".projEdit"),n=t.target.matches(".projRemove"),o=t.target.matches(".projAdd");if(e)console.log("editButton clicked"),i=w.textContent,y.style.animation="projectSlideDown 1.5s forwards",I("#title").value=i,C=!0;else if(n){console.log("removeButton clicked"),function(t){const e=I(".sidebarProject"),n=e.children;for(let o=0;o<n.length;o++)n[o].textContent==t&&e.removeChild(n[o])}(w.textContent),S(w.textContent),P();for(let t=0;t<B.length;t++)console.log(t+1+" "+B[t].title)}else o&&(p.style.animation="projectSlideDown 1.5s forwards",f());var i};function S(t){for(let e=0;e<B.length;e++)B[e].title==t&&B.splice(e,1)}function L(t){let e=0;for(let n=0;n<B.length;n++)if(e=n,B[n].title==t)return B[n]}const D=I(".projectSection");function k(t){const e=I(".sidebarProject");let n=document.createElement("span");n.textContent=t,n.classList.add("projectNameSidebar"),e.appendChild(n)}function b(t){P();const e=document.createElement("div"),n=document.createElement("ul");n.classList.add("todoUL");const s=document.createElement("input");s.type="checkbox",s.classList.add("projectCheckbox");const r=document.createElement("span");if(t.title.length>30){let e=t.title.slice(0,31);r.textContent=e+"..."}else r.textContent=t.title;r.classList.add("projectNameMain");const l=document.createElement("div"),d=document.createElement("div"),a=document.createElement("div"),p=document.createElement("div"),m=new Image;m.src=i,m.classList.add("projAdd");const h=new Image;h.src=c,h.classList.add("projEdit");const f=new Image;f.src=o,f.classList.add("projRemove"),d.appendChild(m),a.appendChild(h),p.appendChild(f),l.appendChild(d),l.appendChild(a),l.appendChild(p),l.classList.add("projectOptions"),e.appendChild(s),e.appendChild(r),e.appendChild(l),e.classList.add("project"),D.appendChild(e),D.appendChild(n),function(t){const e=t.toDoList;if(e)for(var n=0;n<e.length;n++)u(e[n])}(t),j(),console.log("this console log is after the projectElisteners it looks like its working??")}function P(){for(document.removeEventListener("click",E);D.firstChild;)D.removeChild(D.firstChild)}let B=[];function I(t){return document.querySelector(t)}!function(){const t=document.querySelector(".menuContainer"),c=document.querySelector(".mainLogo"),s=document.querySelector(".menuClose"),r=document.querySelector(".createProj"),l=new Image;l.src=e,l.classList.add("main-menu-logo");const d=new Image;d.src=n,d.classList.add("main-logo");const a=new Image;a.src=o,a.classList.add("menuClose");const u=new Image;u.src=i,u.classList.add("addProjButton"),t.appendChild(l),c.appendChild(d),s.appendChild(a),r.appendChild(u);const p=document.querySelector(".sidebar-menu"),m=document.querySelector(".newProjectOverlay");t.addEventListener("click",(function(){p.style.animation="menuSlideOn 1.5s forwards"})),s.addEventListener("click",(function(){p.style.animation="menuSlideClose 1.5s forwards"})),r.addEventListener("click",(function(){p.style.animation="menuSlideClose 1.5s forwards",m.style.animation="projectSlideDown 1.5s forwards"})),p.addEventListener("click",(t=>{"SPAN"===t.target.tagName&&(console.log("the following is e.target.value"),console.log(t.target.textContent),b(L(t.target.textContent)))}))}(),function(){const t=document.querySelector(".closeButton"),e=document.querySelector(".submitButton");t.addEventListener("click",(function(){l.style.animation="projectSlideUp 1.5s forwards",a()})),e.addEventListener("click",(function(){l.style.animation="projectSlideUp 1.5s forwards";const t=function(){const t=document.getElementById("title").value;let e=document.getElementById("description").value;if(t){const n=new r(t,e);return B.push(n),n}return d(),a(),void(l.style.animation="projectSlideDown 1.5s forwards")}();if(C){!function(t){for(let e=0;e<B.length;e++)B[e].title==t&&(B[e].title=B[-1].title,B[e].description=B[-1].description)}(w.textContent),function(t){const e=I(".sidebarProject").children;for(let n=0;n<e.length;n++)e[n].textContent==t&&(e[n].textContent=e[-1].title)}(w.textContent),S(t.title),C=!1;for(let t=0;t<B.length;t++)console.log(t+1+" "+B[t].title)}else{if(t){k(t.title),b(t);for(let t=0;t<B.length;t++)console.log(t+1+" "+B[t].title)}a()}}))}();const T=new r("defaultProject","This is a default project. You can also create your own :)");B[0]=T,b(T),k("defaultProject"),j(),f()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,