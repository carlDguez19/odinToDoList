(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var i=o.length-1;i>-1&&!e;)e=o[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();const e=t.p+"abbfad808c2786a6a2d4.png",n=t.p+"986e98635b18601755cf.png",o=t.p+"177a54134d0bd5aefd06.png",i=t.p+"edb755c23d1ebcf9c7a4.png",c=t.p+"c9c7160b568bb10d504c.png";class s{constructor(t,e){this.title=t,this.description=e,this.toDos=[]}get title(){return this._title}get description(){return this._description}get toDoList(){return this._toDos}set title(t){this._title=t}set description(t){this._description=t}}const r=document.querySelector(".newProjectOverlay");function l(){const t=document.querySelector(".errorProjectOverlay");t.style.animation="projectSlideDown 1.5s forwards",setTimeout((function(){t.style.animation="projectSlideUp 1.5s forwards"}),2500)}function d(){document.getElementById("title").value="",document.getElementById("description").value=""}class a{constructor(t,e,n,o,i){this.tTitle=t,this.tDesc=e,this.tDue=n,this.tPrio=o,this.tProj=i}set tTitle(t){this._tTitle=t}set tDesc(t){this._tDesc=t}set tDue(t){this._tDue=t}set tPrio(t){this._tPrio=t}set tProj(t){this._tProj=t}get tTitle(){return this._tTitle}get tDesc(){return this._tDesc}get tDue(){return this._tDue}get tPrio(){return this._tPrio}get tProj(){return this._tProj}}function u(t){const e=document.querySelector(".todoUL"),n=document.createElement("li");n.classList.add("todo");const o=document.createElement("input");o.type="checkbox",o.classList.add("todoCheck");const i=document.createElement("input");i.type="date",i.classList.add("todoDate"),n.appendChild(i),n.appendChild(o),n.textContent=t.tTitle+"  "+t.tDue,e.appendChild(n)}const p=E(".newTaskOverlay");function m(){document.getElementById("tTitle").value="",document.getElementById("tDescription").value="",document.getElementById("tDueDate").value="",document.getElementById("tTaskPrio").value="Select One"}const f=document.querySelector(".newProjectOverlay");var h=function(t){const e=t.target.matches(".projEdit"),n=t.target.matches(".projRemove"),o=t.target.matches(".projAdd"),i=E(".projectNameMain");if(e){console.log("editButton clicked"),c=i.textContent,f.style.animation="projectSlideDown 1.5s forwards",E("#title").value=c;for(let t=0;t<C.length;t++)console.log(t+1+" "+C[t].title)}else if(n){console.log("removeButton clicked"),function(t){const e=E(".sidebarProject"),n=e.children;for(let o=0;o<n.length;o++)n[o].textContent==t&&e.removeChild(n[o])}(i.textContent),function(t){for(let e=0;e<C.length;e++)C[e].title==t&&C.splice(e,1)}(i.textContent),w();for(let t=0;t<C.length;t++)console.log(t+1+" "+C[t].title)}else o&&(p.style.animation="projectSlideDown 1.5s forwards",function(t){const e=E(".taskCloseButton"),n=E(".taskSubmitButton");e.addEventListener("click",(function(){m(),p.style.animation="projectSlideUp 1.5s forwards"})),n.addEventListener("click",(function(){p.style.animation="projectSlideUp 1.5s forwards";const e=function(t){const e=document.getElementById("tTitle").value,n=document.getElementById("tDescription").value,o=document.getElementById("tDueDate").value,i=document.getElementById("tTaskPrio").value;if(E(".projectNameMain"),e&&o){console.log(t.title);const c=new a(e,n,o,i,t.title);return project.toDoList.push(c),m(),c}return l(),m(),void(p.style.animation="projectSlideDown 1.5s forwards")}(t);if(e){u(e);for(let t=0;t<currProj.toDoList.length;t++)console.log(t+1+" "+currProj.toDoList[t].title)}m()}))}(g(i)));var c};function g(t){let e=0;for(let n=0;n<C.length;n++)if(e=n,C[n].title==t)return C[n]}const y=E(".projectSection");function j(t){const e=E(".sidebarProject");let n=document.createElement("span");n.textContent=t,n.classList.add("projectNameSidebar"),e.appendChild(n)}function v(t){w();const e=document.createElement("div"),n=document.createElement("ul");n.classList.add("todoUL");const s=document.createElement("input");s.type="checkbox",s.classList.add("projectCheckbox");const r=document.createElement("span");if(t.title.length>30){let e=t.title.slice(0,31);r.textContent=e+"..."}else r.textContent=t.title;r.classList.add("projectNameMain");const l=document.createElement("div"),d=document.createElement("div"),a=document.createElement("div"),p=document.createElement("div"),m=new Image;m.src=i,m.classList.add("projAdd");const f=new Image;f.src=c,f.classList.add("projEdit");const g=new Image;g.src=o,g.classList.add("projRemove"),d.appendChild(m),a.appendChild(f),p.appendChild(g),l.appendChild(d),l.appendChild(a),l.appendChild(p),l.classList.add("projectOptions"),e.appendChild(s),e.appendChild(r),e.appendChild(l),e.classList.add("project"),y.appendChild(e),y.appendChild(n),function(t){const e=0;for(;t.toDoList;)u(t.toDoList[e]),e++}(t),document.addEventListener("click",h),console.log("this console log is after the projectElisteners it looks like its working??")}function w(){for(document.removeEventListener("click",h);y.firstChild;)y.removeChild(y.firstChild)}let C=[];function E(t){return document.querySelector(t)}!function(){const t=document.querySelector(".menuContainer"),c=document.querySelector(".mainLogo"),s=document.querySelector(".menuClose"),r=document.querySelector(".createProj"),l=new Image;l.src=e,l.classList.add("main-menu-logo");const d=new Image;d.src=n,d.classList.add("main-logo");const a=new Image;a.src=o,a.classList.add("menuClose");const u=new Image;u.src=i,u.classList.add("addProjButton"),t.appendChild(l),c.appendChild(d),s.appendChild(a),r.appendChild(u);const p=document.querySelector(".sidebar-menu"),m=document.querySelector(".newProjectOverlay");t.addEventListener("click",(function(){p.style.animation="menuSlideOn 1.5s forwards"})),s.addEventListener("click",(function(){p.style.animation="menuSlideClose 1.5s forwards"})),r.addEventListener("click",(function(){p.style.animation="menuSlideClose 1.5s forwards",m.style.animation="projectSlideDown 1.5s forwards"})),p.addEventListener("click",(t=>{"SPAN"===t.target.tagName&&(console.log("the following is e.target.value"),console.log(t.target.textContent),v(g(t.target.textContent)))}))}(),function(){const t=document.querySelector(".closeButton"),e=document.querySelector(".submitButton");t.addEventListener("click",(function(){r.style.animation="projectSlideUp 1.5s forwards",d()})),e.addEventListener("click",(function(){r.style.animation="projectSlideUp 1.5s forwards";const t=function(){const t=document.getElementById("title").value;let e=document.getElementById("description").value;if(t){const n=new s(t,e);return C.push(n),n}return l(),d(),void(r.style.animation="projectSlideDown 1.5s forwards")}();if(t){j(t.title),v(t);for(let t=0;t<C.length;t++)console.log(t+1+" "+C[t].title)}d()}))}(),v({title:"defaultProject",description:"This is a default project. You can also create your own :)"}),j("defaultProject"),C[0]={title:"defaultProject",description:"This is a default project. You can also create your own :)"}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,