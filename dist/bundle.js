(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var s=o.length-1;s>-1&&!e;)e=o[s--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();const e=t.p+"abbfad808c2786a6a2d4.png",n=t.p+"986e98635b18601755cf.png",o=t.p+"177a54134d0bd5aefd06.png",s=t.p+"edb755c23d1ebcf9c7a4.png",i=t.p+"c9c7160b568bb10d504c.png";class r{constructor(t,e,n,o,s){this.tTitle=t,this.tDesc=e,this.tDue=n,this.tPrio=o,this.tProj=s}set tTitle(t){this._tTitle=t}set tDesc(t){this._tDesc=t}set tDue(t){this._tDue=t}set tPrio(t){this._tPrio=t}set tProj(t){this._tProj=t}get tTitle(){return this._tTitle}get tDesc(){return this._tDesc}get tDue(){return this._tDue}get tPrio(){return this._tPrio}get tProj(){return this._tProj}}class c{constructor(t,e){this.title=t,this.description=e,this.toDos=[]}getLastTask(){return this.toDos[this.toDos.length-1]}removeLastTask(){this.toDos.splice(this.toDos.length-1,1)}editTask(t){for(let e=0;e<this.toDos.length;e++)this.toDos[e].tTitle==t&&(this.toDos[e].tTitle=this.toDos[this.toDos.length-1].tTitle,this.toDos[e].tDesc=this.toDos[this.toDos.length-1].tDesc,this.toDos[e].tDue=this.toDos[this.toDos.length-1].tDue,this.toDos[e].tPrio=this.toDos[this.toDos.length-1].tPrio,this.toDos[e].tProj=this.toDos[this.toDos.length-1].tProj)}newTask(t,e,n,o,s){let i=new r(t,e,n,o,s);return this.toDos.push(i),i}findTask(t){for(var e=0;e<this.toDos.length;e++)if(this.toDos[e].tTitle==t)return this.toDos[e]}removeTaskFromArr(t){for(var e=0;e<this.toDos.length;e++)this.toDos[e].tTitle==t&&this.toDos.splice(e,1)}printTasks(){console.log("current tasks in project: ");for(var t=0;t<this.toDos.length;t++)console.log(this.toDos[t].tTitle)}get numOfTasks(){return this.toDos.length}get title(){return this._title}get description(){return this._description}get toDoList(){return this.toDos}set title(t){this._title=t}set description(t){this._description=t}}const l=document.querySelector(".newProjectOverlay");function a(){const t=document.querySelector(".errorProjectOverlay");t.style.animation="projectSlideDown 1.5s forwards",setTimeout((function(){t.style.animation="projectSlideUp 1.5s forwards"}),2500)}function d(){document.getElementById("title").value="",document.getElementById("description").value=""}let u=!1,m=null,p=!1;function h(t){const e=t.target.parentElement.parentElement.parentElement;if(t.target.matches(".taskProjEdit")){u=!0,console.log("morePestoPlease: "+e.textContent);const t=x(N(".projectNameMain").textContent);m=t.findTask(e.textContent),function(t){v.style.animation="projectSlideDown 1.5s forwards";const e=N("#tTitle"),n=N("#tDueDate");e.value=t.tTitle,n.value=t.tDue,j()}(m)}else if(t.target.matches(".taskProjRemove")){p=!0,console.log(e.textContent);const t=x(N(".projectNameMain").textContent);t.removeTaskFromArr(e.textContent),t.printTasks(),g(e.textContent)}}function f(t){const e=document.querySelector(".todoUL"),n=document.createElement("li"),s=document.createElement("div");s.textContent=t.tDue,s.classList.add("dateTaskDisp");const r=document.createElement("div"),c=document.createElement("input");c.type="checkbox";const l=document.createElement("input");l.type="date",l.value=t.tDue;const a=document.createElement("div"),d=document.createElement("div"),u=new Image;u.src=i,u.classList.add("taskProjEdit");const m=new Image;m.src=o,m.classList.add("taskProjRemove"),a.appendChild(u),d.appendChild(m),n.textContent=t.tTitle,r.appendChild(a),r.appendChild(d),r.appendChild(c),r.classList.add("taskButtons"),n.appendChild(r),n.appendChild(l),n.classList.add("todo"),e.appendChild(n),document.addEventListener("click",h)}function g(t){const e=N(".todoUL"),n=e.children;for(let o=0;o<n.length;o++)n[o].textContent==t&&e.removeChild(n[o])}const v=N(".newTaskOverlay"),D=N(".taskCloseButton"),C=N(".taskSubmitButton");function j(){D.addEventListener("click",(function(){k(),v.style.animation="projectSlideUp 1.5s forwards"})),C.addEventListener("click",y)}function y(){if(v.style.animation="projectSlideUp 1.5s forwards",console.log("taskEditButton bool value: "+u),u){const t=w(),e=x(N(".projectNameMain").textContent);g(m.tTitle),e.editTask(m.tTitle),f(t),e.removeLastTask(),e.printTasks(),u=!1,E()}else{const t=w();t&&f(t),k(),E()}}function E(){C.removeEventListener("click",y)}function w(){const t=document.getElementById("tTitle").value,e=document.getElementById("tDescription").value,n=document.getElementById("tDueDate").value,o=document.getElementById("tTaskPrio").value,s=x(N(".projectNameMain").textContent);if(t&&n){const i=s.newTask(t,e,n,o,s.title);return k(),i}return a(),k(),void(v.style.animation="projectSlideDown 1.5s forwards")}function k(){document.getElementById("tTitle").value="",document.getElementById("tDescription").value="",document.getElementById("tDueDate").value="",document.getElementById("tTaskPrio").value="Select One"}const T=document.querySelector(".newProjectOverlay");let L=!1,S=null;var P=function(t){const e=t.target.matches(".projEdit"),n=t.target.matches(".projRemove"),o=t.target.matches(".projAdd"),s=N(".projectNameMain");if(S=s,e)i=s.textContent,T.style.animation="projectSlideDown 1.5s forwards",N("#title").value=i,L=!0;else if(n){!function(t){const e=N(".sidebarProject"),n=e.children;for(let o=0;o<n.length;o++)n[o].textContent==t&&e.removeChild(n[o])}(s.textContent),function(t){for(let e=0;e<q.length;e++)q[e].title==t&&q.splice(e,1)}(s.textContent),_(),console.log("current projects in array are: ");for(let t=0;t<q.length;t++)console.log(q[t].title)}else o&&(v.style.animation="projectSlideDown 1.5s forwards",j());var i};function x(t){let e=0;for(let n=0;n<q.length;n++)if(e=n,q[n].title==t)return console.log("project found"),q[n]}const b=N(".projectSection");function I(t){const e=N(".sidebarProject");let n=document.createElement("span");n.textContent=t,n.classList.add("projectNameSidebar"),e.appendChild(n)}function B(t){_();const e=document.createElement("div"),n=document.createElement("ul");n.classList.add("todoUL");const r=document.createElement("input");r.type="checkbox",r.classList.add("projectCheckbox");const c=document.createElement("span");if(t.title.length>30){let e=t.title.slice(0,31);c.textContent=e+"..."}else c.textContent=t.title;c.classList.add("projectNameMain");const l=document.createElement("div"),a=document.createElement("div"),d=document.createElement("div"),u=document.createElement("div"),m=new Image;m.src=s,m.classList.add("projAdd");const p=new Image;p.src=i,p.classList.add("projEdit");const h=new Image;h.src=o,h.classList.add("projRemove"),a.appendChild(m),d.appendChild(p),u.appendChild(h),l.appendChild(a),l.appendChild(d),l.appendChild(u),l.classList.add("projectOptions"),e.appendChild(r),e.appendChild(c),e.appendChild(l),e.classList.add("project"),b.appendChild(e),b.appendChild(n),function(t){const e=t.toDoList;if(e)for(var n=0;n<e.length;n++)f(e[n])}(t),document.addEventListener("click",P)}function _(){for(document.removeEventListener("click",P);b.firstChild;)b.removeChild(b.firstChild)}let q=[];function N(t){return document.querySelector(t)}!function(){const t=document.querySelector(".menuContainer"),i=document.querySelector(".mainLogo"),r=document.querySelector(".menuClose"),c=document.querySelector(".createProj"),l=new Image;l.src=e,l.classList.add("main-menu-logo");const a=new Image;a.src=n,a.classList.add("main-logo");const d=new Image;d.src=o,d.classList.add("menuClose");const u=new Image;u.src=s,u.classList.add("addProjButton"),t.appendChild(l),i.appendChild(a),r.appendChild(d),c.appendChild(u);const m=document.querySelector(".sidebar-menu"),p=document.querySelector(".newProjectOverlay");t.addEventListener("click",(function(){m.style.animation="menuSlideOn 1.5s forwards"})),r.addEventListener("click",(function(){m.style.animation="menuSlideClose 1.5s forwards"})),c.addEventListener("click",(function(){m.style.animation="menuSlideClose 1.5s forwards",p.style.animation="projectSlideDown 1.5s forwards"})),m.addEventListener("click",(t=>{"SPAN"===t.target.tagName&&B(x(t.target.textContent))}))}(),function(){const t=document.querySelector(".closeButton"),e=document.querySelector(".submitButton");t.addEventListener("click",(function(){l.style.animation="projectSlideUp 1.5s forwards",d()})),e.addEventListener("click",(function(){l.style.animation="projectSlideUp 1.5s forwards";const t=function(){const t=document.getElementById("title").value;let e=document.getElementById("description").value;if(t){const n=new c(t,e);return q.push(n),n}return a(),d(),void(l.style.animation="projectSlideDown 1.5s forwards")}();L?(function(t){for(let e=0;e<q.length;e++)q[e].title==t&&(q[e].title=q[q.length-1].title,q[e].description=q[q.length-1].description)}(S.textContent),function(t){const e=N(".sidebarProject").children;for(let n=0;n<e.length;n++)e[n].textContent==t&&(e[n].textContent=q[e.length].title)}(S.textContent),N(".projectNameMain").textContent=q[q.length-1].title,q.splice(q.length-1,1),L=!1):(t&&(I(t.title),B(t)),d())}))}();const O=new c("defaultProject","This is a default project. You can also create your own :)");q[0]=O,B(O),I("defaultProject")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,