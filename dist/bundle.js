(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var s=o.length-1;s>-1&&!e;)e=o[s--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();const e=t.p+"abbfad808c2786a6a2d4.png",n=t.p+"986e98635b18601755cf.png",o=t.p+"177a54134d0bd5aefd06.png",s=t.p+"edb755c23d1ebcf9c7a4.png",i=t.p+"c9c7160b568bb10d504c.png";class r{constructor(t,e,n,o,s){this.tTitle=t,this.tDesc=e,this.tDue=n,this.tPrio=o,this.tProj=s}set tTitle(t){this._tTitle=t}set tDesc(t){this._tDesc=t}set tDue(t){this._tDue=t}set tPrio(t){this._tPrio=t}set tProj(t){this._tProj=t}get tTitle(){return this._tTitle}get tDesc(){return this._tDesc}get tDue(){return this._tDue}get tPrio(){return this._tPrio}get tProj(){return this._tProj}}class c{constructor(t,e){this.title=t,this.description=e,this.toDos=[]}getLastTask(){return this.toDos[this.toDos.length-1]}editTask(t){for(let e=0;e<this.toDos.length;e++)this.toDos[e].tTitle==t&&(this.toDos[e].tTitle=this.toDos[this.toDos.length-1].tTitle,this.toDos[e].tDesc=this.toDos[this.toDos.length-1].tDesc,this.toDos[e].tDue=this.toDos[this.toDos.length-1].tDue,this.toDos[e].tPrio=this.toDos[this.toDos.length-1].tPrio,this.toDos[e].tProj=this.toDos[this.toDos.length-1].tProj)}newTask(t,e,n,o,s){let i=new r(t,e,n,o,s);return this.toDos.push(i),i}findTask(t){for(var e=0;e<this.toDos.length;e++)if(this.toDos[e].tTitle==t)return this.toDos[e]}removeTaskFromArr(t){for(var e=0;e<this.toDos.length;e++)this.toDos[e].tTitle==t&&this.toDos.splice(e,1)}printTasks(){console.log("current tasks in project: ");for(var t=0;t<this.toDos.length;t++)console.log(this.toDos[t].tTitle)}get numOfTasks(){return this.toDos.length}get title(){return this._title}get description(){return this._description}get toDoList(){return this.toDos}set title(t){this._title=t}set description(t){this._description=t}}const l=document.querySelector(".newProjectOverlay");function a(){const t=document.querySelector(".errorProjectOverlay");t.style.animation="projectSlideDown 1.5s forwards",setTimeout((function(){t.style.animation="projectSlideUp 1.5s forwards"}),2500)}function d(){document.getElementById("title").value="",document.getElementById("description").value=""}function u(t){const e=document.querySelector(".todoUL"),n=document.createElement("li"),s=document.createElement("div");s.textContent=t.tDue,s.classList.add("dateTaskDisp");const r=document.createElement("div"),c=document.createElement("input");c.type="checkbox";const l=document.createElement("input");l.type="date",l.value=t.tDue;const a=document.createElement("div"),d=document.createElement("div"),u=new Image;u.src=i,u.classList.add("taskProjEdit");const m=new Image;m.src=o,m.classList.add("taskProjRemove"),a.appendChild(u),d.appendChild(m),n.textContent=t.tTitle,r.appendChild(a),r.appendChild(d),r.appendChild(c),r.classList.add("taskButtons"),n.appendChild(r),n.appendChild(l),n.classList.add("todo"),e.appendChild(n),document.addEventListener("click",h)}let m=null,p=!1;function h(t){if(m=t.target.parentElement.parentElement.parentElement,t.target.matches(".taskProjEdit"))p=!0,console.log("morePestoPlease: "+m.textContent),function(t){f.style.animation="projectSlideDown 1.5s forwards";const e=I("#tTitle"),n=I("#tDueDate");e.value=t.tTitle,n.value=t.tDue,D()}(L(I(".projectNameMain").textContent).findTask(m.textContent));else if(t.target.matches(".taskProjRemove")){taskRemButton=!0,console.log(m.textContent);const t=L(I(".projectNameMain").textContent);t.removeTaskFromArr(m.textContent),t.printTasks(),function(t){const e=I(".todoUL"),n=e.children;for(let o=0;o<n.length;o++)n[o].textContent==t&&e.removeChild(n[o])}(m.textContent)}}const f=I(".newTaskOverlay"),g=I(".taskCloseButton"),v=I(".taskSubmitButton");function D(){g.addEventListener("click",(function(){E(),f.style.animation="projectSlideUp 1.5s forwards"})),v.addEventListener("click",C)}function C(){if(f.style.animation="projectSlideUp 1.5s forwards",console.log("taskEditButton bool value: "+p),p){console.log("taskName in taskSubmit poop: "+m.parentElement.parentElement.parentElement.textContent);const t=L(I(".projectNameMain").textContent),e=t.getLastTask();t.editTask(m.parentElement.parentElement.parentElement.textContent),m.textContent=e.tTitle,t.removeTaskFromArr(e.tTitle),p=!1,j()}else{const t=function(t){const e=document.getElementById("tTitle").value,n=document.getElementById("tDescription").value,o=document.getElementById("tDueDate").value,s=document.getElementById("tTaskPrio").value,i=L(I(".projectNameMain").textContent);if(e&&o){const t=i.newTask(e,n,o,s,i.title);return E(),t}return a(),E(),void(f.style.animation="projectSlideDown 1.5s forwards")}();t&&u(t),E(),j()}}function j(){v.removeEventListener("click",C)}function E(){document.getElementById("tTitle").value="",document.getElementById("tDescription").value="",document.getElementById("tDueDate").value="",document.getElementById("tTaskPrio").value="Select One"}const y=document.querySelector(".newProjectOverlay");let w=!1,k=null;var T=function(t){const e=t.target.matches(".projEdit"),n=t.target.matches(".projRemove"),o=t.target.matches(".projAdd"),s=I(".projectNameMain");if(k=s,e)i=s.textContent,y.style.animation="projectSlideDown 1.5s forwards",I("#title").value=i,w=!0;else if(n){!function(t){const e=I(".sidebarProject"),n=e.children;for(let o=0;o<n.length;o++)n[o].textContent==t&&e.removeChild(n[o])}(s.textContent),function(t){for(let e=0;e<B.length;e++)B[e].title==t&&B.splice(e,1)}(s.textContent),b(),console.log("current projects in array are: ");for(let t=0;t<B.length;t++)console.log(B[t].title)}else o&&(f.style.animation="projectSlideDown 1.5s forwards",D());var i};function L(t){let e=0;for(let n=0;n<B.length;n++)if(e=n,B[n].title==t)return console.log("project found"),B[n]}const S=I(".projectSection");function P(t){const e=I(".sidebarProject");let n=document.createElement("span");n.textContent=t,n.classList.add("projectNameSidebar"),e.appendChild(n)}function x(t){b();const e=document.createElement("div"),n=document.createElement("ul");n.classList.add("todoUL");const r=document.createElement("input");r.type="checkbox",r.classList.add("projectCheckbox");const c=document.createElement("span");if(t.title.length>30){let e=t.title.slice(0,31);c.textContent=e+"..."}else c.textContent=t.title;c.classList.add("projectNameMain");const l=document.createElement("div"),a=document.createElement("div"),d=document.createElement("div"),m=document.createElement("div"),p=new Image;p.src=s,p.classList.add("projAdd");const h=new Image;h.src=i,h.classList.add("projEdit");const f=new Image;f.src=o,f.classList.add("projRemove"),a.appendChild(p),d.appendChild(h),m.appendChild(f),l.appendChild(a),l.appendChild(d),l.appendChild(m),l.classList.add("projectOptions"),e.appendChild(r),e.appendChild(c),e.appendChild(l),e.classList.add("project"),S.appendChild(e),S.appendChild(n),function(t){const e=t.toDoList;if(e)for(var n=0;n<e.length;n++)u(e[n])}(t),document.addEventListener("click",T)}function b(){for(document.removeEventListener("click",T);S.firstChild;)S.removeChild(S.firstChild)}let B=[];function I(t){return document.querySelector(t)}!function(){const t=document.querySelector(".menuContainer"),i=document.querySelector(".mainLogo"),r=document.querySelector(".menuClose"),c=document.querySelector(".createProj"),l=new Image;l.src=e,l.classList.add("main-menu-logo");const a=new Image;a.src=n,a.classList.add("main-logo");const d=new Image;d.src=o,d.classList.add("menuClose");const u=new Image;u.src=s,u.classList.add("addProjButton"),t.appendChild(l),i.appendChild(a),r.appendChild(d),c.appendChild(u);const m=document.querySelector(".sidebar-menu"),p=document.querySelector(".newProjectOverlay");t.addEventListener("click",(function(){m.style.animation="menuSlideOn 1.5s forwards"})),r.addEventListener("click",(function(){m.style.animation="menuSlideClose 1.5s forwards"})),c.addEventListener("click",(function(){m.style.animation="menuSlideClose 1.5s forwards",p.style.animation="projectSlideDown 1.5s forwards"})),m.addEventListener("click",(t=>{"SPAN"===t.target.tagName&&x(L(t.target.textContent))}))}(),function(){const t=document.querySelector(".closeButton"),e=document.querySelector(".submitButton");t.addEventListener("click",(function(){l.style.animation="projectSlideUp 1.5s forwards",d()})),e.addEventListener("click",(function(){l.style.animation="projectSlideUp 1.5s forwards";const t=function(){const t=document.getElementById("title").value;let e=document.getElementById("description").value;if(t){const n=new c(t,e);return B.push(n),n}return a(),d(),void(l.style.animation="projectSlideDown 1.5s forwards")}();w?(function(t){for(let e=0;e<B.length;e++)B[e].title==t&&(B[e].title=B[B.length-1].title,B[e].description=B[B.length-1].description)}(k.textContent),function(t){const e=I(".sidebarProject").children;for(let n=0;n<e.length;n++)e[n].textContent==t&&(e[n].textContent=B[e.length].title)}(k.textContent),I(".projectNameMain").textContent=B[B.length-1].title,B.splice(B.length-1,1),w=!1):(t&&(P(t.title),x(t)),d())}))}();const _=new c("defaultProject","This is a default project. You can also create your own :)");B[0]=_,x(_),P("defaultProject")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,