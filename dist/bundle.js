(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var i=o.length-1;i>-1&&!e;)e=o[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();const e=t.p+"abbfad808c2786a6a2d4.png",n=t.p+"986e98635b18601755cf.png",o=t.p+"177a54134d0bd5aefd06.png",i=t.p+"edb755c23d1ebcf9c7a4.png",c=t.p+"c9c7160b568bb10d504c.png";class r{constructor(t,e){this.title=t,this.description=e,this.toDos=[]}get title(){return this._title}get description(){return this._description}get toDoList(){return this._toDos}set title(t){this._title=t}set description(t){this._description=t}}const s=document.querySelector(".newProjectOverlay");function l(){const t=document.querySelector(".errorProjectOverlay");t.style.animation="projectSlideDown 1.5s forwards",setTimeout((function(){t.style.animation="projectSlideUp 1.5s forwards"}),2500)}function a(){document.getElementById("title").value="",document.getElementById("description").value=""}class d{constructor(t,e,n,o,i){this.tTitle=t,this.tDesc=e,this.tDue=n,this.tPrio=o,this.tProj=i}set tTitle(t){this._tTitle=t}set tDesc(t){this._tDesc=t}set tDue(t){this._tDue=t}set tPrio(t){this._tPrio=t}set tProj(t){this._tProj=t}get tTitle(){return this._tTitle}get tDesc(){return this._tDesc}get tDue(){return this._tDue}get tPrio(){return this._tPrio}get tProj(){return this._tProj}}const u=S(".newTaskOverlay"),m={};function p(){const t=S(".taskCloseButton"),e=S(".taskSubmitButton");t.addEventListener("click",(function(){f(),u.style.animation="projectSlideUp 1.5s forwards"})),e.addEventListener("click",(function(){if(u.style.animation="projectSlideUp 1.5s forwards",function(){const t=document.getElementById("tTitle").value,e=document.getElementById("tDescription").value,n=document.getElementById("tDueDate").value,o=document.getElementById("tTaskPrio").value,i=S(".projectNameMain");if(t&&n){const c=new d(t,e,n,o,i);return m=y(i),m.toDoList.push(c),c}return l(),f(),void(u.style.animation="projectSlideDown 1.5s forwards")}()){displayTaskInMain();for(let t=0;t<m.toDoList.length;t++)console.log(t+1+" "+m.toDoList[t].title)}f()}))}function f(){document.getElementById("tTitle").value="",document.getElementById("tDescription").value="",document.getElementById("tDueDate").value="",document.getElementById("tTaskPrio").value="Select One"}S(".projAdd"),S(".projRemove");const h=document.querySelector(".newProjectOverlay");var g=function(t){const e=t.target.matches(".projEdit"),n=t.target.matches(".projRemove"),o=t.target.matches(".projAdd"),i=S(".projectNameMain");if(e){console.log("editButton clicked"),c=i.textContent,h.style.animation="projectSlideDown 1.5s forwards",S("#title").value=c,y(i);for(let t=0;t<E.length;t++)console.log(t+1+" "+E[t].title)}else if(n){console.log("removeButton clicked"),function(t){const e=S(".sidebarProject"),n=e.children;for(let o=0;o<n.length;o++)n[o].textContent==t&&e.removeChild(n[o])}(i.textContent),function(t){for(let e=0;e<E.length;e++)E[e].title==t&&E.splice(e,1)}(i.textContent),C();for(let t=0;t<E.length;t++)console.log(t+1+" "+E[t].title)}else o&&(u.style.animation="projectSlideDown 1.5s forwards",p());var c};function y(t){let e=0;for(let n=0;n<E.length;n++)if(e=n,E[n].title==t)return E[n]}const v=S(".projectSection");function j(t){const e=S(".sidebarProject");let n=document.createElement("span");n.textContent=t,n.classList.add("projectNameSidebar"),e.appendChild(n)}function w(t){C();const e=document.createElement("div"),n=document.createElement("ul");n.classList.add("todoUL");const r=document.createElement("input");r.type="checkbox",r.classList.add("projectCheckbox");const s=document.createElement("span");if(t.title.length>30){let e=t.title.slice(0,31);s.textContent=e+"..."}else s.textContent=t.title;s.classList.add("projectNameMain");const l=document.createElement("div"),a=document.createElement("div"),d=document.createElement("div"),u=document.createElement("div"),m=new Image;m.src=i,m.classList.add("projAdd");const p=new Image;p.src=c,p.classList.add("projEdit");const f=new Image;f.src=o,f.classList.add("projRemove"),a.appendChild(m),d.appendChild(p),u.appendChild(f),l.appendChild(a),l.appendChild(d),l.appendChild(u),l.classList.add("projectOptions"),e.appendChild(r),e.appendChild(s),e.appendChild(l),e.classList.add("project"),v.appendChild(e),v.appendChild(n),document.addEventListener("click",g)}function C(){for(document.removeEventListener("click",g);v.firstChild;)v.removeChild(v.firstChild)}let E=[];function S(t){return document.querySelector(t)}!function(){const t=document.querySelector(".menuContainer"),c=document.querySelector(".mainLogo"),r=document.querySelector(".menuClose"),s=document.querySelector(".createProj"),l=new Image;l.src=e,l.classList.add("main-menu-logo");const a=new Image;a.src=n,a.classList.add("main-logo");const d=new Image;d.src=o,d.classList.add("menuClose");const u=new Image;u.src=i,u.classList.add("addProjButton"),t.appendChild(l),c.appendChild(a),r.appendChild(d),s.appendChild(u);const m=document.querySelector(".sidebar-menu"),p=document.querySelector(".newProjectOverlay");t.addEventListener("click",(function(){m.style.animation="menuSlideOn 1.5s forwards"})),r.addEventListener("click",(function(){m.style.animation="menuSlideClose 1.5s forwards"})),s.addEventListener("click",(function(){m.style.animation="menuSlideClose 1.5s forwards",p.style.animation="projectSlideDown 1.5s forwards"})),m.addEventListener("click",(t=>{"SPAN"===t.target.tagName&&(console.log("the following is e.target.value"),console.log(t.target.textContent),w(y(t.target.textContent)))}))}(),function(){const t=document.querySelector(".closeButton"),e=document.querySelector(".submitButton");t.addEventListener("click",(function(){s.style.animation="projectSlideUp 1.5s forwards",a()})),e.addEventListener("click",(function(){s.style.animation="projectSlideUp 1.5s forwards";const t=function(){const t=document.getElementById("title").value;let e=document.getElementById("description").value;if(t){const n=new r(t,e);return E.push(n),n}return l(),a(),void(s.style.animation="projectSlideDown 1.5s forwards")}();if(t){j(t.title),w(t);for(let t=0;t<E.length;t++)console.log(t+1+" "+E[t].title)}a()}))}(),w({title:"defaultProject",description:"This is a default project. You can also create your own :)"}),j("defaultProject"),E[0]={title:"defaultProject",description:"This is a default project. You can also create your own :)"},p()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,