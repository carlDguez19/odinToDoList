(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var i=o.length-1;i>-1&&!e;)e=o[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();const e=t.p+"abbfad808c2786a6a2d4.png",n=t.p+"986e98635b18601755cf.png",o=t.p+"177a54134d0bd5aefd06.png",i=t.p+"edb755c23d1ebcf9c7a4.png",s=t.p+"c9c7160b568bb10d504c.png";class c{constructor(t,e,n,o,i){this.tTitle=t,this.tDesc=e,this.tDue=n,this.tPrio=o,this.tProj=i}set tTitle(t){this._tTitle=t}set tDesc(t){this._tDesc=t}set tDue(t){this._tDue=t}set tPrio(t){this._tPrio=t}set tProj(t){this._tProj=t}get tTitle(){return this._tTitle}get tDesc(){return this._tDesc}get tDue(){return this._tDue}get tPrio(){return this._tPrio}get tProj(){return this._tProj}}class r{constructor(t,e){this.title=t,this.description=e,this.toDos=[]}newTask(t,e,n,o,i){let s=new c(t,e,n,o,i);return this.toDos.push(s),s}findTask(t){for(var e=0;e<this.toDos.length;e++)if(this.toDos[e].tTitle==t)return this.toDos[e]}removeTaskFromArr(t){for(var e=0;e<this.toDos.length;e++)this.toDos[e].tTitle==t&&this.toDos.splice(e,1)}printTasks(){console.log("current tasks in project: ");for(var t=0;t<this.toDos.length;t++)console.log(this.toDos[t].tTitle)}get numOfTasks(){return this.toDos.length}get title(){return this._title}get description(){return this._description}get toDoList(){return this.toDos}set title(t){this._title=t}set description(t){this._description=t}}const l=document.querySelector(".newProjectOverlay");function a(){const t=document.querySelector(".errorProjectOverlay");t.style.animation="projectSlideDown 1.5s forwards",setTimeout((function(){t.style.animation="projectSlideUp 1.5s forwards"}),2500)}function d(){document.getElementById("title").value="",document.getElementById("description").value=""}let u=!1,m=!1;var p=function(t){const e=t.target.parentElement.parentElement.parentElement.textContent;if(t.target.matches(".taskProjEdit"))u=!0,console.log(e),function(t){f.style.animation="projectSlideDown 1.5s forwards";const e=x("#tTitle"),n=x("#tDueDate");e.value=t.tTitle,n.value=t.tDue}(k(x(".projectNameMain").textContent).findTask(e));else if(t.target.matches(".taskProjRemove")){m=!0,console.log(e);const t=k(x(".projectNameMain").textContent);t.removeTaskFromArr(e),t.printTasks(),function(t){const e=x(".todoUL"),n=e.children;for(let o=0;o<n.length;o++)n[o].textContent==t&&e.removeChild(n[o])}(e)}};function h(t){const e=document.querySelector(".todoUL"),n=document.createElement("li"),i=document.createElement("div");i.textContent=t.tDue,i.classList.add("dateTaskDisp");const c=document.createElement("div"),r=document.createElement("input");r.type="checkbox";const l=document.createElement("input");l.type="date",l.value=t.tDue;const a=document.createElement("div"),d=document.createElement("div"),u=new Image;u.src=s,u.classList.add("taskProjEdit");const m=new Image;m.src=o,m.classList.add("taskProjRemove"),a.appendChild(u),d.appendChild(m),n.textContent=t.tTitle,c.appendChild(a),c.appendChild(d),c.appendChild(r),c.classList.add("taskButtons"),n.appendChild(c),n.appendChild(l),n.classList.add("todo"),e.appendChild(n),document.addEventListener("click",p)}const f=x(".newTaskOverlay"),g=x(".taskCloseButton"),v=x(".taskSubmitButton");function C(){u&&(u=!1),f.style.animation="projectSlideUp 1.5s forwards";const t=function(t){const e=document.getElementById("tTitle").value,n=document.getElementById("tDescription").value,o=document.getElementById("tDueDate").value,i=document.getElementById("tTaskPrio").value,s=k(x(".projectNameMain").textContent);if(e&&o){const t=s.newTask(e,n,o,i,s.title);return j(),t}return a(),j(),void(f.style.animation="projectSlideDown 1.5s forwards")}();t&&h(t),j(),v.removeEventListener("click",C)}function j(){document.getElementById("tTitle").value="",document.getElementById("tDescription").value="",document.getElementById("tDueDate").value="",document.getElementById("tTaskPrio").value="Select One"}const y=document.querySelector(".newProjectOverlay");let w=!1,E=null;var D=function(t){const e=t.target.matches(".projEdit"),n=t.target.matches(".projRemove"),o=t.target.matches(".projAdd"),i=x(".projectNameMain");if(E=i,e)s=i.textContent,y.style.animation="projectSlideDown 1.5s forwards",x("#title").value=s,w=!0;else if(n){!function(t){const e=x(".sidebarProject"),n=e.children;for(let o=0;o<n.length;o++)n[o].textContent==t&&e.removeChild(n[o])}(i.textContent),function(t){for(let e=0;e<b.length;e++)b[e].title==t&&b.splice(e,1)}(i.textContent),P(),console.log("current projects in array are: ");for(let t=0;t<b.length;t++)console.log(b[t].title)}else o&&(f.style.animation="projectSlideDown 1.5s forwards",g.addEventListener("click",(function(){j(),f.style.animation="projectSlideUp 1.5s forwards"})),v.addEventListener("click",C));var s};function k(t){let e=0;for(let n=0;n<b.length;n++)if(e=n,b[n].title==t)return console.log("project found"),b[n]}const L=x(".projectSection");function S(t){const e=x(".sidebarProject");let n=document.createElement("span");n.textContent=t,n.classList.add("projectNameSidebar"),e.appendChild(n)}function T(t){P();const e=document.createElement("div"),n=document.createElement("ul");n.classList.add("todoUL");const c=document.createElement("input");c.type="checkbox",c.classList.add("projectCheckbox");const r=document.createElement("span");if(t.title.length>30){let e=t.title.slice(0,31);r.textContent=e+"..."}else r.textContent=t.title;r.classList.add("projectNameMain");const l=document.createElement("div"),a=document.createElement("div"),d=document.createElement("div"),u=document.createElement("div"),m=new Image;m.src=i,m.classList.add("projAdd");const p=new Image;p.src=s,p.classList.add("projEdit");const f=new Image;f.src=o,f.classList.add("projRemove"),a.appendChild(m),d.appendChild(p),u.appendChild(f),l.appendChild(a),l.appendChild(d),l.appendChild(u),l.classList.add("projectOptions"),e.appendChild(c),e.appendChild(r),e.appendChild(l),e.classList.add("project"),L.appendChild(e),L.appendChild(n),function(t){const e=t.toDoList;if(e)for(var n=0;n<e.length;n++)h(e[n])}(t),document.addEventListener("click",D)}function P(){for(document.removeEventListener("click",D);L.firstChild;)L.removeChild(L.firstChild)}let b=[];function x(t){return document.querySelector(t)}!function(){const t=document.querySelector(".menuContainer"),s=document.querySelector(".mainLogo"),c=document.querySelector(".menuClose"),r=document.querySelector(".createProj"),l=new Image;l.src=e,l.classList.add("main-menu-logo");const a=new Image;a.src=n,a.classList.add("main-logo");const d=new Image;d.src=o,d.classList.add("menuClose");const u=new Image;u.src=i,u.classList.add("addProjButton"),t.appendChild(l),s.appendChild(a),c.appendChild(d),r.appendChild(u);const m=document.querySelector(".sidebar-menu"),p=document.querySelector(".newProjectOverlay");t.addEventListener("click",(function(){m.style.animation="menuSlideOn 1.5s forwards"})),c.addEventListener("click",(function(){m.style.animation="menuSlideClose 1.5s forwards"})),r.addEventListener("click",(function(){m.style.animation="menuSlideClose 1.5s forwards",p.style.animation="projectSlideDown 1.5s forwards"})),m.addEventListener("click",(t=>{"SPAN"===t.target.tagName&&T(k(t.target.textContent))}))}(),function(){const t=document.querySelector(".closeButton"),e=document.querySelector(".submitButton");t.addEventListener("click",(function(){l.style.animation="projectSlideUp 1.5s forwards",d()})),e.addEventListener("click",(function(){l.style.animation="projectSlideUp 1.5s forwards";const t=function(){const t=document.getElementById("title").value;let e=document.getElementById("description").value;if(t){const n=new r(t,e);return b.push(n),n}return a(),d(),void(l.style.animation="projectSlideDown 1.5s forwards")}();w?(function(t){for(let e=0;e<b.length;e++)b[e].title==t&&(b[e].title=b[b.length-1].title,b[e].description=b[b.length-1].description)}(E.textContent),function(t){const e=x(".sidebarProject").children;for(let n=0;n<e.length;n++)e[n].textContent==t&&(e[n].textContent=b[e.length].title)}(E.textContent),x(".projectNameMain").textContent=b[b.length-1].title,b.splice(b.length-1,1),w=!1):(t&&(S(t.title),T(t)),d())}))}();const I=new r("defaultProject","This is a default project. You can also create your own :)");b[0]=I,T(I),S("defaultProject")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,