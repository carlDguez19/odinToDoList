(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var s=o.length-1;s>-1&&!e;)e=o[s--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();const e=t.p+"abbfad808c2786a6a2d4.png",n=t.p+"986e98635b18601755cf.png",o=t.p+"177a54134d0bd5aefd06.png",s=t.p+"edb755c23d1ebcf9c7a4.png",i=t.p+"c9c7160b568bb10d504c.png";class r{constructor(t,e,n,o,s){this.tTitle=t,this.tDesc=e,this.tDue=n,this.tPrio=o,this.tProj=s}set tTitle(t){this._tTitle=t}set tDesc(t){this._tDesc=t}set tDue(t){this._tDue=t}set tPrio(t){this._tPrio=t}set tProj(t){this._tProj=t}get tTitle(){return this._tTitle}get tDesc(){return this._tDesc}get tDue(){return this._tDue}get tPrio(){return this._tPrio}get tProj(){return this._tProj}}class c{constructor(t,e){this.title=t,this.description=e,this.toDos=[]}getLastTask(){return this.toDos[this.toDos.length-1]}removeLastTask(){this.toDos.splice(this.toDos.length-1,1)}editTask(t){for(let e=0;e<this.toDos.length;e++)this.toDos[e].tTitle==t&&(this.toDos[e].tTitle=this.toDos[this.toDos.length-1].tTitle,this.toDos[e].tDesc=this.toDos[this.toDos.length-1].tDesc,this.toDos[e].tDue=this.toDos[this.toDos.length-1].tDue,this.toDos[e].tPrio=this.toDos[this.toDos.length-1].tPrio,this.toDos[e].tProj=this.toDos[this.toDos.length-1].tProj)}newTask(t,e,n,o,s){let i=new r(t,e,n,o,s);return this.toDos.push(i),i}findTask(t){for(var e=0;e<this.toDos.length;e++)if(this.toDos[e].tTitle==t)return this.toDos[e]}removeTaskFromArr(t){for(var e=0;e<this.toDos.length;e++)this.toDos[e].tTitle==t&&this.toDos.splice(e,1)}printTasks(){console.log("current tasks in project: ");for(var t=0;t<this.toDos.length;t++)console.log(this.toDos[t].tTitle)}get numOfTasks(){return this.toDos.length}get title(){return this._title}get description(){return this._description}get toDoList(){return this.toDos}set title(t){this._title=t}set description(t){this._description=t}}const l=document.querySelector(".newProjectOverlay");function a(){const t=document.querySelector(".errorProjectOverlay");t.style.animation="projectSlideDown 1.5s forwards",setTimeout((function(){t.style.animation="projectSlideUp 1.5s forwards"}),2500)}function d(){document.getElementById("title").value="",document.getElementById("description").value=""}function u(){R(".infoCloseButton").addEventListener("click",m)}function m(){D=!1,p.style.animation="projectSlideUp 1.5s forwards",setTimeout((function(){h.textContent=""}),1500)}const p=R(".infoDescOverlay"),h=R(".infoSec");let f=!1,g=null,D=!1,v=!1;function C(t){const e=t.target.parentElement.parentElement.parentElement;if(t.target.matches(".taskProjEdit")){f=!0,console.log("morePestoPlease: "+e.textContent);const t=_(R(".projectNameMain").textContent);g=t.findTask(e.textContent),function(t){w.style.animation="projectSlideDown 1.5s forwards";const e=R("#tTitle"),n=R("#tDueDate");e.value=t.tTitle,n.value=t.tDue,k()}(g)}else if(t.target.matches(".taskProjRemove")){v=!0,console.log(e.textContent);const t=_(R(".projectNameMain").textContent);t.removeTaskFromArr(e.textContent),t.printTasks(),y(e.textContent)}else if(t.target.matches(".titleTaskDisp")){D=!0;const e=t.target.parentElement;n=_(R(".projectNameMain").textContent).findTask(e.textContent),p.style.animation="projectSlideDown 1.5s forwards",h.textContent+="DUE DATE: "+n.tDue+" DESCRIPTION: "+n.tDesc,u()}var n}function j(t){const e=document.querySelector(".todoUL"),n=document.createElement("li"),s=document.createElement("div");s.textContent=t.tTitle,s.classList.add("titleTaskDisp");const r=document.createElement("div"),c=document.createElement("input");c.type="checkbox";const l=document.createElement("div"),a=document.createElement("div"),d=new Image;d.src=i,d.classList.add("taskProjEdit");const u=new Image;u.src=o,u.classList.add("taskProjRemove"),l.appendChild(d),a.appendChild(u),r.appendChild(l),r.appendChild(a),r.appendChild(c),r.classList.add("taskButtons"),n.appendChild(s),n.appendChild(r),n.classList.add("todo");const m=t.tPrio;"High"==m?n.classList.add("highPrio"):"Medium"==m?n.classList.add("mediumPrio"):"Low"==m&&n.classList.add("lowPrio"),e.appendChild(n),document.addEventListener("click",C)}function y(t){const e=R(".todoUL"),n=e.children;for(let o=0;o<n.length;o++)n[o].textContent==t&&e.removeChild(n[o])}const w=R(".newTaskOverlay"),E=R(".taskCloseButton"),T=R(".taskSubmitButton");function k(){E.addEventListener("click",(function(){x(),w.style.animation="projectSlideUp 1.5s forwards"})),T.addEventListener("click",L)}function L(){if(w.style.animation="projectSlideUp 1.5s forwards",console.log("taskEditButton bool value: "+f),f){const t=P(),e=_(R(".projectNameMain").textContent);y(g.tTitle),e.editTask(g.tTitle),j(t),e.removeLastTask(),e.printTasks(),f=!1,S()}else{const t=P();t&&j(t),x(),S()}}function S(){T.removeEventListener("click",L)}function P(){const t=document.getElementById("tTitle").value,e=document.getElementById("tDescription").value,n=document.getElementById("tDueDate").value,o=document.getElementById("tTaskPrio").value,s=_(R(".projectNameMain").textContent);if(t&&n){const i=s.newTask(t,e,n,o,s.title);return x(),i}return a(),x(),void(w.style.animation="projectSlideDown 1.5s forwards")}function x(){document.getElementById("tTitle").value="",document.getElementById("tDescription").value="",document.getElementById("tDueDate").value="",document.getElementById("tTaskPrio").value="Select One"}const b=document.querySelector(".newProjectOverlay");let I=!1,B=null;var N=function(t){const e=t.target.matches(".projEdit"),n=t.target.matches(".projRemove"),o=t.target.matches(".projAdd"),s=t.target.matches(".projectNameMain"),i=R(".projectNameMain");if(B=i,e)r=i.textContent,b.style.animation="projectSlideDown 1.5s forwards",R("#title").value=r,I=!0;else if(n){!function(t){const e=R(".sidebarProject"),n=e.children;for(let o=0;o<n.length;o++)n[o].textContent==t&&e.removeChild(n[o])}(i.textContent),function(t){for(let e=0;e<A.length;e++)A[e].title==t&&A.splice(e,1)}(i.textContent),U(),console.log("current projects in array are: ");for(let t=0;t<A.length;t++)console.log(A[t].title)}else if(o)w.style.animation="projectSlideDown 1.5s forwards",k();else if(s){c=_(i.textContent),p.style.animation="projectSlideDown 1.5s forwards",h.textContent="DESCRIPTION: "+c.description,u()}var r,c};function _(t){let e=0;for(let n=0;n<A.length;n++)if(e=n,A[n].title==t)return console.log("project found"),A[n]}const q=R(".projectSection");function O(t){const e=R(".sidebarProject");let n=document.createElement("span");n.textContent=t,n.classList.add("projectNameSidebar"),e.appendChild(n)}function M(t){U();const e=document.createElement("div"),n=document.createElement("ul");n.classList.add("todoUL");const r=document.createElement("input");r.type="checkbox",r.classList.add("projectCheckbox");const c=document.createElement("span");if(t.title.length>30){let e=t.title.slice(0,31);c.textContent=e+"..."}else c.textContent=t.title;c.classList.add("projectNameMain");const l=document.createElement("div"),a=document.createElement("div"),d=document.createElement("div"),u=document.createElement("div"),m=new Image;m.src=s,m.classList.add("projAdd");const p=new Image;p.src=i,p.classList.add("projEdit");const h=new Image;h.src=o,h.classList.add("projRemove"),a.appendChild(m),d.appendChild(p),u.appendChild(h),l.appendChild(a),l.appendChild(d),l.appendChild(u),l.classList.add("projectOptions"),e.appendChild(r),e.appendChild(c),e.appendChild(l),e.classList.add("project"),q.appendChild(e),q.appendChild(n),function(t){const e=t.toDoList;if(e)for(var n=0;n<e.length;n++)j(e[n])}(t),document.addEventListener("click",N)}function U(){for(document.removeEventListener("click",N);q.firstChild;)q.removeChild(q.firstChild)}let A=[];function R(t){return document.querySelector(t)}!function(){const t=document.querySelector(".menuContainer"),i=document.querySelector(".mainLogo"),r=document.querySelector(".menuClose"),c=document.querySelector(".createProj"),l=new Image;l.src=e,l.classList.add("main-menu-logo");const a=new Image;a.src=n,a.classList.add("main-logo");const d=new Image;d.src=o,d.classList.add("menuClose");const u=new Image;u.src=s,u.classList.add("addProjButton"),t.appendChild(l),i.appendChild(a),r.appendChild(d),c.appendChild(u);const m=document.querySelector(".sidebar-menu"),p=document.querySelector(".newProjectOverlay");t.addEventListener("click",(function(){m.style.animation="menuSlideOn 1.5s forwards"})),r.addEventListener("click",(function(){m.style.animation="menuSlideClose 1.5s forwards"})),c.addEventListener("click",(function(){m.style.animation="menuSlideClose 1.5s forwards",p.style.animation="projectSlideDown 1.5s forwards"})),m.addEventListener("click",(t=>{"SPAN"===t.target.tagName&&M(_(t.target.textContent))}))}(),function(){const t=document.querySelector(".closeButton"),e=document.querySelector(".submitButton");t.addEventListener("click",(function(){l.style.animation="projectSlideUp 1.5s forwards",d()})),e.addEventListener("click",(function(){l.style.animation="projectSlideUp 1.5s forwards";const t=function(){const t=document.getElementById("title").value;let e=document.getElementById("description").value;if(t){const n=new c(t,e);return A.push(n),n}return a(),d(),void(l.style.animation="projectSlideDown 1.5s forwards")}();I?(function(t){for(let e=0;e<A.length;e++)A[e].title==t&&(A[e].title=A[A.length-1].title,A[e].description=A[A.length-1].description)}(B.textContent),function(t){const e=R(".sidebarProject").children;for(let n=0;n<e.length;n++)e[n].textContent==t&&(e[n].textContent=A[e.length].title)}(B.textContent),R(".projectNameMain").textContent=A[A.length-1].title,A.splice(A.length-1,1),I=!1):(t&&(O(t.title),M(t)),d())}))}();const F=new c("defaultProject","This is a default project. You can also create your own :)");A[0]=F,M(F),O("defaultProject")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,